{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The most efficient Blockchain for the Token Economy \u00b6 The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201990s, with pioneers and dreamers coming together to build a new future. The objective of TomoChain is to become a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture, allowing for fast, frictionless payment and a secure, decentralised, and trusted store of value. TomoChain aims to be a public EVM-compatible blockchain with the following advantages: low transaction fee, fast confirmation time, double validation and randomization for security guarantees. TomoChain envisions an ecosystem of different DApps running on the TomoChain blockchain infrastructure. In particular, we propose a solution for solving the transaction processing performance bottleneck in Ethereum which hinders its adoption into industries, especially finance. More specifically, we are constructing an efficient and secured consensus protocol, which tackles the following main bottlenecks of classic blockchains: Efficiency: The small throughput of Bitcoin and Ethereum severely hinders a widespread adoption of such crypto- currencies. Confirmation times: Bitcoin takes on average 1 hour to confirm a transaction because the confirmation of a Bitcoin block requires 5 subsequent blocks created following it. While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes. These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. In the newly published technical paper, TomoChain proposes the Proof-of-Stake Voting (PoSV) consensus, which is a PoS-based blockchain protocol with a fair voting mechanism, rigorous security guarantees, and uniform probability eventually. The consensus has the following key novelties: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase","title":"Introduction"},{"location":"#the-most-efficient-blockchain-for-the-token-economy","text":"The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201990s, with pioneers and dreamers coming together to build a new future. The objective of TomoChain is to become a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture, allowing for fast, frictionless payment and a secure, decentralised, and trusted store of value. TomoChain aims to be a public EVM-compatible blockchain with the following advantages: low transaction fee, fast confirmation time, double validation and randomization for security guarantees. TomoChain envisions an ecosystem of different DApps running on the TomoChain blockchain infrastructure. In particular, we propose a solution for solving the transaction processing performance bottleneck in Ethereum which hinders its adoption into industries, especially finance. More specifically, we are constructing an efficient and secured consensus protocol, which tackles the following main bottlenecks of classic blockchains: Efficiency: The small throughput of Bitcoin and Ethereum severely hinders a widespread adoption of such crypto- currencies. Confirmation times: Bitcoin takes on average 1 hour to confirm a transaction because the confirmation of a Bitcoin block requires 5 subsequent blocks created following it. While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes. These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. In the newly published technical paper, TomoChain proposes the Proof-of-Stake Voting (PoSV) consensus, which is a PoS-based blockchain protocol with a fair voting mechanism, rigorous security guarantees, and uniform probability eventually. The consensus has the following key novelties: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase","title":"The most efficient Blockchain for the Token Economy"},{"location":"developers/blockheader/","text":"This shows the different fields included in a block header of TomoChain. Content to be updated \u00b6","title":"Blockheader"},{"location":"developers/blockheader/#content-to-be-updated","text":"","title":"Content to be updated"},{"location":"developers/clicommands/","text":"This shows useful CLI commands for developers to work with the TomoChain client tomo . Command: $ tomo [OPTIONS] Options: --verbosity : log level from 1 to 5. Here we're using 4 for debug messages --datadir : path to your data directory created above. --keystore : path to your account's keystore created above. --identity : your full-node's name. --password : your account's password. --networkid : our network ID. --port : your full-node's listening port (default to 30303) --rpc, --rpccorsdomain, --rpcaddr, --rpcport, --rpcvhosts : your full-node will accept RPC requests at 8545 TCP. --ws, --wsaddr, --wsport, --wsorigins : your full-node will accept Websocket requests at 8546 TCP. --mine : [required] your full-node wants to register to be a candidate for masternode selection. --gasprice : Minimal gas price to accept for mining a transaction. --targetgaslimit : Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --bootnode : bootnode information to help to discover other nodes in the network --gcmode : blockchain garbage collection mode (\"full\", \"archive\") --synmode : [required] blockchain sync mode (\"full\". More detail: https://github.com/tomochain/tomochain/blob/master/eth/downloader/modes.go#L24) --ethstats : send data to stats website --tomo-testnet : required when the networkid is testnet(89) --store-reward : store reward report","title":"Useful manual CLI commands"},{"location":"developers/dappdeploytuto/","text":"For developers who are interested in building and deploying DApps on TomoChain, please refer to this article for a detailed guideline.","title":"Deploy DApp on TomoChain"},{"location":"developers/icosmartcontract/","text":"For developers who are interested in building and deploying an ICO smart contract on TomoChain, please refer to this article for a detailed guideline.","title":"Deploy an ICO smart contract"},{"location":"developers/integrations/","text":"TomoChain is an EVM-compatible public blockchain. So you can use TomoChain JSON-RPC APIs the same as Ethereum. It means that you can use Web3 library to create a wallet, check the balance or send the transaction. You just need to change RPC endpoint to TomoChain fullnode or TomoChain public RPC endpoint. You can take a look to TomoChain Networks page to the details of Testnet/Mainnet network information. Connect to TomoChain nodes \u00b6 import Web3 from 'web3' ; const web3 = new Web3 ( 'https://rpc.tomochain.com' ); Create wallet \u00b6 Generates an account object with private key and public key. web3.eth.accounts.create([entropy]); Example \u00b6 web3 . eth . accounts . create (); > { address : \"0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01\" , privateKey : \"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} } web3 . eth . accounts . create ( '2435@#@#@\u00b1\u00b1\u00b1\u00b1!!!!678543213456764321\u00a734567543213456785432134567' ); > { address : \"0xF2CD2AA0c7926743B1D4310b2BC984a0a453c3d4\" , privateKey : \"0xd7325de5c2c1cf0009fac77d3d04a9c004b038883446b065871bc3e831dcd098\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} } web3 . eth . accounts . create ( web3 . utils . randomHex ( 32 )); > { address : \"0xe78150FaCD36E8EB00291e251424a0515AA1FF05\" , privateKey : \"0xcc505ee6067fba3f6fc2050643379e190e087aeffe5d958ab9f2f3ed3800fa4e\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} } Wallet balances \u00b6 Get account balance. web3 . eth . getBalance ( address [, defaultBlock ] [, callback ]) Example \u00b6 web3 . eth . getBalance ( \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\" ). then ( console . log ); > \"1000000000000\" Create transaction \u00b6 Sends transaction to the network. You need to unlock wallet before using this function. web3 . eth . sendTransaction ( transactionObject [, callback ]) Parameters \u00b6 Object - The transaction object to send: from - String|Number : The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String : (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber : (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number : (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber : (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String : (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number : (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. callback - Function : (optional) Optional callback, returns an error object as first parameter and the result as second. Example \u00b6 const Web3 = require ( 'web3' ) // Connect to TomoChain nodes const provider = new Web3 . providers . HttpProvider ( 'https://rpc.tomochain.com' ) const web3 = new Web3 ( provider ) // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) let coinbase = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = coinbase // Make a transaction using the promise web3 . eth . sendTransaction ({ from : coinbase , to : '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe' , value : '1000000000000000' }) . then ( function ( receipt ){ ... }); Sign data \u00b6 After unlock a wallet, you can sign the data web3.eth.sign(dataToSign, address [, callback]) Parameters \u00b6 String - Data to sign. If String it will be converted using web3.utils.utf8ToHex. String|Number - Address to sign data with. Or an address or index of a local wallet in web3.eth.accounts.wallet. Function - (optional) Optional callback, returns an error object as first parameter and the result as second. Example \u00b6 const Web3 = require ( 'web3' ) // Connect to TomoChain nodes const provider = new Web3 . providers . HttpProvider ( 'https://rpc.tomochain.com' ) const web3 = new Web3 ( provider ) // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) let coinbase = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = coinbase // Make a transaction using the promise web3 . eth . sign ( 'testdata' ). then ( function ( result ){ console . log ( result ) }); Check transaction status \u00b6 web3 . eth . getTransactionReceipt ( hash [, callback ]) The receipt is not available for pending transactions and returns null. Parameters \u00b6 String - The transaction hash. Function - (optional) Optional callback, returns an error object as first parameter and the result as second. Returns \u00b6 Promise returns Object - A transaction receipt object, or null when no receipt was found: status - Boolean : TRUE if the transaction was successful, FALSE , if the EVM reverted the transaction. blockHash 32 Bytes - String : Hash of the block where this transaction was in. blockNumber - Number : Block number where this transaction was in. transactionHash 32 Bytes - String : Hash of the transaction. transactionIndex - Number : Integer of the transactions index position in the block. from - String : Address of the sender. to - String : Address of the receiver. null when its a contract creation transaction. contractAddress - String : The contract address created, if the transaction was a contract creation, otherwise null. cumulativeGasUsed - Number : The total amount of gas used when this transaction was executed in the block. gasUsed - Number : The amount of gas used by this specific transaction alone. logs - Array : Array of log objects, which this transaction generated. Irreversible blocks \u00b6 In normal case, you can wait for 60 confirmations, then checking block finality via eth_getBlockFinalityByNumber or eth_getBlockFinalityByHash API: eth_getBlockFinalityByNumber eth_getBlockFinalityByHash If result > 75, it means block finality and Irreversible. How does TomoChain smart contract work? \u00b6 Same as Ethereum, supports Solidity compiler version < 0.5.0 Possible to create muti-signature wallet? \u00b6 Yes. Same as Ethereum. You can use Gnosis MultiSigWallet. Run TomoChain node \u00b6 Refer to Run TomoChain Fullnode","title":"TOMO Exchange/Wallet"},{"location":"developers/integrations/#connect-to-tomochain-nodes","text":"import Web3 from 'web3' ; const web3 = new Web3 ( 'https://rpc.tomochain.com' );","title":"Connect to TomoChain nodes"},{"location":"developers/integrations/#create-wallet","text":"Generates an account object with private key and public key. web3.eth.accounts.create([entropy]);","title":"Create wallet"},{"location":"developers/integrations/#example","text":"web3 . eth . accounts . create (); > { address : \"0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01\" , privateKey : \"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} } web3 . eth . accounts . create ( '2435@#@#@\u00b1\u00b1\u00b1\u00b1!!!!678543213456764321\u00a734567543213456785432134567' ); > { address : \"0xF2CD2AA0c7926743B1D4310b2BC984a0a453c3d4\" , privateKey : \"0xd7325de5c2c1cf0009fac77d3d04a9c004b038883446b065871bc3e831dcd098\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} } web3 . eth . accounts . create ( web3 . utils . randomHex ( 32 )); > { address : \"0xe78150FaCD36E8EB00291e251424a0515AA1FF05\" , privateKey : \"0xcc505ee6067fba3f6fc2050643379e190e087aeffe5d958ab9f2f3ed3800fa4e\" , signTransaction : function ( tx ){...}, sign : function ( data ){...}, encrypt : function ( password ){...} }","title":"Example"},{"location":"developers/integrations/#wallet-balances","text":"Get account balance. web3 . eth . getBalance ( address [, defaultBlock ] [, callback ])","title":"Wallet balances"},{"location":"developers/integrations/#example_1","text":"web3 . eth . getBalance ( \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\" ). then ( console . log ); > \"1000000000000\"","title":"Example"},{"location":"developers/integrations/#create-transaction","text":"Sends transaction to the network. You need to unlock wallet before using this function. web3 . eth . sendTransaction ( transactionObject [, callback ])","title":"Create transaction"},{"location":"developers/integrations/#parameters","text":"Object - The transaction object to send: from - String|Number : The address for the sending account. Uses the web3.eth.defaultAccount property, if not specified. Or an address or index of a local wallet in web3.eth.accounts.wallet. to - String : (optional) The destination address of the message, left undefined for a contract-creation transaction. value - Number|String|BN|BigNumber : (optional) The value transferred for the transaction in wei, also the endowment if it\u2019s a contract-creation transaction. gas - Number : (optional, default: To-Be-Determined) The amount of gas to use for the transaction (unused gas is refunded). gasPrice - Number|String|BN|BigNumber : (optional) The price of gas for this transaction in wei, defaults to web3.eth.gasPrice. data - String : (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code. nonce - Number : (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. callback - Function : (optional) Optional callback, returns an error object as first parameter and the result as second.","title":"Parameters"},{"location":"developers/integrations/#example_2","text":"const Web3 = require ( 'web3' ) // Connect to TomoChain nodes const provider = new Web3 . providers . HttpProvider ( 'https://rpc.tomochain.com' ) const web3 = new Web3 ( provider ) // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) let coinbase = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = coinbase // Make a transaction using the promise web3 . eth . sendTransaction ({ from : coinbase , to : '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe' , value : '1000000000000000' }) . then ( function ( receipt ){ ... });","title":"Example"},{"location":"developers/integrations/#sign-data","text":"After unlock a wallet, you can sign the data web3.eth.sign(dataToSign, address [, callback])","title":"Sign data"},{"location":"developers/integrations/#parameters_1","text":"String - Data to sign. If String it will be converted using web3.utils.utf8ToHex. String|Number - Address to sign data with. Or an address or index of a local wallet in web3.eth.accounts.wallet. Function - (optional) Optional callback, returns an error object as first parameter and the result as second.","title":"Parameters"},{"location":"developers/integrations/#example_3","text":"const Web3 = require ( 'web3' ) // Connect to TomoChain nodes const provider = new Web3 . providers . HttpProvider ( 'https://rpc.tomochain.com' ) const web3 = new Web3 ( provider ) // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) let coinbase = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = coinbase // Make a transaction using the promise web3 . eth . sign ( 'testdata' ). then ( function ( result ){ console . log ( result ) });","title":"Example"},{"location":"developers/integrations/#check-transaction-status","text":"web3 . eth . getTransactionReceipt ( hash [, callback ]) The receipt is not available for pending transactions and returns null.","title":"Check transaction status"},{"location":"developers/integrations/#parameters_2","text":"String - The transaction hash. Function - (optional) Optional callback, returns an error object as first parameter and the result as second.","title":"Parameters"},{"location":"developers/integrations/#returns","text":"Promise returns Object - A transaction receipt object, or null when no receipt was found: status - Boolean : TRUE if the transaction was successful, FALSE , if the EVM reverted the transaction. blockHash 32 Bytes - String : Hash of the block where this transaction was in. blockNumber - Number : Block number where this transaction was in. transactionHash 32 Bytes - String : Hash of the transaction. transactionIndex - Number : Integer of the transactions index position in the block. from - String : Address of the sender. to - String : Address of the receiver. null when its a contract creation transaction. contractAddress - String : The contract address created, if the transaction was a contract creation, otherwise null. cumulativeGasUsed - Number : The total amount of gas used when this transaction was executed in the block. gasUsed - Number : The amount of gas used by this specific transaction alone. logs - Array : Array of log objects, which this transaction generated.","title":"Returns"},{"location":"developers/integrations/#irreversible-blocks","text":"In normal case, you can wait for 60 confirmations, then checking block finality via eth_getBlockFinalityByNumber or eth_getBlockFinalityByHash API: eth_getBlockFinalityByNumber eth_getBlockFinalityByHash If result > 75, it means block finality and Irreversible.","title":"Irreversible blocks"},{"location":"developers/integrations/#how-does-tomochain-smart-contract-work","text":"Same as Ethereum, supports Solidity compiler version < 0.5.0","title":"How does TomoChain smart contract work?"},{"location":"developers/integrations/#possible-to-create-muti-signature-wallet","text":"Yes. Same as Ethereum. You can use Gnosis MultiSigWallet.","title":"Possible to create muti-signature wallet?"},{"location":"developers/integrations/#run-tomochain-node","text":"Refer to Run TomoChain Fullnode","title":"Run TomoChain node"},{"location":"developers/staking-integrations/","text":"Masternodes and stakers is stored and governared in TomoChain Validator smart contract : Smart Contract Code: TomoChain Validator Smart Contract ABI: TomoValidatorAbi.json TomoChain Validator Smart Contract Interface: // apply a new masternode candidate function propose ( address _candidate ) external payable ; // Deposit to stake/vote for a candidate function vote ( address _candidate ) external payable ; // Unstake/unvote for a candidate function unvote ( address _candidate , uint256 _cap ) public ; // Resign a candidate function resign ( address _candidate ) public ; // Withdraw after unvote, resign function withdraw ( uint256 _blockNumber , uint _index ) public ; function getCandidates () public view returns ( address []); function getCandidateCap ( address _candidate ) public view returns ( uint256 ); function getCandidateOwner ( address _candidate ) public view returns ( address ); function getVoterCap ( address _candidate , address _voter ) public view returns ( uint256 ); function getVoters ( address _candidate ) public view returns ( address []); function isCandidate ( address _candidate ) public view returns ( bool ); function getWithdrawBlockNumbers () public view returns ( uint256 []); function getWithdrawCap ( uint256 _blockNumber ) public view returns ( uint256 ); TomoChain provides RPC APIs. So you can use Web3 library to directly call the functions in the smart contract. You can follow the steps below to interact with the smart contract by using Web3 library and NodeJS. Init Web3 provider \u00b6 At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88 For testnet/mainnet details, you can get network information here Unlock wallet \u00b6 You need to unlock the wallet before staking for the nodes Example \u00b6 // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const owner = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = owner Init Web3 TomoChain Validator Contract \u00b6 const validatorAbi = require ( './TomoValidatorAbi.json' ) const address = '0x0000000000000000000000000000000000000088' const validator = new web3 . eth . Contract ( validatorAbi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TomoValidatorAbi.json here Propose/Apply a candidate \u00b6 Masternode owner need to have at least 50000 TOMO to apply a fullnode to become a Masternode candidate. So make sure you have > 50000 TOMO in your masternode owner wallet to deposit to the smart contract and pay transaction fee. You can apply a masternode candidate by call propose function from the smart contract Example \u00b6 // Masternode coinbase address const coinbase = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" validator . methods . propose ( coinbase ). send ({ from : owner , value : '50000000000000000000000' , // 50000 TOMO gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can refer to Staking TomoChain script Stake/Vote a candidate \u00b6 You can stake at least 100 TOMO for a node by calling vote function from the smart contract. Example \u00b6 Stake 500 TOMO to a node. validator . methods . vote ( coinbase ). send ({ from : owner , value : '500000000000000000000' , // 500 TOMO gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Unstake/Unvote a candidate \u00b6 You can unstake by calling unvote function from the smart contract const cap = '500000000000000000000' // unvote 500 TOMO validator . methods . unvote ( coinbase , cap ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Resign a candidate \u00b6 validator . methods . resign ( coinbase ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Withdraw TOMO \u00b6 You need to wait for 48 epochs (if unvote), 30 days (if resign) to unlock your TOMO staked Example \u00b6 // get highest block number web3 . eth . getBlockNumber (). then ( blockNumber => { return validator . methods . getWithdrawBlockNumbers (). call ({ from : owner }). then (( result ) => { let map = result . map ( it , idx => { it = it . toString () if ( parseInt ( it ) < blockNumber && it != \"0\" ) { return validator . methods . withdraw ( it , idx ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) } }) return Promise . all ( map ) }) }). then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Get list Withdrawals \u00b6 We need to call getWithdrawBlockNumbers and getWithdrawCap function from TomoValidator smart contract to get the data Example \u00b6 let blks = await contract . getWithdrawBlockNumbers . call ({ from : owner }) // remove duplicate blks = [... new Set ( blks )] let withdraws = [] await Promise . all ( blks . map ( async ( it , index ) => { let blk = new BigNumber ( it ). toString () if ( blk !== '0' ) { self . aw = true } let wd = { blockNumber : blk } wd . cap = await contract . methods . getWithdrawCap ( blk ). call ({ from : owner }) withdraws [ index ] = wd })) console . log ( withdraws ) Get list candidates \u00b6 You can get list candidates from RPC endpoint : curl https://rpc.tomochain.com \\ -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCandidates\",\"params\": [\"latest\"],\"id\":1}' Or get list candidates from TomoMaster : curl -X GET https://master.tomochain.com/api/candidates \\ -H 'Accept: application/json'","title":"TomoChain Staking Governance"},{"location":"developers/staking-integrations/#init-web3-provider","text":"At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88 For testnet/mainnet details, you can get network information here","title":"Init Web3 provider"},{"location":"developers/staking-integrations/#unlock-wallet","text":"You need to unlock the wallet before staking for the nodes","title":"Unlock wallet"},{"location":"developers/staking-integrations/#example","text":"// Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const owner = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = owner","title":"Example"},{"location":"developers/staking-integrations/#init-web3-tomochain-validator-contract","text":"const validatorAbi = require ( './TomoValidatorAbi.json' ) const address = '0x0000000000000000000000000000000000000088' const validator = new web3 . eth . Contract ( validatorAbi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TomoValidatorAbi.json here","title":"Init Web3 TomoChain Validator Contract"},{"location":"developers/staking-integrations/#proposeapply-a-candidate","text":"Masternode owner need to have at least 50000 TOMO to apply a fullnode to become a Masternode candidate. So make sure you have > 50000 TOMO in your masternode owner wallet to deposit to the smart contract and pay transaction fee. You can apply a masternode candidate by call propose function from the smart contract","title":"Propose/Apply a candidate"},{"location":"developers/staking-integrations/#example_1","text":"// Masternode coinbase address const coinbase = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" validator . methods . propose ( coinbase ). send ({ from : owner , value : '50000000000000000000000' , // 50000 TOMO gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can refer to Staking TomoChain script","title":"Example"},{"location":"developers/staking-integrations/#stakevote-a-candidate","text":"You can stake at least 100 TOMO for a node by calling vote function from the smart contract.","title":"Stake/Vote a candidate"},{"location":"developers/staking-integrations/#example_2","text":"Stake 500 TOMO to a node. validator . methods . vote ( coinbase ). send ({ from : owner , value : '500000000000000000000' , // 500 TOMO gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Example"},{"location":"developers/staking-integrations/#unstakeunvote-a-candidate","text":"You can unstake by calling unvote function from the smart contract const cap = '500000000000000000000' // unvote 500 TOMO validator . methods . unvote ( coinbase , cap ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Unstake/Unvote a candidate"},{"location":"developers/staking-integrations/#resign-a-candidate","text":"validator . methods . resign ( coinbase ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Resign a candidate"},{"location":"developers/staking-integrations/#withdraw-tomo","text":"You need to wait for 48 epochs (if unvote), 30 days (if resign) to unlock your TOMO staked","title":"Withdraw TOMO"},{"location":"developers/staking-integrations/#example_3","text":"// get highest block number web3 . eth . getBlockNumber (). then ( blockNumber => { return validator . methods . getWithdrawBlockNumbers (). call ({ from : owner }). then (( result ) => { let map = result . map ( it , idx => { it = it . toString () if ( parseInt ( it ) < blockNumber && it != \"0\" ) { return validator . methods . withdraw ( it , idx ). send ({ from : owner , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) } }) return Promise . all ( map ) }) }). then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Example"},{"location":"developers/staking-integrations/#get-list-withdrawals","text":"We need to call getWithdrawBlockNumbers and getWithdrawCap function from TomoValidator smart contract to get the data","title":"Get list Withdrawals"},{"location":"developers/staking-integrations/#example_4","text":"let blks = await contract . getWithdrawBlockNumbers . call ({ from : owner }) // remove duplicate blks = [... new Set ( blks )] let withdraws = [] await Promise . all ( blks . map ( async ( it , index ) => { let blk = new BigNumber ( it ). toString () if ( blk !== '0' ) { self . aw = true } let wd = { blockNumber : blk } wd . cap = await contract . methods . getWithdrawCap ( blk ). call ({ from : owner }) withdraws [ index ] = wd })) console . log ( withdraws )","title":"Example"},{"location":"developers/staking-integrations/#get-list-candidates","text":"You can get list candidates from RPC endpoint : curl https://rpc.tomochain.com \\ -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCandidates\",\"params\": [\"latest\"],\"id\":1}' Or get list candidates from TomoMaster : curl -X GET https://master.tomochain.com/api/candidates \\ -H 'Accept: application/json'","title":"Get list candidates"},{"location":"developers/trc20-integrations/","text":"This tutorial is a guide for a developer who wants to know how to integrate TRC20 token to applications (e.g. wallet, exchange) Smart Contract ABI: TRC20.json TRC20 Contract Interface: function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); TomoChain provides RPC APIs. So you can use Web3 library to directly call the functions in the smart contract. You can follow the steps below to interact with the smart contract by using Web3 library and NodeJS. Init Web3 provider \u00b6 At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. You can take a look to TomoChain Networks page to get the details of Testnet/Mainnet network information. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88 Unlock wallet \u00b6 To create a wallet, you can refer to Create wallet page You need to unlock the wallet before interact TRC20 contract Example \u00b6 // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const holder = account . address web3 . eth . accounts . wallet . add ( account ) web . eth . defaultAccount = holder Init Web3 TRC20 Contract \u00b6 const trc20Abi = require ( './TRC20.json' ) const address = '[enter_your_contract_address]' const trc20 = new web3 . eth . Contract ( trc20Abi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TRC20.json here Check balance \u00b6 You need to call function balanceOf() from TRC20 contract to check your token balance for an address. Example \u00b6 trc20 . methods . balanceOf ( holder ). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Estimate TX fee (gas) \u00b6 Before sending tokens, you need to estimate fee to make sure you have enough TOMO for sending. You need to use this method: myContract.methods.myMethod([param1[, param2[, ...]]]).estimateGas(options[, callback]) Example \u00b6 trc20 . methods . transfer ( to , '500000000000000000000' ). estimateGas ({ from : holder }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Transfer token \u00b6 Token holder needs to call function transfer to send token to an address Example \u00b6 // send 500000000000000000000 tokens to this address (e.g decimals 18) const to = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" trc20 . methods . transfer ( to , '500000000000000000000' ). send ({ from : holder , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can refer to Transfer TRC20 script","title":"TRC20 Exchange/Wallet"},{"location":"developers/trc20-integrations/#init-web3-provider","text":"At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. You can take a look to TomoChain Networks page to get the details of Testnet/Mainnet network information. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88","title":"Init Web3 provider"},{"location":"developers/trc20-integrations/#unlock-wallet","text":"To create a wallet, you can refer to Create wallet page You need to unlock the wallet before interact TRC20 contract","title":"Unlock wallet"},{"location":"developers/trc20-integrations/#example","text":"// Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const holder = account . address web3 . eth . accounts . wallet . add ( account ) web . eth . defaultAccount = holder","title":"Example"},{"location":"developers/trc20-integrations/#init-web3-trc20-contract","text":"const trc20Abi = require ( './TRC20.json' ) const address = '[enter_your_contract_address]' const trc20 = new web3 . eth . Contract ( trc20Abi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TRC20.json here","title":"Init Web3 TRC20 Contract"},{"location":"developers/trc20-integrations/#check-balance","text":"You need to call function balanceOf() from TRC20 contract to check your token balance for an address.","title":"Check balance"},{"location":"developers/trc20-integrations/#example_1","text":"trc20 . methods . balanceOf ( holder ). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Example"},{"location":"developers/trc20-integrations/#estimate-tx-fee-gas","text":"Before sending tokens, you need to estimate fee to make sure you have enough TOMO for sending. You need to use this method: myContract.methods.myMethod([param1[, param2[, ...]]]).estimateGas(options[, callback])","title":"Estimate TX fee (gas)"},{"location":"developers/trc20-integrations/#example_2","text":"trc20 . methods . transfer ( to , '500000000000000000000' ). estimateGas ({ from : holder }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Example"},{"location":"developers/trc20-integrations/#transfer-token","text":"Token holder needs to call function transfer to send token to an address","title":"Transfer token"},{"location":"developers/trc20-integrations/#example_3","text":"// send 500000000000000000000 tokens to this address (e.g decimals 18) const to = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" trc20 . methods . transfer ( to , '500000000000000000000' ). send ({ from : holder , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can refer to Transfer TRC20 script","title":"Example"},{"location":"developers/trc21-integrations/","text":"This tutorial is a guide for a developer who wants to know how to integrate TRC21 token to applications (e.g., wallet, exchange) Smart Contract ABI: TRC21.json TRC21 Contract Interface: function totalSupply () external view returns ( uint256 ); function balanceOf ( address who ) external view returns ( uint256 ); function estimateFee ( uint256 value ) external view returns ( uint256 ); function issuer () external view returns ( address ); function allowance ( address owner , address spender ) external view returns ( uint256 ); function transfer ( address to , uint256 value ) external returns ( bool ); function approve ( address spender , uint256 value ) external returns ( bool ); function transferFrom ( address from , address to , uint256 value ) external returns ( bool ); event Transfer ( address indexed from , address indexed to , uint256 value ); event Approval ( address indexed owner , address indexed spender , uint256 value ); event Fee ( address indexed from , address indexed to , address indexed issuer , uint256 value ); Refer to TRC21 Specification TomoChain provides RPC APIs. So you can use Web3 library to directly call the functions in the smart contract. You can follow the steps below to interact with the smart contract by using Web3 library and NodeJS. Init Web3 provider \u00b6 At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. You can take a look to TomoChain Networks page to get the details of Testnet/Mainnet network information. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88 Unlock wallet \u00b6 You need to unlock the wallet before interact TRC21 contract Example \u00b6 // Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const holder = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = holder Init Web3 TRC21 Contract \u00b6 const trc21Abi = require ( './TRC21.json' ) const address = '[enter_your_contract_address]' const trc21 = new web3 . eth . Contract ( trc21Abi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TRC21.json here Check balance \u00b6 You need to call function balanceOf() from TRC21 contract to check your token balance for an address. Example \u00b6 trc21 . methods . balanceOf ( holder ). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Estimate fee \u00b6 Before sending tokens, we need to check TX fee by calling estimateFee function in TRC21 smart contract. Example \u00b6 trc21 . methods . estimateFee (). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Note: this fee is amount token you need to pay to send TRC21 token that applied TomoZ Transfer token \u00b6 Token holder needs to call function transfer to send token to an address Example \u00b6 // send 500000000000000000000 tokens to this address (e.g decimals 18) const to = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" trc21 . methods . transfer ( to , '500000000000000000000' ). send ({ from : holder , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can take a look to this example Transfer TRC21 token Checking TomoZ \u00b6 You need to call getTokenCapacity to https://scan.tomochain.com/address/0x8c0faeb5c6bed2129b8674f262fd45c4e9468bee#readContract. If the return value > 0, the token enabled TomoZ protocol.","title":"TRC21 Exchange/Wallet"},{"location":"developers/trc21-integrations/#init-web3-provider","text":"At the first step, you need init Web3 provider by connecting TomoChain Fullnode RPC endpoint. You can take a look to TomoChain Networks page to get the details of Testnet/Mainnet network information. const Web3 = require ( 'web3' ) const web3 = new Web3 ( 'https://rpc.tomochain.com' ) const chainId = 88","title":"Init Web3 provider"},{"location":"developers/trc21-integrations/#unlock-wallet","text":"You need to unlock the wallet before interact TRC21 contract","title":"Unlock wallet"},{"location":"developers/trc21-integrations/#example","text":"// Unlock wallet by private key const account = web3 . eth . accounts . privateKeyToAccount ( pkey ) const holder = account . address web3 . eth . accounts . wallet . add ( account ) web3 . eth . defaultAccount = holder","title":"Example"},{"location":"developers/trc21-integrations/#init-web3-trc21-contract","text":"const trc21Abi = require ( './TRC21.json' ) const address = '[enter_your_contract_address]' const trc21 = new web3 . eth . Contract ( trc21Abi , address , { gasPrice : 250000000 , gas : 2000000 }) Note: you can get TRC21.json here","title":"Init Web3 TRC21 Contract"},{"location":"developers/trc21-integrations/#check-balance","text":"You need to call function balanceOf() from TRC21 contract to check your token balance for an address.","title":"Check balance"},{"location":"developers/trc21-integrations/#example_1","text":"trc21 . methods . balanceOf ( holder ). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e ))","title":"Example"},{"location":"developers/trc21-integrations/#estimate-fee","text":"Before sending tokens, we need to check TX fee by calling estimateFee function in TRC21 smart contract.","title":"Estimate fee"},{"location":"developers/trc21-integrations/#example_2","text":"trc21 . methods . estimateFee (). call () . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) Note: this fee is amount token you need to pay to send TRC21 token that applied TomoZ","title":"Example"},{"location":"developers/trc21-integrations/#transfer-token","text":"Token holder needs to call function transfer to send token to an address","title":"Transfer token"},{"location":"developers/trc21-integrations/#example_3","text":"// send 500000000000000000000 tokens to this address (e.g decimals 18) const to = \"0xf8ac9d5022853c5847ef75aea0104eed09e5f402\" trc21 . methods . transfer ( to , '500000000000000000000' ). send ({ from : holder , gas : 2000000 , gasPrice : 250000000 , chainId : chainId }) . then (( result ) => { console . log ( result ) }). catch ( e => console . log ( e )) You can take a look to this example Transfer TRC21 token","title":"Example"},{"location":"developers/trc21-integrations/#checking-tomoz","text":"You need to call getTokenCapacity to https://scan.tomochain.com/address/0x8c0faeb5c6bed2129b8674f262fd45c4e9468bee#readContract. If the return value > 0, the token enabled TomoZ protocol.","title":"Checking TomoZ"},{"location":"developers/tutoprivatenet/","text":"This tutorial shows how to setup a private TomoChain testnet on a local machine. The purpose is to help developers familiarise TomoChain's source code and initial setup so that one can learn to contribute to the development of TomoChain. The tutorial is alo a first step for any developer who wants to customize TomoChain's source code to use in a private or consortium environment. The following will walk you step-by-step to setup a TomoChain private net with three masternodes. Install Golang \u00b6 Reference: https://golang.org/doc/install Set environment variables set GOROOT=$HOME/usr/local/go set GOPATH=$HOME/go Prepare tomo client software \u00b6 cd $GOPATH/src/github.com/ethereum/go-ethereum Download source code and build git init git remote add git@github.com:tomochain/tomochain.git git pull origin master make all Create shortcuts/alias for easier access alias tomo=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/tomo alias bootnode=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/bootnode alias puppeth=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/puppeth Setup chain data folders datadir and corresponding keystore folders for 3 masternodes \u00b6 mkdir $HOME/tomochain mkdir $HOME/tomochain/nodes mkdir $HOME/tomochain/nodes/1 $HOME/tomochain/nodes/2 $HOME/tomochain/nodes/3 mkdir $HOME/tomochain/keystore/1 $HOME/tomochain/keystore/2 $HOME/tomochain/keystore/3 Initialize / Import accounts for the masternodes's keystore \u00b6 Initialize new accounts: If you have existing accounts and prefer importing them, please ignore this step and go to Import Accounts tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/1 tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/2 tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/3 Import accounts tomo account import [PRIVATE_KEY_FILE_OF_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/1 \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] Repeat this step to import two more private keys for our three masternodes. Customize genesis block by using the puppeth tool \u00b6 Run puppeth command and answer questions about your private chain as follows: puppeth Set chain name > localtomo Enter 2 to configure new genesis Enter 3 to select POSV consensus Set blocktime (default 2 seconds) Set reward of each epoch Set addresses to be initial masternodes Set number of blocks of each epoch (default 900). If you would like to customize epoch number, please update code here common/constants.go:14 EpocBlockRandomize = 900 Set gap (How many blocks before checkpoint need prepare new masternodes set ?) suggestedGap = 5 Enter foundation address which you hold private key Enter accounts which you control private keys to unlock MultiSig wallet Enter swap wallet address for fund 55 million TOMO Export genesis file - Select 2. Manage existing genesis - Select 2. Export genesis configuration - Enter genesis filename Control + C to exit Initialize your private chain with above genesis block \u00b6 tomo --datadir $HOME/tomochain/nodes/1 init [PATH/TO/GENESIS_FILE] tomo --datadir $HOME/tomochain/nodes/2 init [PATH/TO/GENESIS_FILE] tomo --datadir $HOME/tomochain/nodes/3 init [PATH/TO/GENESIS_FILE] Setup bootnode \u00b6 Initialize bootnode key bootnode -genkey bootnode.key Start bootnode and copy bootnode information bootnode -nodekey ./bootnode.key enode://7e59324b1e54f8c282719465eb96786fb3a04a0265deee2cdb0f62e912337ca6f118d0c91f7ebfae6f5c17825205279249cf7ff65ae54d0a1a8908ef16f80f63@[::]:30301 Start masternodes \u00b6 Start masternode 1 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/1 --networkid [YOUR_NETWORK_ID] --port 10303 \\ --keystore $HOME/tomochain/keystore/1 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 1545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 1546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_1]\" \\ --identity \"NODE1\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Start masternode 2 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/2 --networkid [YOUR_NETWORK_ID] --port 20303 \\ --keystore $HOME/tomochain/keystore/2 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 2545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 2546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_2]\" \\ --identity \"NODE2\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Start masternode 3 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/3 --networkid [YOUR_NETWORK_ID] --port 30303 \\ --keystore $HOME/tomochain/keystore/3 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 3545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 3546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_3]\" \\ --identity \"NODE3\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Some explanations on the flags --verbosity: log level from 1 to 5. Here we're using 4 for debug messages --datadir: path to your data directory created above. --keystore: path to your account's keystore created above. --identity: your full-node's name. --password: your account's password. --networkid: our testnet network ID. --port: your full-node's listening port (default to 30303) --rpc, --rpccorsdomain, --rpcaddr, --rpcport, --rpcvhosts: your full-node will accept RPC requests at 8545 TCP. --ws, --wsaddr, --wsport, --wsorigins: your full-node will accept Websocket requests at 8546 TCP. --mine: your full-node wants to register to be a candidate for masternode selection. --gasprice: Minimal gas price to accept for mining a transaction. --targetgaslimit: Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --bootnode: bootnode information to help to discover other nodes in the network --gcmode: blockchain garbage collection mode (\"full\", \"archive\") --synmode: blockchain sync mode (\"fast\", \"full\", or \"light\". More detail: https://github.com/tomochain/tomochain/blob/master/eth/downloader/modes.go#L24) To see all flags usage tomo --help Check your private chain \u00b6 Connect ipc tomo attach $HOME/tomochain/nodes/1/tomo.ipc admin.nodeInfo eth.getBlock(0) eth.getBlock(1) Connect rpc tomo attach tomo attach http://localhost:1545 eth.getBlock(0) eth.getBlock(1) Verify Checkpoints Wait about 30 minutes to see if your chain passes the first checkpoint tomo attach http://0.0.0.0:1545 eth.getBlock(900) Troubleshooting \u00b6 Reset your chain rm -rf $HOME/tomochain/nodes/1/tomo $HOME/tomochain/nodes/2/tomo $HOME/tomochain/nodes/3/tomo tomo --datadir $HOME/tomochain/nodes/1 init genesis.json tomo --datadir $HOME/tomochain/nodes/2 init genesis.json tomo --datadir $HOME/tomochain/nodes/3 init genesis.json Note: we use the Gnosis Multisig Wallet: https://github.com/gnosis/MultiSigWallet","title":"TomoChain private testnet setup"},{"location":"developers/tutoprivatenet/#install-golang","text":"Reference: https://golang.org/doc/install Set environment variables set GOROOT=$HOME/usr/local/go set GOPATH=$HOME/go","title":"Install Golang"},{"location":"developers/tutoprivatenet/#prepare-tomo-client-software","text":"cd $GOPATH/src/github.com/ethereum/go-ethereum Download source code and build git init git remote add git@github.com:tomochain/tomochain.git git pull origin master make all Create shortcuts/alias for easier access alias tomo=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/tomo alias bootnode=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/bootnode alias puppeth=$GOPATH/src/github.com/ethereum/go-ethereum/build/bin/puppeth","title":"Prepare tomo client software"},{"location":"developers/tutoprivatenet/#setup-chain-data-folders-datadir-and-corresponding-keystore-folders-for-3-masternodes","text":"mkdir $HOME/tomochain mkdir $HOME/tomochain/nodes mkdir $HOME/tomochain/nodes/1 $HOME/tomochain/nodes/2 $HOME/tomochain/nodes/3 mkdir $HOME/tomochain/keystore/1 $HOME/tomochain/keystore/2 $HOME/tomochain/keystore/3","title":"Setup chain data folders datadir and corresponding keystore folders for 3 masternodes"},{"location":"developers/tutoprivatenet/#initialize-import-accounts-for-the-masternodess-keystore","text":"Initialize new accounts: If you have existing accounts and prefer importing them, please ignore this step and go to Import Accounts tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/1 tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/2 tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/3 Import accounts tomo account import [PRIVATE_KEY_FILE_OF_YOUR_ACCOUNT] \\ --keystore $HOME/tomochain/keystore/1 \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] Repeat this step to import two more private keys for our three masternodes.","title":"Initialize / Import accounts for the masternodes's keystore"},{"location":"developers/tutoprivatenet/#customize-genesis-block-by-using-the-puppeth-tool","text":"Run puppeth command and answer questions about your private chain as follows: puppeth Set chain name > localtomo Enter 2 to configure new genesis Enter 3 to select POSV consensus Set blocktime (default 2 seconds) Set reward of each epoch Set addresses to be initial masternodes Set number of blocks of each epoch (default 900). If you would like to customize epoch number, please update code here common/constants.go:14 EpocBlockRandomize = 900 Set gap (How many blocks before checkpoint need prepare new masternodes set ?) suggestedGap = 5 Enter foundation address which you hold private key Enter accounts which you control private keys to unlock MultiSig wallet Enter swap wallet address for fund 55 million TOMO Export genesis file - Select 2. Manage existing genesis - Select 2. Export genesis configuration - Enter genesis filename Control + C to exit","title":"Customize genesis block by using the puppeth tool"},{"location":"developers/tutoprivatenet/#initialize-your-private-chain-with-above-genesis-block","text":"tomo --datadir $HOME/tomochain/nodes/1 init [PATH/TO/GENESIS_FILE] tomo --datadir $HOME/tomochain/nodes/2 init [PATH/TO/GENESIS_FILE] tomo --datadir $HOME/tomochain/nodes/3 init [PATH/TO/GENESIS_FILE]","title":"Initialize your private chain with above genesis block"},{"location":"developers/tutoprivatenet/#setup-bootnode","text":"Initialize bootnode key bootnode -genkey bootnode.key Start bootnode and copy bootnode information bootnode -nodekey ./bootnode.key enode://7e59324b1e54f8c282719465eb96786fb3a04a0265deee2cdb0f62e912337ca6f118d0c91f7ebfae6f5c17825205279249cf7ff65ae54d0a1a8908ef16f80f63@[::]:30301","title":"Setup bootnode"},{"location":"developers/tutoprivatenet/#start-masternodes","text":"Start masternode 1 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/1 --networkid [YOUR_NETWORK_ID] --port 10303 \\ --keystore $HOME/tomochain/keystore/1 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 1545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 1546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_1]\" \\ --identity \"NODE1\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Start masternode 2 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/2 --networkid [YOUR_NETWORK_ID] --port 20303 \\ --keystore $HOME/tomochain/keystore/2 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 2545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 2546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_2]\" \\ --identity \"NODE2\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Start masternode 3 tomo --syncmode \"full\" \\ --datadir $HOME/tomochain/nodes/3 --networkid [YOUR_NETWORK_ID] --port 30303 \\ --keystore $HOME/tomochain/keystore/3 --password [YOUR_PASSWORD_FILE_TO_UNLOCK_YOUR_ACCOUNT] \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 3545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0.0.0.0 --wsport 3546 --wsorigins \"*\" --unlock \"[ADDRESS_MASTERNODE_3]\" \\ --identity \"NODE3\" \\ --mine --gasprice 2500 \\ --bootnodes [YOUR_BOOTNODE_INFORMATION] \\ console Some explanations on the flags --verbosity: log level from 1 to 5. Here we're using 4 for debug messages --datadir: path to your data directory created above. --keystore: path to your account's keystore created above. --identity: your full-node's name. --password: your account's password. --networkid: our testnet network ID. --port: your full-node's listening port (default to 30303) --rpc, --rpccorsdomain, --rpcaddr, --rpcport, --rpcvhosts: your full-node will accept RPC requests at 8545 TCP. --ws, --wsaddr, --wsport, --wsorigins: your full-node will accept Websocket requests at 8546 TCP. --mine: your full-node wants to register to be a candidate for masternode selection. --gasprice: Minimal gas price to accept for mining a transaction. --targetgaslimit: Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --bootnode: bootnode information to help to discover other nodes in the network --gcmode: blockchain garbage collection mode (\"full\", \"archive\") --synmode: blockchain sync mode (\"fast\", \"full\", or \"light\". More detail: https://github.com/tomochain/tomochain/blob/master/eth/downloader/modes.go#L24) To see all flags usage tomo --help","title":"Start masternodes"},{"location":"developers/tutoprivatenet/#check-your-private-chain","text":"Connect ipc tomo attach $HOME/tomochain/nodes/1/tomo.ipc admin.nodeInfo eth.getBlock(0) eth.getBlock(1) Connect rpc tomo attach tomo attach http://localhost:1545 eth.getBlock(0) eth.getBlock(1) Verify Checkpoints Wait about 30 minutes to see if your chain passes the first checkpoint tomo attach http://0.0.0.0:1545 eth.getBlock(900)","title":"Check your private chain"},{"location":"developers/tutoprivatenet/#troubleshooting","text":"Reset your chain rm -rf $HOME/tomochain/nodes/1/tomo $HOME/tomochain/nodes/2/tomo $HOME/tomochain/nodes/3/tomo tomo --datadir $HOME/tomochain/nodes/1 init genesis.json tomo --datadir $HOME/tomochain/nodes/2 init genesis.json tomo --datadir $HOME/tomochain/nodes/3 init genesis.json Note: we use the Gnosis Multisig Wallet: https://github.com/gnosis/MultiSigWallet","title":"Troubleshooting"},{"location":"developers/txtypes/","text":"This shows the different transaction types processed in the TomoChain blockchain. Send TOMO to an external account Send TOMO to a smart contract Send tokens from one contract to another contract Send a signing transaction in TomoChain Content to be updated \u00b6","title":"Txtypes"},{"location":"developers/txtypes/#content-to-be-updated","text":"","title":"Content to be updated"},{"location":"general/about/","text":"Headquarters \u00b6 TomoChain Pte. Ltd. 10 Anson Road #22-15 International Plaza Singapore 079903","title":"About"},{"location":"general/about/#headquarters","text":"TomoChain Pte. Ltd. 10 Anson Road #22-15 International Plaza Singapore 079903","title":"Headquarters"},{"location":"general/changelog/","text":"Changelog \u00b6 This page contains all the major new features about the Tomochain software. You can follow the progress of the project here chronologically. 08-10-2018 \u00b6 TomoWallet (mobile) \u00b6 TomoWallet is now available on the App Store and Play Store . 01-10-2018 \u00b6 TomoScan v0.2 \u00b6 Added anchors for tabs. Code of the crawler revised. New users will receive a welcome email. You can now add an address to the list of followed addresses. 28-09-2018 \u00b6 tmn v0.2 \u00b6 Add a update command to use the latest TomoChain client. Logic has been refactored for better extensibility. Your logs will now never exceed 3GB thanks to the log rotation. Minor aesthetics changes. 26-09-2018 \u00b6 TomoWallet v0.1 \u00b6 Create and import a wallet. Transfer and receive TOMO for Testnet use only. Earn TOMO for Testnet use only with an integrated faucet. 20-09-2018 \u00b6 TomoScan v0.1 \u00b6 Crawl data from a full node. Serve a modern webapp frontend. 10-09-2018 \u00b6 tmn v0.1 \u00b6 Start a full node. Stop a full node. Inspect the full node. Get the full node status. Remove a full node. TomoChain v0.2 \u00b6 Enhance masternode set selection on each epoch Introduce single TOML file to run full-node to get rid of long-typing multiple flags Stabilize block importing between nodes 06-09-2018 \u00b6 TomoMaster v0.2 \u00b6 Desktop version released. Optimize withdrawals page. Voters can now search for a candidate. Several bug fixes. 21-08-2018 \u00b6 TomoMaster v0.1 \u00b6 Vote for masternodes with TOMO. Unvote and withdraw. Calculate rewards for voters and masternodes. List masternodes and candidates Monitor masternodes' performance TomoChain v0.1 \u00b6 PoSV consensus (Proof of Stake Voting) Block producers (masternode) Reward engine and staking mechanism Integrate with TomoScan and TomoMaster Built-in smart contracts for voting and reward","title":"Changelog"},{"location":"general/changelog/#changelog","text":"This page contains all the major new features about the Tomochain software. You can follow the progress of the project here chronologically.","title":"Changelog"},{"location":"general/changelog/#08-10-2018","text":"","title":"08-10-2018"},{"location":"general/changelog/#tomowallet-mobile","text":"TomoWallet is now available on the App Store and Play Store .","title":"TomoWallet (mobile)"},{"location":"general/changelog/#01-10-2018","text":"","title":"01-10-2018"},{"location":"general/changelog/#tomoscan-v02","text":"Added anchors for tabs. Code of the crawler revised. New users will receive a welcome email. You can now add an address to the list of followed addresses.","title":"TomoScan v0.2"},{"location":"general/changelog/#28-09-2018","text":"","title":"28-09-2018"},{"location":"general/changelog/#tmn-v02","text":"Add a update command to use the latest TomoChain client. Logic has been refactored for better extensibility. Your logs will now never exceed 3GB thanks to the log rotation. Minor aesthetics changes.","title":"tmn v0.2"},{"location":"general/changelog/#26-09-2018","text":"","title":"26-09-2018"},{"location":"general/changelog/#tomowallet-v01","text":"Create and import a wallet. Transfer and receive TOMO for Testnet use only. Earn TOMO for Testnet use only with an integrated faucet.","title":"TomoWallet v0.1"},{"location":"general/changelog/#20-09-2018","text":"","title":"20-09-2018"},{"location":"general/changelog/#tomoscan-v01","text":"Crawl data from a full node. Serve a modern webapp frontend.","title":"TomoScan v0.1"},{"location":"general/changelog/#10-09-2018","text":"","title":"10-09-2018"},{"location":"general/changelog/#tmn-v01","text":"Start a full node. Stop a full node. Inspect the full node. Get the full node status. Remove a full node.","title":"tmn v0.1"},{"location":"general/changelog/#tomochain-v02","text":"Enhance masternode set selection on each epoch Introduce single TOML file to run full-node to get rid of long-typing multiple flags Stabilize block importing between nodes","title":"TomoChain v0.2"},{"location":"general/changelog/#06-09-2018","text":"","title":"06-09-2018"},{"location":"general/changelog/#tomomaster-v02","text":"Desktop version released. Optimize withdrawals page. Voters can now search for a candidate. Several bug fixes.","title":"TomoMaster v0.2"},{"location":"general/changelog/#21-08-2018","text":"","title":"21-08-2018"},{"location":"general/changelog/#tomomaster-v01","text":"Vote for masternodes with TOMO. Unvote and withdraw. Calculate rewards for voters and masternodes. List masternodes and candidates Monitor masternodes' performance","title":"TomoMaster v0.1"},{"location":"general/changelog/#tomochain-v01","text":"PoSV consensus (Proof of Stake Voting) Block producers (masternode) Reward engine and staking mechanism Integrate with TomoScan and TomoMaster Built-in smart contracts for voting and reward","title":"TomoChain v0.1"},{"location":"general/faq/","text":"Frequently Asked Questions \u00b6 General \u00b6 TomoChain \u00b6 What is TomoChain? \u00b6 TomoChain is an innovative solution to the scalability problem of the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support low transaction fees and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and true randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture. It will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. What problem is TomoChain aiming to solve? \u00b6 The problems that TomoChain aims to solve can be summarized as follows: The network congestion on Ethereum (low transaction time) High transaction fees on Ethereum Most other blockchains are highly centralized and/or do not have interoperability with Ethereum system Blockchain has become one of the most disruptive technologies that enables many decentralized applications, including but not limited to cryptocurrencies, smart-contracts, voting and supply-chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing: Bitcoin and Ethereum can only process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5'000-6'000 transactions per second. TomoChain is continuously working and researching several scaling solutions. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. TomoChain supports low fee and 2-second transaction confirmation times. TomoChain can currently process 2'000-5'000 transactions per second (TPS) and once sharding is enabled, TomoChain is expected to reach 20'000-30'000 TPS. How does TomoChain work? What is the architecture and consensus used? \u00b6 TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support low fees (approx. 1/100 of that of Ethereum's) and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as Double Validation, staking via smart-contracts and true randomization processes. Can you tell more about Proof of Stake Voting (PoSV)? What is it? \u00b6 At the heart of TomoChain, the Proof-of-Stake Voting (PoSV) consensus enables TomoChain as an EVM-compatible and scalable public blockchain, on which every Ethereum smart contract can be effectively run with almost instant transaction confirmation. PoSV features its Masternode architecture in which token holders deposit 50k TOMO to become a masternode candidate and receive votes from other token holders. The most voted masternode candidates are selected as masternodes for block creation within a period, called epoch. Each masternode takes its block creation in a round-robin manner every 2-second and follows the double validation technique for security reinforcement. A block is finalised if it is signed off by 3/4 masternodes. At the end of each epoch, the masternodes that have signed finalised blocks are rewarded. Stakers who voted for those masternodes will also be rewarded. What is Double Validation? \u00b6 Double Validation provides an additional trustless validation layer for security enhancement through a provable uniform distribution decentralized randomization. Specifically, when a block is created by a masternode, it must be verified by another masternode that is randomly selected among the set of masternodes before being added to the blockchain. Double validation strengthens Tomochain\u2019s security, reduces fork and nothing-at-stake attacks, and makes TomoChain unique among other Proof-of-Stake-based blockchains. What is an 'epoch'? \u00b6 An epoch is a 900-block period of 2-second block time starting from block #1 (900 blocks x 2s/block = around 1800s or ~30 minutes). Which scaling solutions will TomoChain implement? Will you have sharding? \u00b6 TomoChain solutions are based on on-chain scaling built into an architecture of 150 voted masternodes with our Proof-of-stake Voting (POSV) consensus protocol. We achieve 2-second block-time and almost instant transaction confirmation. To scale further our infrastructure, we have presented our Sharding proposal for uniquely integrating Sharding into our current architecture and consensus. The implementation of sharding is on-going and we will enable it in Q2 2019, after TomoChain decentralized exchange (TomoX) launch. Besides sharding, we are actively researching scalability solutions like EVM parallelization and Plasma. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be evaluated before being integrated into TomoChain's masternode architecture. What is the current TPS? What is your targeted transaction speed and when do you think you can achieve that speed? \u00b6 TomoChain supports low transaction fees (approx. 1/100 of that of Ethereum's) and 2-second transaction confirmation times. The mainnet with POSV Masternodes delivers 2'000 transactions per second (TPS). Once sharding is implemented by Q2 2019, we expect 20'000-30'000 TPS. TomoChain team is continuously researching other scaling techniques to keep improving. What makes TomoChain different? \u00b6 The unique point of TomoChain comes from technology, the products and the ecosystem. Novel technology: includes Proof of Stake Voting consensus Build in governance D-app Double Validation and Randomization Sharding based on a stable masternode artichitecture This enables TomoChain to achieve: Cheap transactions: approx. 1/100 of that of Ethereum 2000 TPS to handle a robust d-app and token ecosystem; TPS will be dramatically higher once our sharding solution is enabled (20k-30k TPS) 2 second block time for fast transactions EVM-compatibility allows for interoperability with Ethereum ecosystem. Our unique products TomoScan: Shows all blocks, transactions, finality, smart contracts, D-Apps and token information TomoMaster: Allows users to apply for a Masternode Candidate position; to vote for Masternodes and shows Masternode performance statistics TomoWallet: Securely store, send, receive TOMO and other tokens issued on TomoChain; Allows users to vote and track rewards TomoX: A secure and efficient relayer-masternode decentralized exchange protocol Our own ecosystem TomoChain also is working vigorously on building its ecosystem and has sealed many partnerships from all fields such as agriculture, robotics, gaming, IT solution providers, advertising, pharmaceutical tracking, education and research, payment, communication, name service, food traceability, tourism etc such as TechInAsia, Kambria, Axie Infinity, Vnext, Farmatrust, TE-Food, Triip Protocol, Portal Network... How does TomoChain compare with other available blockchain projects? \u00b6 Some of our competitors are EOS.IO, Casper FFG, Cardano, Tendermint, Lisk. We are doing a series of Medium posts on this matter. Some posts have been published, such as \"Blockchain comparison overview: EOS.IO, Casper FFG, Cardano, Tendermint and Tomochain\" , a detailed comparison with EOS Tomochain vs. EOS.IO: The battle of PoSV vs. DPoS or just some coincidence of design philosophy? , and a Comparison of PoS-voting based reward engines among TomoChain, EOS and Lisk . The world is a pretty big place, and startups often kill themselves because they cannot make a desirable product, not because of the competition. At the moment, besides the core TomoChain platform, we want to focus on a few quality Dapp use cases that can make a difference. Quality before quantity. Our core blockchain solution like the sharding proposal is of very high quality, and potentially better than multiple high profile attempts at scaling currently. The solution is also very unique to TomoChain's Marsternode design, which will remain our competitive product advantage for a long time. There are also several other product solutions in design stage which also highly integrate with Tomochain's overall design. These product innovations is one of the core competencies we have that make Tomochain very unique compared to other big projects. We are doing our best to solve the scalability problem, maximize the TPS and stay strong in our target market. Which blockchain(s) are TomoChain's main competitors? \u00b6 On the one hand, all base layer blockchains such as Ethereum, EOS, NEM, NEO, TomoChain etc are competitors because app developers/token issuers will generally choose only one blockchain to work on. On the other hand, it is too early to focus on competition as it is more important to expand the whole blockchain ecosystem rather than to compete. TomoChain has a unique position in which it adds value to the Ethereum ecosystem by addressing scalability and governance issues while keeping the same smart-contracts and general architecture. TomoChain is EVM-compatible. What does that mean? \u00b6 EVM means Ethereum Virtual Machine. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. This means that any smart-contract written in Ethereum protocol can be easily ported to TomoChain. Any d-App written in Ethereum can be seamlessly ported to TomoChain. Is TomoChain a side-chain of Ethereum? \u00b6 TomoChain has its own blockchain since TomoChain Mainnet was launched in December 14th, 2018. Is TomoChain compatible with Ethereum? \u00b6 Yes, any smart-contract written in Ethereum protocol can be easily ported to TomoChain. This is one strength appealing to some dApp developers and some of our partners. Can developers make hybrid dApps using both Ethereum and TomoChain in one single dApp? \u00b6 Yes, they can make an app, and deploy it to both Ethereum, and TomoChain. It can be done relatively easy since TomoChain supports EVM, and share a common architecture with Ethereum. When is TomoChain mainnet launch? \u00b6 TomoChain Mainnet was launched on December 14th, 2018. What is the difference between TOMO and TomoChain? \u00b6 TOMO is the native currency of the TomoChain ecosystem. How do you solve 'security problems' when using TomoChain? \u00b6 In terms of security of consensus protocol, TomoChain proposes Double Validation and Randomization to protect the system. The details of these techniques can be referred in our Technical paper . TomoChain solves some consensus-related security aspects: Nothing-at-stake problem: This problem is commonly discussed in PoS-based blockchain consensus and just like 51% attacks in PoW. TomoChain solves it by using Double Validation and Randomization. The details are shown in our technical paper. Long-range attacks: Attackers can try to recreate all blocks from a very far position to the current block. Attackers can do that because PoS-based consensus does not require extra-ordinary hashing power to re-write the whole blockchain. TomoChain addresses by providing finality. Once a block is signed by at least 3/4 masternodes, it is consider irreversible, meaning that any attempt to re-write the blockchain history will be rejected. Censorship-resistance: Please refer to this medium article for more detailed analysis DDoS and spamming attacks: TomoChain's transaction fee is not zero (even it is very low), attackers still require a significant amount of TOMO in order to flood the network for only a short time. How does TomoChain defend against spamming attacks? \u00b6 TomoChain has different measures to defend against spamming attacks. For instance, increasing transaction fees for smart contract creation is one of them. The min is 10 TOMO. Otherwise an error of smart contract creation cost is under allowance may show up. Company \u00b6 Where is TomoChain registered? \u00b6 You can check our company TomoChain Pte. Ltd. information on the Singaporean registry . You can also check the ACRA copy if you need more details. Where are TomoChain offices? \u00b6 TomoChain current offices are located in Singapore, Vietnam and the recently inaugurated in Japan: SINGAPORE 10 Anson Road #22-15 International Plaza, Singapore 079903 JAPAN Resona Kudan Building 5F, 1-5-6 Kudan-minami, Chiyoda-ku, Tokyo, 102-0074, Japan VIETNAM 219 Trung Kinh, Yen Hoa, Cau Giay, Hanoi, Vietnam How many people are working on TomoChain team? \u00b6 We are nearly 40 people working fulltime. Check us out on our main website ! Where can I take a look at TomoChain code? Is there a GitHub repository? \u00b6 All the code regarding TomoChain is free to consult on our GitHub . This includes the code for the TomoChain blockchain client, governance DApp, block explorer, tools, docker images, documentation, etc. However, other blockchain related projects like ReplyBlock or drafts, work-in-progress and not yet disclosed projects are usually kept in private repositories. We like to publish code publicly when it reaches a certain level of development and/or when we think auditing and contributions are beneficial to the codebase. Keeping early projects private is probably more responsible for now due to our scale. It might change in the future. We are also working with some third parties with which we signed a non-disclosure-agreements for code development. Where can I contact you to get support? \u00b6 If you need support, please contact us on one of these platforms: Technical talk and support running our softwares: Gitter (https://gitter.im/tomochain) Bugs or technical contributions: GitHub (https://github.com/tomochain) General quotes regarding our blockchain: Telegram (https://t.me/tomochain) Which are TomoChain's official channels for communication and information? \u00b6 You can keep in touch with our latest news here: Twitter: https://twitter.com/TomoChainANN Telegram Announcements: https://t.me/TomoChainChannel Facebook: https://www.facebook.com/tomochainofficial Website: https://tomochain.com Medium: https://medium.com/tomochain Reddit: https://www.reddit.com/r/Tomochain/ LinkedIn: https://www.linkedin.com/company/tomochain/ Ecosystem \u00b6 What incentives have partners and dApp developers to build on TomoChain? \u00b6 TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. This means that any smart-contract written in Ethereum protocol can be easily ported to TomoChain. Any d-App written in Ethereum can be seamlessly ported to TomoChain, instantly enjoying all TomoChain advantages: almost zero-transaction fee; 2-second confirmation time; 2'000 TPS and soon 20K-30K TPS once sharding is enabled. D-app developers also have dedicated technical support from TomoChain developers. Besides the technical aspects, our partners will also benefit from the TomoChain community support and fundraising opportunities, thanks to TomoChain very good relationships with well-known investors. Why should developers build dApps on TomoChain? \u00b6 See: https://www.youtube.com/watch?v=8J4h2zsd_UE Where can I see TomoChain partnerships? \u00b6 TomoChain is working vigorously on building its ecosystem and has sealed 23 partnerships from all fields such as agriculture, robotics, gaming, IT solution providers, advertising, pharmaceutical tracking, education and research, payment, communication, name service, food traceability, tourism (as of Jan 2019). All partnership announcements can be found Medium and our official Twitter account for partnership announcements. You can also find a list of partners willing to run D-apps on TomoChain here . This list will be updated in the future. Where can I check the actual products, ecosystem? \u00b6 Please, read the Mainnet announcement on our Medium post . Please, read the Testnet 2.0 announcement on our Medium post . If you want to access it directly, you can find the links to our different products deployed in Testnet on our Networks page . The list of TomoChain Products is as follows: TomoScan, TomoStats, TomoMaster, TomoWallet; TomoX. TOMO - Economics \u00b6 What is TOMO? Can you describe the functions and purposes of TOMO? \u00b6 TOMO is the native cryptocurrency of TomoChain and will be the reserve cryptocurrency for all third-party apps running on TomoChain. Being the protocol token for the TomoChain infrastructure, TOMO will be needed by all parties utilising TomoChain to build apps or issue and integrate cryptographic tokens into their apps. The supply of TOMO is fixed, long-term and non-inflationary. In addition to the above, TOMO is an integral part of the TomoChain network for a number of reasons. TOMO will be used to fund the development of TomoChain and its ecosystem (TomoScan, TomoMater, TomoWallet, etc.). TOMO will be used as a reward to incentivise the building of the TomoChain engine/ecosystem. TOMO will be used as a long-term, decentralized governance instrument of the TomoChain network. You can check our technical whitepaper for more details. Can I mine TOMO? \u00b6 TOMO is not mineable but mintable by masternodes. Masternodes are responsible for creating, verifying and finalizing the blocks created within a period, called epoch. Masternodes and Stakers will receive block rewards. What is TOMO circulating supply and total supply? \u00b6 The initial circulating supply at genesis block is 55'000'000 but the current circulating supply is increasing every epoch. After 8 years, TOMO total supply is fixed at 100'000'000 TOMO. How is TOMO distributed? \u00b6 The token allocation is splitted as follows: 55 millions TOMO was already allocated after the token sale period; 12 millions TOMO are reserved for the team vested over the next 4 years; 16 millions TOMO are reserved for strategic partners and an ecosystem building fund; 17 millions TOMO are reserved as block rewards for the next 8 years How are block rewards distributed? \u00b6 17 millions TOMO are reserved as block rewards for the next 8 years. 1st and 2nd year: 4 million TOMO annually 3rd, 4th and 5th year: 2 million TOMO annually 6th, 7th and 8th year: 1 million TOMO annually Will TomoChain have inflation? \u00b6 The total supply is fixed at 100 million TOMO in the first 8 years (non-inflationary). 17 million TOMO which are reserved as block rewards will have been all distributed after 8 years. At that time, we are expecting that block rewards will come from the exchange fees. But the Masternode Council can decide to increase the total supply by 0.5-1 million TOMO per year (which will be used as block rewards) (~small inflation, 0.5%-1% annually). How often are block rewards paid out? \u00b6 Block rewards will be earnt every epoch, which lasts for 900 of two-second-block time (~30 minutes). Stakers will be also rewarded. If TomoChain has zero fees, how can Masternodes get rewards? \u00b6 The block rewards will be emitted from a reserved fund with 17 million TOMO for the first 8 years. The block rewards are as follows: 1st and 2nd year: 4 million TOMO annually 3rd, 4th and 5th year: 2 million TOMO annually 6th, 7th and 8th year: 1 million TOMO annually We plan to have a built-in DEX, the revenues from the DEX will go to the Masternodes as well. After 8 years, the block rewards will come from the exchange fees. Also, the Masternode Council can decide to increase the total supply by 0.5-1 million TOMO per year (which will be used as block rewards). What is the price in presale and ICO? \u00b6 Presale Price: $0.2 ICO Price: $0.25 ( 0.0003125 ETH ) When will TOMO be listed on new exchanges? \u00b6 We do not discuss about exchange related questions due to the regulation. We will announce every exchange news on our official channels on due time. Is TOMO an ERC-20 token? \u00b6 Since Mainnet, TOMO has become the native coin of the TomoChain blockchain. What is a TRC-20 token? \u00b6 A TRC-20 token is a token which can be issued on the TomoChain blockchain. TCR-20 is similar to the ERC-20 standard in the Ethereum blockchain. Where to store TOMO? How can I send TOMO to my wallet? \u00b6 You can store TOMO in TomoWallet, TrustWallet, MetaMask, MyEtherWallet, Ledger and Trezor. We recommend to store TOMO in TomoWallet. Please, read more details here: https://docs.tomochain.com/get-started/wallet/ Can I send TOMO directly from my MyEtherWallet? \u00b6 Yes. MyEtherWallet now has TomoChain in the supported network list. TOMO holders then can send TOMO using MyEtherWallet. How to connect Metamask / MyEtherWallet with TomoChain mainnet? \u00b6 The followings are information used for configuring Metamask to connect to TomoChain Mainnet. RPC endpoint: https://rpc.tomochain.com Chain ID: 88 Symbol: TOMO Network Name: TomoChain Mainnet TomoChain is now supported by MyEtherWallet. All you need to do is to choose Network TOMO in the supported network list in MyEtherWallet. You can find the info about our Mainnet or Testnet on our Networks page. Also, you can find out more detailed information about how to use different wallet types to connect to TomoChain Mainnet on Connect your wallet Where can I buy TOMO? (exchanges)\" \u00b6 You can trade TOMO on various exchanges. Take a look in the \"Exchanges\" section on this page of our main website. Masternodes \u00b6 Does TomoChain have Masternodes? How do they work? \u00b6 Yes, TomoChain has a maximum of 150 Masternodes with Proof of Stake Voting (POSV) consensus for low transaction fee, and instant transaction confirmation. Masternodes create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidates: Any account can deposit 50,000 TOMO using TomoMaster to become a masternode candidate. A candidate can resign, but the tokens will be locked for the next 30 days (1'296'000 blocks) after the resignation. Becoming a Masternode: A candidate becomes a masternode when he/she belongs to the top 150 most voted candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Rewards: The rewards a masternode receives in each epoch is proportional to the number of signatures it signs. Masternodes will also receive fees from the TomoChain DEX, which is planned for development in Q1 2019. TomoChain masternodes started signing blocks and receiving block rewards with the Mainnet release in December 14th, 2018. What is a masternode in the TomoChain ecosystem? \u00b6 A TomoChain masternode is a server which uses its computing power to contribute to the network. Its job is to create and sign blocks. For this contribution to the network, masternodes receive rewards in the form of TOMO. Masternodes are elected using the PoSV consensus via our governance dApp TomoMaster What are the incentives to run a masternode? \u00b6 Masternodes contribute to the network and for this work they will receive a significant amount of block rewards, which will likely exceed the cost for running the infrastructure. However, masternode owners need to invest in TomoChain by depositing at least 50'000 TOMO, and stake them in the long term. After the initial deposit, if the account does not become a masternode (has less votes than the top 150 most voted candidates), he will not receive rewards. Therefore, candidates are incentivised to do as much as they can to signal their capability to support TomoChain to get into top 150 most voted candidates. How did you decide on 150 masternodes? Why did you decide to increase this from the initial 99? \u00b6 The reason came from both decentralization consideration, and also scalability consideration. In terms of decentralization, 150 is better than 99. The more important consideration is the scalability. We also increased the number of masternodes to better suit the sharding solution later. Also 150 is Dunbar\u2019s Number . Where will the Masternode rewards come from? Will they be from the DEX? \u00b6 The block rewards will come from a 17 million TOMO reserve for the next 8 years - this was decided since the genesis block. Our Economics paper lays out the number in detail. And then later on, because we plan to have a built-in DEX, the revenues from the DEX will go to the Masternodes as well. When are Masternode rewards paid out? \u00b6 Masternode operators and stakers will receive rewards every epoch. An epoch is a 900-block period of 2-second block time (~30 minutes). How can I check my rewards? \u00b6 You can check your masternode/staking rewards using TomoWallet. Alternatively you can use TomoMaster or TomoScan. How much rewards will Masternodes receive? \u00b6 Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Example: With only 25 Masternodes and equal performances, every masternode would be rewarded with 10 TOMO. With 125 Masternodes, each one would receive 2 TOMO per epoch. Please, refer to our Economics paper for more details about the masternodes reward. How much reward from Masternodes will go to the Masternode infrastructure (node owner) and how much is for voters? \u00b6 There is a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. The reward achieved by each Masternode will be divided into three portions: Infrastructure Reward: The first portion of 40% called Infrastructure Reward goes to the Masternode operator. Staking Reward: The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The Masternode also gets proportional rewards for his 50K TOMO initial deposit. Foundation Reward: The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by the TomoChain company initially. What is the expected ROI for Masternodes and Stakers? \u00b6 The rewards for every masternode will be dynamic and depending on multiple factors like: number of masternodes in the network, the efficiency signing blocks, the total number of votes on each masternode. The most efficient masternodes signing blocks will receive higher rewards. Please, refer to our Economics paper for more details about the masternodes reward. We discuss 3 possible scenarios with 50, 100 and 150 Masternodes; and different number of total votes. One example is outlined below. Scenario: 150 Masternodes, 12.5 million tokens voting (a total of 20 million token locked). Reward achieved per epoch (900 blocks): By a Masternode = 0.6667 Tomo By a Voter with 1K Tomo staked = 0.00625 Tomo Approximate reward achieved per week: By a Masternode = 224 Tomo By a Voter with 1K Tomo staked = 2.1 Tomo Approximate reward achieved per year: By a Masternode = 11,680 Tomo By a Voter with 1K Tomo staked = 109.5 Tomo (10.95% annually) By a Voter with 50K Tomo staked = 5,475 Tomo Total reward for a Masternode with a 50K Tomo deposit: 11,680 + 5,475 = 17,155 Tomo (34.31% annually) Masternode Candidate \u00b6 What is a masternode candidate? What is the difference between masternode candidate and masternode? \u00b6 A Masternode Candidate is any node who deposited 50K TOMO and is listed on TomoMaster . One Candidate only becomes a Masternode when he is in the top-150 most-voted masternode candidates in an epoch. Only these elected masternodes will be able to sign blocks and receive block rewards. How can I become a Masternode? \u00b6 The first step to become a masternode, is becoming a masternode candidate. To become a Masternode Candidate you need: to run TomoChain software in a machine with certain minimal hardware requirements to deposit 50\u2019000 TOMO in a smart-contract via TomoMaster The list of Masternode Candidates will be available on the governance DApp, TomoMaster . The next step is to be elected as one of the top 150 most voted candidates. Do I need to use my own computer to run a node? \u00b6 We recommend using an IaaS (\"cloud\") provider of your choice (like Amazon AWS, Digital Ocean, Google Cloud GCE, Vultr, etc). The machine must be directly facing internet (public IP, no NAT) and with 100% uptime. If you have other production grade environment than cloud provider at your disposal, please tell us more about on our Gitter . Which are the hardware requirements to run a node? \u00b6 Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers. Directly facing internet (public IP, no NAT) 16 cores CPU 32GB of RAM SSD storage We recommend using popular cloud providers as their reliability and uptime are close to 100%. Those servers would be a good starting point: DigitalOcean: CPU optimized droplet 32GB/16CPU Amazon EC2: C5 instance Google Cloud Engine: n1-highcpu-16 Setting up a masternode candidate on a weaker machine might result in poor performances, significantly impacting owner's rewards and the chain performance. Note: If you are running a node in Testnet, 2CPU/8GB of RAM is sufficient. How do Masternode Candidates become Masternodes? \u00b6 Once you are a Masternode Candidate, you need the support of TomoChain community in the form of votes. The top 150 most voted candidates every period called epoch (900 blocks of 2-second block-time) will be promoted to Masternode. This list will change dynamically every epoch. Only the 150 masternodes elected will be able to sign blocks and will receive rewards in the form of TOMO. Is there any guide on 'How to run a masternode from A to Z'? \u00b6 See this Medium post . Where can I find the latest masternode guide or the instructions for setting up a masternode? \u00b6 Find more details about tmn here: https://docs.tomochain.com/masternode/tmn/ What is the command to start a fullnode with 'tmn'? \u00b6 tmn start --name node_name --net mainnet --pkey your_private_key tmn is installed but just not in your path.\" \u00b6 See: https://docs.tomochain.com/masternode/tmn/#tmn-command-not-found I tried stopping the node using 'tmn stop', but after that I ran 'tmn status' it still says running.\" \u00b6 You can run tmn --debug stop and send the log to us. We will help you to investigate the issue. Do I need two wallets to run a Masternode? \u00b6 It is recommended for security reasons. You can create your wallet from wherever you want, the only rule being that you need two of them. One for your masternode, and one to make the 50K deposit (this account will receive the rewards). What is the 'coinbase address'? \u00b6 'Coinbase address' is the public address used to run your node and register it to the system. We recommend using two addresses when running your nodes. The public address or 'coinbase address' will only receive transaction fees. The private address is from where you make the initial 50K TOMO deposit and where the block rewards will be collected. How can I create a public 'coinbase address' wallet? Is it only with TomoWallet for iOS and Android? Are there other options? \u00b6 You need to create a wallet for the masternode public address. This wallet does not need to contain any TOMO, think of it as a shell address. You will then stake tomo into the masternode address via your main TOMO wallet. You can use the iOS and Android apps. Also you can create wallets with Metamask, MyEtherWallet. You can also use https://wallet.testnet.tomochain.com to create an empty wallet, then use it as coinbase address. I noticed that we need another wallet for masternode with a different mnemonic. Assume we use a hardware wallet, we would need another hardware wallet with different mnemonic? \u00b6 It is recommended to use a separate empty account for your masternode as it only receive transactions fees - what we call public or 'coinbase address' on the documentation. The block rewards are sent to the account connected to TomoMaster who make the initial deposit - the 'private' address. Can I use the same address pair (tmn public address + initial deposit address) for all my nodes? Or I have to transfer tokens to another wallet and start the second node? \u00b6 No. Must use different public 'coinbase' addresses. But you can use the same initial deposit ('private') address, then all rewards will be transferred to only one address. I have finished all steps of setting up node. Why I don't see my node on TomoMaster? \u00b6 You must apply to become a masternode candidate. Do I need to deposit the 50K TOMO before or after running 'tmn' in VPS? \u00b6 After. Your node must be fully synched before applying. How do I check the blockchain sync status from the node? \u00b6 You can watch the logs, but it is easier from the TomoStats website or its eth.blockNumber API call. If the masternode owner deposits 60K TOMO instead of 50K on its own node, can it later on unstake the excess 10K? \u00b6 Yes, it can. How can I change my node's name? \u00b6 You can do it on TomoMaster. Go to your masternode page on TomoMaster, if you are logged in TomoMaster with the owner account, you can click next to the masternode name to edit infos. My node status is 'Proposed', will it change status with next checkpoint? \u00b6 Yes, if you are in top-150 most voted. Why is a node flagged as 'Slashed'? \u00b6 With Slashing v2.0, a masternode who doesn't create any block within an epoch and therefore delays the network by 10 seconds at each of their turns will be penalized (no rewards) for the next five epochs. Note: a slashed Masternode can still sign transactions if he\u2019s online but receive no rewards for doing so. After being slashed for 5 epochs, the Masternode is analysed for re-entry. If the slashed Masternode have signed any transaction during the last epoch (meaning that he's up and working again) it will come back to its Masternode status and receive rewards normally. Otherwise it will be slashed for a new round of 5 epochs. This can happen as long as the node isn't back up or kicked out of the top 150. Some reasons for being Slashed might be that the masternode does not have the correct TomoChain software, lack of memory or masternode crashes due to the lack of e-maintenance and operation by the masternode owner. How do I update my Masternode to the newest version? \u00b6 Run this command: pip3 install -U tmn && tmn update && tmn start How many nodes I am allowed to run? \u00b6 As many as you can. How can I resign as Masternode? \u00b6 If you no longer want to be a masternode, you can resign on TomoMaster. Your masternode will stop generating rewards and your funds will be locked for 30 days (1 296 000 blocks). After the lockup period you will be able to withdraw your 50'000 TOMO deposit. Can I close the node entirely, then start a new one with a totally separate coinbase address without being penalized? \u00b6 No. Your old node will be penalized (50K initial deposit 30-day lockup) and your new node has to apply again. Is it possible to move a masternode later, like backup and start it from another IP address? \u00b6 Yes. What if I do not have enough TOMO for a masternode? Can I stake my coins? \u00b6 Yes. Token holders can stake TOMO and receive rewards. To stake TOMO you need to vote for masternode candidates by sending TOMO to each candidates specific voting-address using the official governance d-App: TomoMaster.` The top-150 most voted candidates will become masternodes. Token holders can also un-vote candidates, but the tokens will be locked for the next 96 epochs / 8,640 blocks (approx. 48 hours) after the un-voting. Masternode token deposits, and all tokens used to vote for masternodes will enter the staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for candidates who do not become masternodes will not earn staking rewards. Voter \u00b6 What are the voters incentives? Do voters get rewards too? \u00b6 Token voters should vote for the candidates who demonstrate strong support to the TomoChain ecosystem. If strong candidates are voted to become masternodes, the network will be more powerful and the voters will earn more rewards. More information on the voting and reward mechanism in the Economics paper . Can you stake TOMO? \u00b6 Yes, you can stake TOMO and receive more TOMO coins as reward. How do I Stake? Just holding on my wallet? \u00b6 To stake in TomoChain you must participate in the TomoChain Masternode election, voting for masternode candidate(s) using TomoMaster to deposit your tokens in a voting smart-contract. Login to TomoMaster and click 'Vote' on a node. How does TomoChain Masternode Proof-of-Stake-Voting (PoSV) work? \u00b6 Everyone can can find a list of all masternode candidates on TomoMaster . All token holders can vote TOMO on any candidates via TomoMaster. To vote, token holders must deposit TOMO in a smart-contract associated with the voted candidate. The top-150 most-voted candidates will be promoted to masternode during the next epoch and will be able to sign blocks and collect rewards. All the voters (stakers) who supported the elected masternodes will receive rewards, proportional to the amount of TOMO voted and the efficiency of the masternode. How do I vote (stake)? \u00b6 Any token holder can vote. Login to TomoMaster and then click 'Vote' on a node. Then enter the amount of TOMO you want to vote (minimum is 100 TOMO). You vote by depositing (staking) tokens to a smart-contract associated with a masternode candidate. There are many ways to vote in TomoMaster: Voting from TomoWallet. Voting from Ledger wallet Voting from Trezor wallet Voting via MetaMask (can be connected to your hardware wallets). Voting from TrustWallet Voting with your wallet's Private Key or MNEMONIC. How do I vote/stake from TomoWallet app on my phone? \u00b6 Please, read the following guide . Or watch this video: https://www.youtube.com/watch?v=tXp4WHl_sxY How do I vote from my Ledger Nano S? \u00b6 Plug in your Ledger and open the Ethereum App. Go to TomoMaster. Login in the top-right corner and select Ledger from the drop-down menu. Change the HD path to m/44'/60'/0' You should see your TOMO balance. To see a list of nodes click on the TomoMaster homepage button - top left corner. Next to each node should be a 'Vote' button. When voting you will need to confirm transaction on your Ledger. Can I stake for multiple masternodes via Ledger? \u00b6 Yes, you can. Ledger not working? \u00b6 Probably your Ledger firmware version is incompatible. Sometimes you should upgrade your Ledger to the newest firmware. Occasionally a new version could be problematic and you should try to use the previous firmware version. Can I use Trezor to vote for masternodes? \u00b6 Yes. TomoMaster supports Trezor now. What criteria must be considered when voting? Which masternode candidate should I vote for? \u00b6 The most important criteria to maximize voter\u2019s profit, the main points you should consider when voting, are the following: Top-150 most voted: Your candidate must be one of the top-150 most-voted. If your candidate gets in the 151th most-voted place, it will not be promoted to masternode and you will earn zero rewards. Hardware, Performance: Powerful CPU, RAM, bandwidth, latency, etc so the node can work hard and receive high rewards Number of signed blocks: The more signed blocks per epoch, the higher rewards Time of last signed block: Verify that the masternode is active Total Capacity: Staking rewards are shared between all the masternode votes. Less voted masternodes are more profitable. 5K staked on a 50K-staked masternode will receive ten times more rewards than 5K staked on a 500K total staked masternode. Social Proof, Reputation: Masternodes managed by trusted companies that are for the long term, maintaining the masternode, updating hardware and software to last versions, fixing problems, etc. How many Masternode Candidates can I vote for? \u00b6 You can vote for as many candidates as you wish, splitting your TOMO. Example: If you have 1'000 TOMO you can vote 500 TOMO for candidate A, 450 TOMO for candidate B, and 50 TOMO for candidate C. What is the minimum amount to Stake? \u00b6 The minimum amount to stake is 100 TOMO. Which hardware-wallet can I use to vote? \u00b6 You are able to use hardware wallets (Ledger, Trezor) with MyEtherWallet or Metamask. You can also directly connect to the TomoChain Mainnet with Ledger/Trezor and vote on TomoMaster . Is it possible to re-invest the TOMO earned and use it to continue voting? \u00b6 Yes. Is there a way to stake the earned rewards automatically? \u00b6 This is not supported currently. What happens if the Masternode I voted for stops working? Will I get my TOMO back? \u00b6 Yes. You can unvote that masternode and take your tokens back after 96 epochs (approx. 48 hours) lock-up period. How do I UnVote? \u00b6 If you do not want to support a masternode you voted for, you can unvote it by clicking the \u2018Unvote\u2019 button on the masternode's page and enter the amount of TOMO you wish to unvote. After unvoting, your TOMO are still locked in the smart contract for 96 epochs (approx. 48 hours) before you are able to withdraw. When the lockup period is finished you need to click the \u2018Withdraw\u2019 button and the coins will appear again on your wallet. How to withdraw after unvoting? \u00b6 After unvoting, you need to wait until your TOMO is unlocked from the smart contract (96 epochs, approx. 48 hours). Then you can go to TomoMaster and click the 'Withdraw' button in your account page (the three vertical dots on the top-right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously. Products \u00b6 TomoScan \u00b6 What is TomoScan? \u00b6 TomoScan is our block explorer. It is pretty similar to EtherScan if you are already familiar with it. TomoScan provides a user friendly, details and perfection-oriented user interface for TomoChain block explorer. From a user perspective, TomoScan brings TomoChain\u2019s transparency to users, because all block, transaction, finality, smart contracts, dApp and token information are read from TomoChain and shown to users. Furthermore, TomoScan also offers technical visualisations and does useful statistics about the TomoChain performance, token holders and other functionalities. What is a TxHash? How to check a TxHash? \u00b6 TxHash stands for 'transaction hash', and is also known as a transaction ID. An example of what a TxHash looks like: 0x838d33119b33e4519cb201e49bfc570ddc0fbdc6d9cf7038d8254a4de97f7112 To check a TxHash, follow the steps below: On TomoScan , go to the search bar with the magnifying glass icon. Paste your transaction hash (TxHash) in the search bar and click the icon or press ENTER. Your transaction details will show up. Example: https://scan.testnet.tomochain.com/txs/0x838d33119b33e4519cb201e49bfc570ddc0fbdc6d9cf7038d8254a4de97f7112 TomoStats \u00b6 What is TomoStats? \u00b6 TomoStats shows the various metrics regarding the current mainnet including the current number of masternodes, masternodes performance, current TPS, block-time, confirmation time, finality and other useful metrics. How much is the average time to see my node appear on TomoStats? \u00b6 It should be less than a minute after tmn command is executed and finished. Stats page wasn't working and showed a 70-second block. What happened? \u00b6 The stats page is javascript code running in your browser. If your computer loses internet connection or the page is not active anymore for some reasons, the time will increase forever. In this case just refresh the page. TomoMaster \u00b6 What is TomoMaster? \u00b6 TomoMaster , the 'Governance dApp', provides a professional UI that allows to see the list of masternodes and candidates, to deposit 50k TOMO to become a masternode candidate, to vote for masternodes, and to show masternode performance statistics. How do I login on TomoMaster? \u00b6 Go to TomoMaster. On the top-right corner click 'Login'. Then select how do you want to login: with TomoWallet, with Ledger, with Trezor, with Metamask, TrustWallet or Private Key/Mnemonic. What is the 'capacity' of a Candidate/Masternode? \u00b6 The capacity of a candidate is the 50K TOMO initial deposit plus the total amount of TOMO voted for that candidate. Which of these numbers on TomoMaster will tell us which is a good performing node vs poorly performing? \u00b6 On TomoMaster, click on a candidate to open the candidate page. Scroll down to 'Masternode Rewards'. You should look at 'Sign number', 'Slashing history' under Masternode Rewards to determine a good node or not. Masternodes will sign a maximum of 60 blocks per epoch. A good masternode will create around 60 sign transactions in that epoch. We also calculate the reward based on sign transactions number. What is a 'checkpoint'? \u00b6 For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. It is worth noting that token holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion. I want to stop running my node.\" \u00b6 If you don't want to run your masternode anymore, please remember to resign before shutting down the node. TomoWallet \u00b6 What is TomoWallet? Where can I download it? \u00b6 Tomo Wallet is the official mobile wallet for TomoChain, aiming to store the TOMO native coin and tokens issued on TomoChain. Tomo Wallet also allows users to vote for masternodes and track rewards. Users can download TomoWallet at App Store and Play Store . What tokens/coins does TomoWallet support? \u00b6 The current TomoWallet supports native TOMO on TomoChain Mainnet. TomoWallet will support all tokens on TomoChain platform in the future. How can I create a TOMO wallet? What are the options to create a TOMO wallet? \u00b6 You can create a TOMO wallet with the iOS app, the Android app, MyEtherWallet or Metamask. Can we vote on TomoMaster using TomoWallet? \u00b6 Yes, TomoWallet can be used for voting/staking on TomoMaster. How to Restore/Import Recovery Phrase into TomoWallet? \u00b6 Open TomoWallet, click 'Import Your Wallet', then type your recovery phrase. How to Restore/Import Private Key into TomoWallet? \u00b6 Open TomoWallet, click 'Import Your Wallet', then type your private key. I have Private Key in my PC. How do I import into TomoWallet in a safe way? \u00b6 Go to TomoWallet, click 'Import Your Wallet', choose 'private key' option, you can import directly or using QR code. How do I backup my wallet? \u00b6 Go to TomoWallet, click 'Setting tab' in the top left corner, press 'backup wallet', then write down/ scan QR code of your private key/ backup phrase. How do I protect my TomoWallet app? \u00b6 TomoWallet allows you to prevent unauthorized transactions by putting a password on the app itself. With this feature, you must authenticate every time you launch/ make a transaction on the TomoWallet. You can enable password protection in Settings. TIP: Make sure to upgrade your TomoWallet to the latest version to see this feature. How do I protect my funds from scammers? \u00b6 Every wallet consists of two parts - public key and private key. TomoWallet stores your private key directly on your device. There are a couple of formats TomoWallet can display your private key in: Private key - an unencrypted collection of numbers and letters that unlocks access to your address on various blockchains Mnemonic phrase - 12 words used to secure your private key. Much easier to remember. No service should ever ask you for your private key. Anyone with your private key can access your wallet and have FULL CONTROL of your funds. I lost my backup, what do I do? \u00b6 You can always have multiple copies of your backup, if you think you can store it safely. Any valid backup (private key/ mnemonic) will get you to the most current state of your wallet. We at TomoWallet, don\u2019t have access to your wallet or your private key. We are not able to help you recover your backup if you lose your device and your backup. Please make sure you store your backup(s) in a safe place. Can I access cold storage wallet in 'view-only' mode with TomoWallet? \u00b6 The TrustWallet watch functionality allows users of cold storage wallets - Trezor, The TomoWallet watch functionality allows users of cold storage wallets: Ledger, KeepKey, or any other device - to access their wallet in a view-only mode. By ONLY importing a PUBLIC KEY, we ensure that no action can be performed inside the wallet, meaning no asset can be transferred out of the wallet or accessed in any way. That allows users to see how their crypto portfolio is performing while having their keys in a safe place. Here is how you can do it with TomoWallet: Open the TomoWallet Choose 'import a wallet' Select 'import your public key' -> Paste your address -> Import I sent my TOMO to a wrong address. What do I do? \u00b6 TOMO: m/44'/889'/0'/0 Can I switch from my existing wallet app like Metamask, MyEtherWallet, etc.? \u00b6 You can export private key/recovery phrases from existing wallet app then import to TomoWallet. TomoX \u00b6 What is the difference between TomoX and a DeX? \u00b6 TomoChain's philosophy on decentralized exchanges is quite different from others. In TomoChain's design for decentralized exchanges, TomoX is the core decentralized exchange protocol, which takes in charge the order matching and execution. TomoX is integrated into the core layer of the TomoChain consensus. A decentralized exchange (DEX) in TomoChain's design for DEXs is a relayer that interacts with the underlying TomoX protocol. Typically, a relayer will send/receive trade orders to/from TomoX which processes these trade orders. TomoDEX will be the first relayer in TomoChain's decentralized exchange ecosystem. We expect TomoDex to be one of the most sophisticated Dex out there, consequently users who like the Dex experience will use TomoDex. TomoDex will be the first to list any token running on top of TomoChain together with well-known cryptocurrencies such as BTC and ETH, and have the best liquidity for new TomoChain's tokens. With TomoChain almost zero-fee, 2-second confirmation and 2'000 transactions per second, all relayers interacting with TomoX Protocol will be fully decentralized and very efficient. What is a Relayer? How can I set up one? \u00b6 A decentralized exchange (DEX) in TomoChain's design for DEXs is a relayer that interacts with the underlying TomoX protocol. Typically, a relayer will send/receive trade orders to/from TomoX which processes these trade orders.","title":"FAQ"},{"location":"general/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"general/faq/#general","text":"","title":"General"},{"location":"general/faq/#tomochain","text":"","title":"TomoChain"},{"location":"general/faq/#what-is-tomochain","text":"TomoChain is an innovative solution to the scalability problem of the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support low transaction fees and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and true randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture. It will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses.","title":"What is TomoChain?"},{"location":"general/faq/#what-problem-is-tomochain-aiming-to-solve","text":"The problems that TomoChain aims to solve can be summarized as follows: The network congestion on Ethereum (low transaction time) High transaction fees on Ethereum Most other blockchains are highly centralized and/or do not have interoperability with Ethereum system Blockchain has become one of the most disruptive technologies that enables many decentralized applications, including but not limited to cryptocurrencies, smart-contracts, voting and supply-chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing: Bitcoin and Ethereum can only process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5'000-6'000 transactions per second. TomoChain is continuously working and researching several scaling solutions. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. TomoChain supports low fee and 2-second transaction confirmation times. TomoChain can currently process 2'000-5'000 transactions per second (TPS) and once sharding is enabled, TomoChain is expected to reach 20'000-30'000 TPS.","title":"What problem is TomoChain aiming to solve?"},{"location":"general/faq/#how-does-tomochain-work-what-is-the-architecture-and-consensus-used","text":"TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support low fees (approx. 1/100 of that of Ethereum's) and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as Double Validation, staking via smart-contracts and true randomization processes.","title":"How does TomoChain work? What is the architecture and consensus used?"},{"location":"general/faq/#can-you-tell-more-about-proof-of-stake-voting-posv-what-is-it","text":"At the heart of TomoChain, the Proof-of-Stake Voting (PoSV) consensus enables TomoChain as an EVM-compatible and scalable public blockchain, on which every Ethereum smart contract can be effectively run with almost instant transaction confirmation. PoSV features its Masternode architecture in which token holders deposit 50k TOMO to become a masternode candidate and receive votes from other token holders. The most voted masternode candidates are selected as masternodes for block creation within a period, called epoch. Each masternode takes its block creation in a round-robin manner every 2-second and follows the double validation technique for security reinforcement. A block is finalised if it is signed off by 3/4 masternodes. At the end of each epoch, the masternodes that have signed finalised blocks are rewarded. Stakers who voted for those masternodes will also be rewarded.","title":"Can you tell more about Proof of Stake Voting (PoSV)? What is it?"},{"location":"general/faq/#what-is-double-validation","text":"Double Validation provides an additional trustless validation layer for security enhancement through a provable uniform distribution decentralized randomization. Specifically, when a block is created by a masternode, it must be verified by another masternode that is randomly selected among the set of masternodes before being added to the blockchain. Double validation strengthens Tomochain\u2019s security, reduces fork and nothing-at-stake attacks, and makes TomoChain unique among other Proof-of-Stake-based blockchains.","title":"What is Double Validation?"},{"location":"general/faq/#what-is-an-epoch","text":"An epoch is a 900-block period of 2-second block time starting from block #1 (900 blocks x 2s/block = around 1800s or ~30 minutes).","title":"What is an 'epoch'?"},{"location":"general/faq/#which-scaling-solutions-will-tomochain-implement-will-you-have-sharding","text":"TomoChain solutions are based on on-chain scaling built into an architecture of 150 voted masternodes with our Proof-of-stake Voting (POSV) consensus protocol. We achieve 2-second block-time and almost instant transaction confirmation. To scale further our infrastructure, we have presented our Sharding proposal for uniquely integrating Sharding into our current architecture and consensus. The implementation of sharding is on-going and we will enable it in Q2 2019, after TomoChain decentralized exchange (TomoX) launch. Besides sharding, we are actively researching scalability solutions like EVM parallelization and Plasma. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be evaluated before being integrated into TomoChain's masternode architecture.","title":"Which scaling solutions will TomoChain implement? Will you have sharding?"},{"location":"general/faq/#what-is-the-current-tps-what-is-your-targeted-transaction-speed-and-when-do-you-think-you-can-achieve-that-speed","text":"TomoChain supports low transaction fees (approx. 1/100 of that of Ethereum's) and 2-second transaction confirmation times. The mainnet with POSV Masternodes delivers 2'000 transactions per second (TPS). Once sharding is implemented by Q2 2019, we expect 20'000-30'000 TPS. TomoChain team is continuously researching other scaling techniques to keep improving.","title":"What is the current TPS? What is your targeted transaction speed and when do you think you can achieve that speed?"},{"location":"general/faq/#what-makes-tomochain-different","text":"The unique point of TomoChain comes from technology, the products and the ecosystem. Novel technology: includes Proof of Stake Voting consensus Build in governance D-app Double Validation and Randomization Sharding based on a stable masternode artichitecture This enables TomoChain to achieve: Cheap transactions: approx. 1/100 of that of Ethereum 2000 TPS to handle a robust d-app and token ecosystem; TPS will be dramatically higher once our sharding solution is enabled (20k-30k TPS) 2 second block time for fast transactions EVM-compatibility allows for interoperability with Ethereum ecosystem. Our unique products TomoScan: Shows all blocks, transactions, finality, smart contracts, D-Apps and token information TomoMaster: Allows users to apply for a Masternode Candidate position; to vote for Masternodes and shows Masternode performance statistics TomoWallet: Securely store, send, receive TOMO and other tokens issued on TomoChain; Allows users to vote and track rewards TomoX: A secure and efficient relayer-masternode decentralized exchange protocol Our own ecosystem TomoChain also is working vigorously on building its ecosystem and has sealed many partnerships from all fields such as agriculture, robotics, gaming, IT solution providers, advertising, pharmaceutical tracking, education and research, payment, communication, name service, food traceability, tourism etc such as TechInAsia, Kambria, Axie Infinity, Vnext, Farmatrust, TE-Food, Triip Protocol, Portal Network...","title":"What makes TomoChain different?"},{"location":"general/faq/#how-does-tomochain-compare-with-other-available-blockchain-projects","text":"Some of our competitors are EOS.IO, Casper FFG, Cardano, Tendermint, Lisk. We are doing a series of Medium posts on this matter. Some posts have been published, such as \"Blockchain comparison overview: EOS.IO, Casper FFG, Cardano, Tendermint and Tomochain\" , a detailed comparison with EOS Tomochain vs. EOS.IO: The battle of PoSV vs. DPoS or just some coincidence of design philosophy? , and a Comparison of PoS-voting based reward engines among TomoChain, EOS and Lisk . The world is a pretty big place, and startups often kill themselves because they cannot make a desirable product, not because of the competition. At the moment, besides the core TomoChain platform, we want to focus on a few quality Dapp use cases that can make a difference. Quality before quantity. Our core blockchain solution like the sharding proposal is of very high quality, and potentially better than multiple high profile attempts at scaling currently. The solution is also very unique to TomoChain's Marsternode design, which will remain our competitive product advantage for a long time. There are also several other product solutions in design stage which also highly integrate with Tomochain's overall design. These product innovations is one of the core competencies we have that make Tomochain very unique compared to other big projects. We are doing our best to solve the scalability problem, maximize the TPS and stay strong in our target market.","title":"How does TomoChain compare with other available blockchain projects?"},{"location":"general/faq/#which-blockchains-are-tomochains-main-competitors","text":"On the one hand, all base layer blockchains such as Ethereum, EOS, NEM, NEO, TomoChain etc are competitors because app developers/token issuers will generally choose only one blockchain to work on. On the other hand, it is too early to focus on competition as it is more important to expand the whole blockchain ecosystem rather than to compete. TomoChain has a unique position in which it adds value to the Ethereum ecosystem by addressing scalability and governance issues while keeping the same smart-contracts and general architecture.","title":"Which blockchain(s) are TomoChain's main competitors?"},{"location":"general/faq/#tomochain-is-evm-compatible-what-does-that-mean","text":"EVM means Ethereum Virtual Machine. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. This means that any smart-contract written in Ethereum protocol can be easily ported to TomoChain. Any d-App written in Ethereum can be seamlessly ported to TomoChain.","title":"TomoChain is EVM-compatible. What does that mean?"},{"location":"general/faq/#is-tomochain-a-side-chain-of-ethereum","text":"TomoChain has its own blockchain since TomoChain Mainnet was launched in December 14th, 2018.","title":"Is TomoChain a side-chain of Ethereum?"},{"location":"general/faq/#is-tomochain-compatible-with-ethereum","text":"Yes, any smart-contract written in Ethereum protocol can be easily ported to TomoChain. This is one strength appealing to some dApp developers and some of our partners.","title":"Is TomoChain compatible with Ethereum?"},{"location":"general/faq/#can-developers-make-hybrid-dapps-using-both-ethereum-and-tomochain-in-one-single-dapp","text":"Yes, they can make an app, and deploy it to both Ethereum, and TomoChain. It can be done relatively easy since TomoChain supports EVM, and share a common architecture with Ethereum.","title":"Can developers make hybrid dApps using both Ethereum and TomoChain in one single dApp?"},{"location":"general/faq/#when-is-tomochain-mainnet-launch","text":"TomoChain Mainnet was launched on December 14th, 2018.","title":"When is TomoChain mainnet launch?"},{"location":"general/faq/#what-is-the-difference-between-tomo-and-tomochain","text":"TOMO is the native currency of the TomoChain ecosystem.","title":"What is the difference between TOMO and TomoChain?"},{"location":"general/faq/#how-do-you-solve-security-problems-when-using-tomochain","text":"In terms of security of consensus protocol, TomoChain proposes Double Validation and Randomization to protect the system. The details of these techniques can be referred in our Technical paper . TomoChain solves some consensus-related security aspects: Nothing-at-stake problem: This problem is commonly discussed in PoS-based blockchain consensus and just like 51% attacks in PoW. TomoChain solves it by using Double Validation and Randomization. The details are shown in our technical paper. Long-range attacks: Attackers can try to recreate all blocks from a very far position to the current block. Attackers can do that because PoS-based consensus does not require extra-ordinary hashing power to re-write the whole blockchain. TomoChain addresses by providing finality. Once a block is signed by at least 3/4 masternodes, it is consider irreversible, meaning that any attempt to re-write the blockchain history will be rejected. Censorship-resistance: Please refer to this medium article for more detailed analysis DDoS and spamming attacks: TomoChain's transaction fee is not zero (even it is very low), attackers still require a significant amount of TOMO in order to flood the network for only a short time.","title":"How do you solve 'security problems' when using TomoChain?"},{"location":"general/faq/#how-does-tomochain-defend-against-spamming-attacks","text":"TomoChain has different measures to defend against spamming attacks. For instance, increasing transaction fees for smart contract creation is one of them. The min is 10 TOMO. Otherwise an error of smart contract creation cost is under allowance may show up.","title":"How does TomoChain defend against spamming attacks?"},{"location":"general/faq/#company","text":"","title":"Company"},{"location":"general/faq/#where-is-tomochain-registered","text":"You can check our company TomoChain Pte. Ltd. information on the Singaporean registry . You can also check the ACRA copy if you need more details.","title":"Where is TomoChain registered?"},{"location":"general/faq/#where-are-tomochain-offices","text":"TomoChain current offices are located in Singapore, Vietnam and the recently inaugurated in Japan: SINGAPORE 10 Anson Road #22-15 International Plaza, Singapore 079903 JAPAN Resona Kudan Building 5F, 1-5-6 Kudan-minami, Chiyoda-ku, Tokyo, 102-0074, Japan VIETNAM 219 Trung Kinh, Yen Hoa, Cau Giay, Hanoi, Vietnam","title":"Where are TomoChain offices?"},{"location":"general/faq/#how-many-people-are-working-on-tomochain-team","text":"We are nearly 40 people working fulltime. Check us out on our main website !","title":"How many people are working on TomoChain team?"},{"location":"general/faq/#where-can-i-take-a-look-at-tomochain-code-is-there-a-github-repository","text":"All the code regarding TomoChain is free to consult on our GitHub . This includes the code for the TomoChain blockchain client, governance DApp, block explorer, tools, docker images, documentation, etc. However, other blockchain related projects like ReplyBlock or drafts, work-in-progress and not yet disclosed projects are usually kept in private repositories. We like to publish code publicly when it reaches a certain level of development and/or when we think auditing and contributions are beneficial to the codebase. Keeping early projects private is probably more responsible for now due to our scale. It might change in the future. We are also working with some third parties with which we signed a non-disclosure-agreements for code development.","title":"Where can I take a look at TomoChain code? Is there a GitHub repository?"},{"location":"general/faq/#where-can-i-contact-you-to-get-support","text":"If you need support, please contact us on one of these platforms: Technical talk and support running our softwares: Gitter (https://gitter.im/tomochain) Bugs or technical contributions: GitHub (https://github.com/tomochain) General quotes regarding our blockchain: Telegram (https://t.me/tomochain)","title":"Where can I contact you to get support?"},{"location":"general/faq/#which-are-tomochains-official-channels-for-communication-and-information","text":"You can keep in touch with our latest news here: Twitter: https://twitter.com/TomoChainANN Telegram Announcements: https://t.me/TomoChainChannel Facebook: https://www.facebook.com/tomochainofficial Website: https://tomochain.com Medium: https://medium.com/tomochain Reddit: https://www.reddit.com/r/Tomochain/ LinkedIn: https://www.linkedin.com/company/tomochain/","title":"Which are TomoChain's official channels for communication and information?"},{"location":"general/faq/#ecosystem","text":"","title":"Ecosystem"},{"location":"general/faq/#what-incentives-have-partners-and-dapp-developers-to-build-on-tomochain","text":"TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. This means that any smart-contract written in Ethereum protocol can be easily ported to TomoChain. Any d-App written in Ethereum can be seamlessly ported to TomoChain, instantly enjoying all TomoChain advantages: almost zero-transaction fee; 2-second confirmation time; 2'000 TPS and soon 20K-30K TPS once sharding is enabled. D-app developers also have dedicated technical support from TomoChain developers. Besides the technical aspects, our partners will also benefit from the TomoChain community support and fundraising opportunities, thanks to TomoChain very good relationships with well-known investors.","title":"What incentives have partners and dApp developers to build on TomoChain?"},{"location":"general/faq/#why-should-developers-build-dapps-on-tomochain","text":"See: https://www.youtube.com/watch?v=8J4h2zsd_UE","title":"Why should developers build dApps on TomoChain?"},{"location":"general/faq/#where-can-i-see-tomochain-partnerships","text":"TomoChain is working vigorously on building its ecosystem and has sealed 23 partnerships from all fields such as agriculture, robotics, gaming, IT solution providers, advertising, pharmaceutical tracking, education and research, payment, communication, name service, food traceability, tourism (as of Jan 2019). All partnership announcements can be found Medium and our official Twitter account for partnership announcements. You can also find a list of partners willing to run D-apps on TomoChain here . This list will be updated in the future.","title":"Where can I see TomoChain partnerships?"},{"location":"general/faq/#where-can-i-check-the-actual-products-ecosystem","text":"Please, read the Mainnet announcement on our Medium post . Please, read the Testnet 2.0 announcement on our Medium post . If you want to access it directly, you can find the links to our different products deployed in Testnet on our Networks page . The list of TomoChain Products is as follows: TomoScan, TomoStats, TomoMaster, TomoWallet; TomoX.","title":"Where can I check the actual products, ecosystem?"},{"location":"general/faq/#tomo-economics","text":"","title":"TOMO - Economics"},{"location":"general/faq/#what-is-tomo-can-you-describe-the-functions-and-purposes-of-tomo","text":"TOMO is the native cryptocurrency of TomoChain and will be the reserve cryptocurrency for all third-party apps running on TomoChain. Being the protocol token for the TomoChain infrastructure, TOMO will be needed by all parties utilising TomoChain to build apps or issue and integrate cryptographic tokens into their apps. The supply of TOMO is fixed, long-term and non-inflationary. In addition to the above, TOMO is an integral part of the TomoChain network for a number of reasons. TOMO will be used to fund the development of TomoChain and its ecosystem (TomoScan, TomoMater, TomoWallet, etc.). TOMO will be used as a reward to incentivise the building of the TomoChain engine/ecosystem. TOMO will be used as a long-term, decentralized governance instrument of the TomoChain network. You can check our technical whitepaper for more details.","title":"What is TOMO? Can you describe the functions and purposes of TOMO?"},{"location":"general/faq/#can-i-mine-tomo","text":"TOMO is not mineable but mintable by masternodes. Masternodes are responsible for creating, verifying and finalizing the blocks created within a period, called epoch. Masternodes and Stakers will receive block rewards.","title":"Can I mine TOMO?"},{"location":"general/faq/#what-is-tomo-circulating-supply-and-total-supply","text":"The initial circulating supply at genesis block is 55'000'000 but the current circulating supply is increasing every epoch. After 8 years, TOMO total supply is fixed at 100'000'000 TOMO.","title":"What is TOMO circulating supply and total supply?"},{"location":"general/faq/#how-is-tomo-distributed","text":"The token allocation is splitted as follows: 55 millions TOMO was already allocated after the token sale period; 12 millions TOMO are reserved for the team vested over the next 4 years; 16 millions TOMO are reserved for strategic partners and an ecosystem building fund; 17 millions TOMO are reserved as block rewards for the next 8 years","title":"How is TOMO distributed?"},{"location":"general/faq/#how-are-block-rewards-distributed","text":"17 millions TOMO are reserved as block rewards for the next 8 years. 1st and 2nd year: 4 million TOMO annually 3rd, 4th and 5th year: 2 million TOMO annually 6th, 7th and 8th year: 1 million TOMO annually","title":"How are block rewards distributed?"},{"location":"general/faq/#will-tomochain-have-inflation","text":"The total supply is fixed at 100 million TOMO in the first 8 years (non-inflationary). 17 million TOMO which are reserved as block rewards will have been all distributed after 8 years. At that time, we are expecting that block rewards will come from the exchange fees. But the Masternode Council can decide to increase the total supply by 0.5-1 million TOMO per year (which will be used as block rewards) (~small inflation, 0.5%-1% annually).","title":"Will TomoChain have inflation?"},{"location":"general/faq/#how-often-are-block-rewards-paid-out","text":"Block rewards will be earnt every epoch, which lasts for 900 of two-second-block time (~30 minutes). Stakers will be also rewarded.","title":"How often are block rewards paid out?"},{"location":"general/faq/#if-tomochain-has-zero-fees-how-can-masternodes-get-rewards","text":"The block rewards will be emitted from a reserved fund with 17 million TOMO for the first 8 years. The block rewards are as follows: 1st and 2nd year: 4 million TOMO annually 3rd, 4th and 5th year: 2 million TOMO annually 6th, 7th and 8th year: 1 million TOMO annually We plan to have a built-in DEX, the revenues from the DEX will go to the Masternodes as well. After 8 years, the block rewards will come from the exchange fees. Also, the Masternode Council can decide to increase the total supply by 0.5-1 million TOMO per year (which will be used as block rewards).","title":"If TomoChain has zero fees, how can Masternodes get rewards?"},{"location":"general/faq/#what-is-the-price-in-presale-and-ico","text":"Presale Price: $0.2 ICO Price: $0.25 ( 0.0003125 ETH )","title":"What is the price in presale and ICO?"},{"location":"general/faq/#when-will-tomo-be-listed-on-new-exchanges","text":"We do not discuss about exchange related questions due to the regulation. We will announce every exchange news on our official channels on due time.","title":"When will TOMO be listed on new exchanges?"},{"location":"general/faq/#is-tomo-an-erc-20-token","text":"Since Mainnet, TOMO has become the native coin of the TomoChain blockchain.","title":"Is TOMO an ERC-20 token?"},{"location":"general/faq/#what-is-a-trc-20-token","text":"A TRC-20 token is a token which can be issued on the TomoChain blockchain. TCR-20 is similar to the ERC-20 standard in the Ethereum blockchain.","title":"What is a TRC-20 token?"},{"location":"general/faq/#where-to-store-tomo-how-can-i-send-tomo-to-my-wallet","text":"You can store TOMO in TomoWallet, TrustWallet, MetaMask, MyEtherWallet, Ledger and Trezor. We recommend to store TOMO in TomoWallet. Please, read more details here: https://docs.tomochain.com/get-started/wallet/","title":"Where to store TOMO? How can I send TOMO to my wallet?"},{"location":"general/faq/#can-i-send-tomo-directly-from-my-myetherwallet","text":"Yes. MyEtherWallet now has TomoChain in the supported network list. TOMO holders then can send TOMO using MyEtherWallet.","title":"Can I send TOMO directly from my MyEtherWallet?"},{"location":"general/faq/#how-to-connect-metamask-myetherwallet-with-tomochain-mainnet","text":"The followings are information used for configuring Metamask to connect to TomoChain Mainnet. RPC endpoint: https://rpc.tomochain.com Chain ID: 88 Symbol: TOMO Network Name: TomoChain Mainnet TomoChain is now supported by MyEtherWallet. All you need to do is to choose Network TOMO in the supported network list in MyEtherWallet. You can find the info about our Mainnet or Testnet on our Networks page. Also, you can find out more detailed information about how to use different wallet types to connect to TomoChain Mainnet on Connect your wallet","title":"How to connect Metamask / MyEtherWallet with TomoChain mainnet?"},{"location":"general/faq/#where-can-i-buy-tomo-exchanges","text":"You can trade TOMO on various exchanges. Take a look in the \"Exchanges\" section on this page of our main website.","title":"Where can I buy TOMO? (exchanges)\""},{"location":"general/faq/#masternodes","text":"","title":"Masternodes"},{"location":"general/faq/#does-tomochain-have-masternodes-how-do-they-work","text":"Yes, TomoChain has a maximum of 150 Masternodes with Proof of Stake Voting (POSV) consensus for low transaction fee, and instant transaction confirmation. Masternodes create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidates: Any account can deposit 50,000 TOMO using TomoMaster to become a masternode candidate. A candidate can resign, but the tokens will be locked for the next 30 days (1'296'000 blocks) after the resignation. Becoming a Masternode: A candidate becomes a masternode when he/she belongs to the top 150 most voted candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Rewards: The rewards a masternode receives in each epoch is proportional to the number of signatures it signs. Masternodes will also receive fees from the TomoChain DEX, which is planned for development in Q1 2019. TomoChain masternodes started signing blocks and receiving block rewards with the Mainnet release in December 14th, 2018.","title":"Does TomoChain have Masternodes? How do they work?"},{"location":"general/faq/#what-is-a-masternode-in-the-tomochain-ecosystem","text":"A TomoChain masternode is a server which uses its computing power to contribute to the network. Its job is to create and sign blocks. For this contribution to the network, masternodes receive rewards in the form of TOMO. Masternodes are elected using the PoSV consensus via our governance dApp TomoMaster","title":"What is a masternode in the TomoChain ecosystem?"},{"location":"general/faq/#what-are-the-incentives-to-run-a-masternode","text":"Masternodes contribute to the network and for this work they will receive a significant amount of block rewards, which will likely exceed the cost for running the infrastructure. However, masternode owners need to invest in TomoChain by depositing at least 50'000 TOMO, and stake them in the long term. After the initial deposit, if the account does not become a masternode (has less votes than the top 150 most voted candidates), he will not receive rewards. Therefore, candidates are incentivised to do as much as they can to signal their capability to support TomoChain to get into top 150 most voted candidates.","title":"What are the incentives to run a masternode?"},{"location":"general/faq/#how-did-you-decide-on-150-masternodes-why-did-you-decide-to-increase-this-from-the-initial-99","text":"The reason came from both decentralization consideration, and also scalability consideration. In terms of decentralization, 150 is better than 99. The more important consideration is the scalability. We also increased the number of masternodes to better suit the sharding solution later. Also 150 is Dunbar\u2019s Number .","title":"How did you decide on 150 masternodes? Why did you decide to increase this from the initial 99?"},{"location":"general/faq/#where-will-the-masternode-rewards-come-from-will-they-be-from-the-dex","text":"The block rewards will come from a 17 million TOMO reserve for the next 8 years - this was decided since the genesis block. Our Economics paper lays out the number in detail. And then later on, because we plan to have a built-in DEX, the revenues from the DEX will go to the Masternodes as well.","title":"Where will the Masternode rewards come from? Will they be from the DEX?"},{"location":"general/faq/#when-are-masternode-rewards-paid-out","text":"Masternode operators and stakers will receive rewards every epoch. An epoch is a 900-block period of 2-second block time (~30 minutes).","title":"When are Masternode rewards paid out?"},{"location":"general/faq/#how-can-i-check-my-rewards","text":"You can check your masternode/staking rewards using TomoWallet. Alternatively you can use TomoMaster or TomoScan.","title":"How can I check my rewards?"},{"location":"general/faq/#how-much-rewards-will-masternodes-receive","text":"Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Example: With only 25 Masternodes and equal performances, every masternode would be rewarded with 10 TOMO. With 125 Masternodes, each one would receive 2 TOMO per epoch. Please, refer to our Economics paper for more details about the masternodes reward.","title":"How much rewards will Masternodes receive?"},{"location":"general/faq/#how-much-reward-from-masternodes-will-go-to-the-masternode-infrastructure-node-owner-and-how-much-is-for-voters","text":"There is a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. The reward achieved by each Masternode will be divided into three portions: Infrastructure Reward: The first portion of 40% called Infrastructure Reward goes to the Masternode operator. Staking Reward: The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The Masternode also gets proportional rewards for his 50K TOMO initial deposit. Foundation Reward: The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by the TomoChain company initially.","title":"How much reward from Masternodes will go to the Masternode infrastructure (node owner) and how much is for voters?"},{"location":"general/faq/#what-is-the-expected-roi-for-masternodes-and-stakers","text":"The rewards for every masternode will be dynamic and depending on multiple factors like: number of masternodes in the network, the efficiency signing blocks, the total number of votes on each masternode. The most efficient masternodes signing blocks will receive higher rewards. Please, refer to our Economics paper for more details about the masternodes reward. We discuss 3 possible scenarios with 50, 100 and 150 Masternodes; and different number of total votes. One example is outlined below. Scenario: 150 Masternodes, 12.5 million tokens voting (a total of 20 million token locked). Reward achieved per epoch (900 blocks): By a Masternode = 0.6667 Tomo By a Voter with 1K Tomo staked = 0.00625 Tomo Approximate reward achieved per week: By a Masternode = 224 Tomo By a Voter with 1K Tomo staked = 2.1 Tomo Approximate reward achieved per year: By a Masternode = 11,680 Tomo By a Voter with 1K Tomo staked = 109.5 Tomo (10.95% annually) By a Voter with 50K Tomo staked = 5,475 Tomo Total reward for a Masternode with a 50K Tomo deposit: 11,680 + 5,475 = 17,155 Tomo (34.31% annually)","title":"What is the expected ROI for Masternodes and Stakers?"},{"location":"general/faq/#masternode-candidate","text":"","title":"Masternode Candidate"},{"location":"general/faq/#what-is-a-masternode-candidate-what-is-the-difference-between-masternode-candidate-and-masternode","text":"A Masternode Candidate is any node who deposited 50K TOMO and is listed on TomoMaster . One Candidate only becomes a Masternode when he is in the top-150 most-voted masternode candidates in an epoch. Only these elected masternodes will be able to sign blocks and receive block rewards.","title":"What is a masternode candidate? What is the difference between masternode candidate and masternode?"},{"location":"general/faq/#how-can-i-become-a-masternode","text":"The first step to become a masternode, is becoming a masternode candidate. To become a Masternode Candidate you need: to run TomoChain software in a machine with certain minimal hardware requirements to deposit 50\u2019000 TOMO in a smart-contract via TomoMaster The list of Masternode Candidates will be available on the governance DApp, TomoMaster . The next step is to be elected as one of the top 150 most voted candidates.","title":"How can I become a Masternode?"},{"location":"general/faq/#do-i-need-to-use-my-own-computer-to-run-a-node","text":"We recommend using an IaaS (\"cloud\") provider of your choice (like Amazon AWS, Digital Ocean, Google Cloud GCE, Vultr, etc). The machine must be directly facing internet (public IP, no NAT) and with 100% uptime. If you have other production grade environment than cloud provider at your disposal, please tell us more about on our Gitter .","title":"Do I need to use my own computer to run a node?"},{"location":"general/faq/#which-are-the-hardware-requirements-to-run-a-node","text":"Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers. Directly facing internet (public IP, no NAT) 16 cores CPU 32GB of RAM SSD storage We recommend using popular cloud providers as their reliability and uptime are close to 100%. Those servers would be a good starting point: DigitalOcean: CPU optimized droplet 32GB/16CPU Amazon EC2: C5 instance Google Cloud Engine: n1-highcpu-16 Setting up a masternode candidate on a weaker machine might result in poor performances, significantly impacting owner's rewards and the chain performance. Note: If you are running a node in Testnet, 2CPU/8GB of RAM is sufficient.","title":"Which are the hardware requirements to run a node?"},{"location":"general/faq/#how-do-masternode-candidates-become-masternodes","text":"Once you are a Masternode Candidate, you need the support of TomoChain community in the form of votes. The top 150 most voted candidates every period called epoch (900 blocks of 2-second block-time) will be promoted to Masternode. This list will change dynamically every epoch. Only the 150 masternodes elected will be able to sign blocks and will receive rewards in the form of TOMO.","title":"How do Masternode Candidates become Masternodes?"},{"location":"general/faq/#is-there-any-guide-on-how-to-run-a-masternode-from-a-to-z","text":"See this Medium post .","title":"Is there any guide on 'How to run a masternode from A to Z'?"},{"location":"general/faq/#where-can-i-find-the-latest-masternode-guide-or-the-instructions-for-setting-up-a-masternode","text":"Find more details about tmn here: https://docs.tomochain.com/masternode/tmn/","title":"Where can I find the latest masternode guide or the instructions for setting up a masternode?"},{"location":"general/faq/#what-is-the-command-to-start-a-fullnode-with-tmn","text":"tmn start --name node_name --net mainnet --pkey your_private_key","title":"What is the command to start a fullnode with 'tmn'?"},{"location":"general/faq/#tmn-is-installed-but-just-not-in-your-path","text":"See: https://docs.tomochain.com/masternode/tmn/#tmn-command-not-found","title":"tmn is installed but just not in your path.\""},{"location":"general/faq/#i-tried-stopping-the-node-using-tmn-stop-but-after-that-i-ran-tmn-status-it-still-says-running","text":"You can run tmn --debug stop and send the log to us. We will help you to investigate the issue.","title":"I tried stopping the node using 'tmn stop', but after that I ran 'tmn status' it still says running.\""},{"location":"general/faq/#do-i-need-two-wallets-to-run-a-masternode","text":"It is recommended for security reasons. You can create your wallet from wherever you want, the only rule being that you need two of them. One for your masternode, and one to make the 50K deposit (this account will receive the rewards).","title":"Do I need two wallets to run a Masternode?"},{"location":"general/faq/#what-is-the-coinbase-address","text":"'Coinbase address' is the public address used to run your node and register it to the system. We recommend using two addresses when running your nodes. The public address or 'coinbase address' will only receive transaction fees. The private address is from where you make the initial 50K TOMO deposit and where the block rewards will be collected.","title":"What is the 'coinbase address'?"},{"location":"general/faq/#how-can-i-create-a-public-coinbase-address-wallet-is-it-only-with-tomowallet-for-ios-and-android-are-there-other-options","text":"You need to create a wallet for the masternode public address. This wallet does not need to contain any TOMO, think of it as a shell address. You will then stake tomo into the masternode address via your main TOMO wallet. You can use the iOS and Android apps. Also you can create wallets with Metamask, MyEtherWallet. You can also use https://wallet.testnet.tomochain.com to create an empty wallet, then use it as coinbase address.","title":"How can I create a public 'coinbase address' wallet? Is it only with TomoWallet for iOS and Android? Are there other options?"},{"location":"general/faq/#i-noticed-that-we-need-another-wallet-for-masternode-with-a-different-mnemonic-assume-we-use-a-hardware-wallet-we-would-need-another-hardware-wallet-with-different-mnemonic","text":"It is recommended to use a separate empty account for your masternode as it only receive transactions fees - what we call public or 'coinbase address' on the documentation. The block rewards are sent to the account connected to TomoMaster who make the initial deposit - the 'private' address.","title":"I noticed that we need another wallet for masternode with a different mnemonic. Assume we use a hardware wallet, we would need another hardware wallet with different mnemonic?"},{"location":"general/faq/#can-i-use-the-same-address-pair-tmn-public-address-initial-deposit-address-for-all-my-nodes-or-i-have-to-transfer-tokens-to-another-wallet-and-start-the-second-node","text":"No. Must use different public 'coinbase' addresses. But you can use the same initial deposit ('private') address, then all rewards will be transferred to only one address.","title":"Can I use the same address pair (tmn public address + initial deposit address) for all my nodes? Or I have to transfer tokens to another wallet and start the second node?"},{"location":"general/faq/#i-have-finished-all-steps-of-setting-up-node-why-i-dont-see-my-node-on-tomomaster","text":"You must apply to become a masternode candidate.","title":"I have finished all steps of setting up node. Why I don't see my node on TomoMaster?"},{"location":"general/faq/#do-i-need-to-deposit-the-50k-tomo-before-or-after-running-tmn-in-vps","text":"After. Your node must be fully synched before applying.","title":"Do I need to deposit the 50K TOMO before or after running 'tmn' in VPS?"},{"location":"general/faq/#how-do-i-check-the-blockchain-sync-status-from-the-node","text":"You can watch the logs, but it is easier from the TomoStats website or its eth.blockNumber API call.","title":"How do I check the blockchain sync status from the node?"},{"location":"general/faq/#if-the-masternode-owner-deposits-60k-tomo-instead-of-50k-on-its-own-node-can-it-later-on-unstake-the-excess-10k","text":"Yes, it can.","title":"If the masternode owner deposits 60K TOMO instead of 50K on its own node, can it later on unstake the excess 10K?"},{"location":"general/faq/#how-can-i-change-my-nodes-name","text":"You can do it on TomoMaster. Go to your masternode page on TomoMaster, if you are logged in TomoMaster with the owner account, you can click next to the masternode name to edit infos.","title":"How can I change my node's name?"},{"location":"general/faq/#my-node-status-is-proposed-will-it-change-status-with-next-checkpoint","text":"Yes, if you are in top-150 most voted.","title":"My node status is 'Proposed', will it change status with next checkpoint?"},{"location":"general/faq/#why-is-a-node-flagged-as-slashed","text":"With Slashing v2.0, a masternode who doesn't create any block within an epoch and therefore delays the network by 10 seconds at each of their turns will be penalized (no rewards) for the next five epochs. Note: a slashed Masternode can still sign transactions if he\u2019s online but receive no rewards for doing so. After being slashed for 5 epochs, the Masternode is analysed for re-entry. If the slashed Masternode have signed any transaction during the last epoch (meaning that he's up and working again) it will come back to its Masternode status and receive rewards normally. Otherwise it will be slashed for a new round of 5 epochs. This can happen as long as the node isn't back up or kicked out of the top 150. Some reasons for being Slashed might be that the masternode does not have the correct TomoChain software, lack of memory or masternode crashes due to the lack of e-maintenance and operation by the masternode owner.","title":"Why is a node flagged as 'Slashed'?"},{"location":"general/faq/#how-do-i-update-my-masternode-to-the-newest-version","text":"Run this command: pip3 install -U tmn && tmn update && tmn start","title":"How do I update my Masternode to the newest version?"},{"location":"general/faq/#how-many-nodes-i-am-allowed-to-run","text":"As many as you can.","title":"How many nodes I am allowed to run?"},{"location":"general/faq/#how-can-i-resign-as-masternode","text":"If you no longer want to be a masternode, you can resign on TomoMaster. Your masternode will stop generating rewards and your funds will be locked for 30 days (1 296 000 blocks). After the lockup period you will be able to withdraw your 50'000 TOMO deposit.","title":"How can I resign as Masternode?"},{"location":"general/faq/#can-i-close-the-node-entirely-then-start-a-new-one-with-a-totally-separate-coinbase-address-without-being-penalized","text":"No. Your old node will be penalized (50K initial deposit 30-day lockup) and your new node has to apply again.","title":"Can I close the node entirely, then start a new one with a totally separate coinbase address without being penalized?"},{"location":"general/faq/#is-it-possible-to-move-a-masternode-later-like-backup-and-start-it-from-another-ip-address","text":"Yes.","title":"Is it possible to move a masternode later, like backup and start it from another IP address?"},{"location":"general/faq/#what-if-i-do-not-have-enough-tomo-for-a-masternode-can-i-stake-my-coins","text":"Yes. Token holders can stake TOMO and receive rewards. To stake TOMO you need to vote for masternode candidates by sending TOMO to each candidates specific voting-address using the official governance d-App: TomoMaster.` The top-150 most voted candidates will become masternodes. Token holders can also un-vote candidates, but the tokens will be locked for the next 96 epochs / 8,640 blocks (approx. 48 hours) after the un-voting. Masternode token deposits, and all tokens used to vote for masternodes will enter the staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for candidates who do not become masternodes will not earn staking rewards.","title":"What if I do not have enough TOMO for a masternode? Can I stake my coins?"},{"location":"general/faq/#voter","text":"","title":"Voter"},{"location":"general/faq/#what-are-the-voters-incentives-do-voters-get-rewards-too","text":"Token voters should vote for the candidates who demonstrate strong support to the TomoChain ecosystem. If strong candidates are voted to become masternodes, the network will be more powerful and the voters will earn more rewards. More information on the voting and reward mechanism in the Economics paper .","title":"What are the voters incentives? Do voters get rewards too?"},{"location":"general/faq/#can-you-stake-tomo","text":"Yes, you can stake TOMO and receive more TOMO coins as reward.","title":"Can you stake TOMO?"},{"location":"general/faq/#how-do-i-stake-just-holding-on-my-wallet","text":"To stake in TomoChain you must participate in the TomoChain Masternode election, voting for masternode candidate(s) using TomoMaster to deposit your tokens in a voting smart-contract. Login to TomoMaster and click 'Vote' on a node.","title":"How do I Stake? Just holding on my wallet?"},{"location":"general/faq/#how-does-tomochain-masternode-proof-of-stake-voting-posv-work","text":"Everyone can can find a list of all masternode candidates on TomoMaster . All token holders can vote TOMO on any candidates via TomoMaster. To vote, token holders must deposit TOMO in a smart-contract associated with the voted candidate. The top-150 most-voted candidates will be promoted to masternode during the next epoch and will be able to sign blocks and collect rewards. All the voters (stakers) who supported the elected masternodes will receive rewards, proportional to the amount of TOMO voted and the efficiency of the masternode.","title":"How does TomoChain Masternode Proof-of-Stake-Voting (PoSV) work?"},{"location":"general/faq/#how-do-i-vote-stake","text":"Any token holder can vote. Login to TomoMaster and then click 'Vote' on a node. Then enter the amount of TOMO you want to vote (minimum is 100 TOMO). You vote by depositing (staking) tokens to a smart-contract associated with a masternode candidate. There are many ways to vote in TomoMaster: Voting from TomoWallet. Voting from Ledger wallet Voting from Trezor wallet Voting via MetaMask (can be connected to your hardware wallets). Voting from TrustWallet Voting with your wallet's Private Key or MNEMONIC.","title":"How do I vote (stake)?"},{"location":"general/faq/#how-do-i-votestake-from-tomowallet-app-on-my-phone","text":"Please, read the following guide . Or watch this video: https://www.youtube.com/watch?v=tXp4WHl_sxY","title":"How do I vote/stake from TomoWallet app on my phone?"},{"location":"general/faq/#how-do-i-vote-from-my-ledger-nano-s","text":"Plug in your Ledger and open the Ethereum App. Go to TomoMaster. Login in the top-right corner and select Ledger from the drop-down menu. Change the HD path to m/44'/60'/0' You should see your TOMO balance. To see a list of nodes click on the TomoMaster homepage button - top left corner. Next to each node should be a 'Vote' button. When voting you will need to confirm transaction on your Ledger.","title":"How do I vote from my Ledger Nano S?"},{"location":"general/faq/#can-i-stake-for-multiple-masternodes-via-ledger","text":"Yes, you can.","title":"Can I stake for multiple masternodes via Ledger?"},{"location":"general/faq/#ledger-not-working","text":"Probably your Ledger firmware version is incompatible. Sometimes you should upgrade your Ledger to the newest firmware. Occasionally a new version could be problematic and you should try to use the previous firmware version.","title":"Ledger not working?"},{"location":"general/faq/#can-i-use-trezor-to-vote-for-masternodes","text":"Yes. TomoMaster supports Trezor now.","title":"Can I use Trezor to vote for masternodes?"},{"location":"general/faq/#what-criteria-must-be-considered-when-voting-which-masternode-candidate-should-i-vote-for","text":"The most important criteria to maximize voter\u2019s profit, the main points you should consider when voting, are the following: Top-150 most voted: Your candidate must be one of the top-150 most-voted. If your candidate gets in the 151th most-voted place, it will not be promoted to masternode and you will earn zero rewards. Hardware, Performance: Powerful CPU, RAM, bandwidth, latency, etc so the node can work hard and receive high rewards Number of signed blocks: The more signed blocks per epoch, the higher rewards Time of last signed block: Verify that the masternode is active Total Capacity: Staking rewards are shared between all the masternode votes. Less voted masternodes are more profitable. 5K staked on a 50K-staked masternode will receive ten times more rewards than 5K staked on a 500K total staked masternode. Social Proof, Reputation: Masternodes managed by trusted companies that are for the long term, maintaining the masternode, updating hardware and software to last versions, fixing problems, etc.","title":"What criteria must be considered when voting? Which masternode candidate should I vote for?"},{"location":"general/faq/#how-many-masternode-candidates-can-i-vote-for","text":"You can vote for as many candidates as you wish, splitting your TOMO. Example: If you have 1'000 TOMO you can vote 500 TOMO for candidate A, 450 TOMO for candidate B, and 50 TOMO for candidate C.","title":"How many Masternode Candidates can I vote for?"},{"location":"general/faq/#what-is-the-minimum-amount-to-stake","text":"The minimum amount to stake is 100 TOMO.","title":"What is the minimum amount to Stake?"},{"location":"general/faq/#which-hardware-wallet-can-i-use-to-vote","text":"You are able to use hardware wallets (Ledger, Trezor) with MyEtherWallet or Metamask. You can also directly connect to the TomoChain Mainnet with Ledger/Trezor and vote on TomoMaster .","title":"Which hardware-wallet can I use to vote?"},{"location":"general/faq/#is-it-possible-to-re-invest-the-tomo-earned-and-use-it-to-continue-voting","text":"Yes.","title":"Is it possible to re-invest the TOMO earned and use it to continue voting?"},{"location":"general/faq/#is-there-a-way-to-stake-the-earned-rewards-automatically","text":"This is not supported currently.","title":"Is there a way to stake the earned rewards automatically?"},{"location":"general/faq/#what-happens-if-the-masternode-i-voted-for-stops-working-will-i-get-my-tomo-back","text":"Yes. You can unvote that masternode and take your tokens back after 96 epochs (approx. 48 hours) lock-up period.","title":"What happens if the Masternode I voted for stops working? Will I get my TOMO back?"},{"location":"general/faq/#how-do-i-unvote","text":"If you do not want to support a masternode you voted for, you can unvote it by clicking the \u2018Unvote\u2019 button on the masternode's page and enter the amount of TOMO you wish to unvote. After unvoting, your TOMO are still locked in the smart contract for 96 epochs (approx. 48 hours) before you are able to withdraw. When the lockup period is finished you need to click the \u2018Withdraw\u2019 button and the coins will appear again on your wallet.","title":"How do I UnVote?"},{"location":"general/faq/#how-to-withdraw-after-unvoting","text":"After unvoting, you need to wait until your TOMO is unlocked from the smart contract (96 epochs, approx. 48 hours). Then you can go to TomoMaster and click the 'Withdraw' button in your account page (the three vertical dots on the top-right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously.","title":"How to withdraw after unvoting?"},{"location":"general/faq/#products","text":"","title":"Products"},{"location":"general/faq/#tomoscan","text":"","title":"TomoScan"},{"location":"general/faq/#what-is-tomoscan","text":"TomoScan is our block explorer. It is pretty similar to EtherScan if you are already familiar with it. TomoScan provides a user friendly, details and perfection-oriented user interface for TomoChain block explorer. From a user perspective, TomoScan brings TomoChain\u2019s transparency to users, because all block, transaction, finality, smart contracts, dApp and token information are read from TomoChain and shown to users. Furthermore, TomoScan also offers technical visualisations and does useful statistics about the TomoChain performance, token holders and other functionalities.","title":"What is TomoScan?"},{"location":"general/faq/#what-is-a-txhash-how-to-check-a-txhash","text":"TxHash stands for 'transaction hash', and is also known as a transaction ID. An example of what a TxHash looks like: 0x838d33119b33e4519cb201e49bfc570ddc0fbdc6d9cf7038d8254a4de97f7112 To check a TxHash, follow the steps below: On TomoScan , go to the search bar with the magnifying glass icon. Paste your transaction hash (TxHash) in the search bar and click the icon or press ENTER. Your transaction details will show up. Example: https://scan.testnet.tomochain.com/txs/0x838d33119b33e4519cb201e49bfc570ddc0fbdc6d9cf7038d8254a4de97f7112","title":"What is a TxHash? How to check a TxHash?"},{"location":"general/faq/#tomostats","text":"","title":"TomoStats"},{"location":"general/faq/#what-is-tomostats","text":"TomoStats shows the various metrics regarding the current mainnet including the current number of masternodes, masternodes performance, current TPS, block-time, confirmation time, finality and other useful metrics.","title":"What is TomoStats?"},{"location":"general/faq/#how-much-is-the-average-time-to-see-my-node-appear-on-tomostats","text":"It should be less than a minute after tmn command is executed and finished.","title":"How much is the average time to see my node appear on TomoStats?"},{"location":"general/faq/#stats-page-wasnt-working-and-showed-a-70-second-block-what-happened","text":"The stats page is javascript code running in your browser. If your computer loses internet connection or the page is not active anymore for some reasons, the time will increase forever. In this case just refresh the page.","title":"Stats page wasn't working and showed a 70-second block. What happened?"},{"location":"general/faq/#tomomaster","text":"","title":"TomoMaster"},{"location":"general/faq/#what-is-tomomaster","text":"TomoMaster , the 'Governance dApp', provides a professional UI that allows to see the list of masternodes and candidates, to deposit 50k TOMO to become a masternode candidate, to vote for masternodes, and to show masternode performance statistics.","title":"What is TomoMaster?"},{"location":"general/faq/#how-do-i-login-on-tomomaster","text":"Go to TomoMaster. On the top-right corner click 'Login'. Then select how do you want to login: with TomoWallet, with Ledger, with Trezor, with Metamask, TrustWallet or Private Key/Mnemonic.","title":"How do I login on TomoMaster?"},{"location":"general/faq/#what-is-the-capacity-of-a-candidatemasternode","text":"The capacity of a candidate is the 50K TOMO initial deposit plus the total amount of TOMO voted for that candidate.","title":"What is the 'capacity' of a Candidate/Masternode?"},{"location":"general/faq/#which-of-these-numbers-on-tomomaster-will-tell-us-which-is-a-good-performing-node-vs-poorly-performing","text":"On TomoMaster, click on a candidate to open the candidate page. Scroll down to 'Masternode Rewards'. You should look at 'Sign number', 'Slashing history' under Masternode Rewards to determine a good node or not. Masternodes will sign a maximum of 60 blocks per epoch. A good masternode will create around 60 sign transactions in that epoch. We also calculate the reward based on sign transactions number.","title":"Which of these numbers on TomoMaster will tell us which is a good performing node vs poorly performing?"},{"location":"general/faq/#what-is-a-checkpoint","text":"For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. It is worth noting that token holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion.","title":"What is a 'checkpoint'?"},{"location":"general/faq/#i-want-to-stop-running-my-node","text":"If you don't want to run your masternode anymore, please remember to resign before shutting down the node.","title":"I want to stop running my node.\""},{"location":"general/faq/#tomowallet","text":"","title":"TomoWallet"},{"location":"general/faq/#what-is-tomowallet-where-can-i-download-it","text":"Tomo Wallet is the official mobile wallet for TomoChain, aiming to store the TOMO native coin and tokens issued on TomoChain. Tomo Wallet also allows users to vote for masternodes and track rewards. Users can download TomoWallet at App Store and Play Store .","title":"What is TomoWallet? Where can I download it?"},{"location":"general/faq/#what-tokenscoins-does-tomowallet-support","text":"The current TomoWallet supports native TOMO on TomoChain Mainnet. TomoWallet will support all tokens on TomoChain platform in the future.","title":"What tokens/coins does TomoWallet support?"},{"location":"general/faq/#how-can-i-create-a-tomo-wallet-what-are-the-options-to-create-a-tomo-wallet","text":"You can create a TOMO wallet with the iOS app, the Android app, MyEtherWallet or Metamask.","title":"How can I create a TOMO wallet? What are the options to create a TOMO wallet?"},{"location":"general/faq/#can-we-vote-on-tomomaster-using-tomowallet","text":"Yes, TomoWallet can be used for voting/staking on TomoMaster.","title":"Can we vote on TomoMaster using TomoWallet?"},{"location":"general/faq/#how-to-restoreimport-recovery-phrase-into-tomowallet","text":"Open TomoWallet, click 'Import Your Wallet', then type your recovery phrase.","title":"How to Restore/Import Recovery Phrase into TomoWallet?"},{"location":"general/faq/#how-to-restoreimport-private-key-into-tomowallet","text":"Open TomoWallet, click 'Import Your Wallet', then type your private key.","title":"How to Restore/Import Private Key into TomoWallet?"},{"location":"general/faq/#i-have-private-key-in-my-pc-how-do-i-import-into-tomowallet-in-a-safe-way","text":"Go to TomoWallet, click 'Import Your Wallet', choose 'private key' option, you can import directly or using QR code.","title":"I have Private Key in my PC. How do I import into TomoWallet in a safe way?"},{"location":"general/faq/#how-do-i-backup-my-wallet","text":"Go to TomoWallet, click 'Setting tab' in the top left corner, press 'backup wallet', then write down/ scan QR code of your private key/ backup phrase.","title":"How do I backup my wallet?"},{"location":"general/faq/#how-do-i-protect-my-tomowallet-app","text":"TomoWallet allows you to prevent unauthorized transactions by putting a password on the app itself. With this feature, you must authenticate every time you launch/ make a transaction on the TomoWallet. You can enable password protection in Settings. TIP: Make sure to upgrade your TomoWallet to the latest version to see this feature.","title":"How do I protect my TomoWallet app?"},{"location":"general/faq/#how-do-i-protect-my-funds-from-scammers","text":"Every wallet consists of two parts - public key and private key. TomoWallet stores your private key directly on your device. There are a couple of formats TomoWallet can display your private key in: Private key - an unencrypted collection of numbers and letters that unlocks access to your address on various blockchains Mnemonic phrase - 12 words used to secure your private key. Much easier to remember. No service should ever ask you for your private key. Anyone with your private key can access your wallet and have FULL CONTROL of your funds.","title":"How do I protect my funds from scammers?"},{"location":"general/faq/#i-lost-my-backup-what-do-i-do","text":"You can always have multiple copies of your backup, if you think you can store it safely. Any valid backup (private key/ mnemonic) will get you to the most current state of your wallet. We at TomoWallet, don\u2019t have access to your wallet or your private key. We are not able to help you recover your backup if you lose your device and your backup. Please make sure you store your backup(s) in a safe place.","title":"I lost my backup, what do I do?"},{"location":"general/faq/#can-i-access-cold-storage-wallet-in-view-only-mode-with-tomowallet","text":"The TrustWallet watch functionality allows users of cold storage wallets - Trezor, The TomoWallet watch functionality allows users of cold storage wallets: Ledger, KeepKey, or any other device - to access their wallet in a view-only mode. By ONLY importing a PUBLIC KEY, we ensure that no action can be performed inside the wallet, meaning no asset can be transferred out of the wallet or accessed in any way. That allows users to see how their crypto portfolio is performing while having their keys in a safe place. Here is how you can do it with TomoWallet: Open the TomoWallet Choose 'import a wallet' Select 'import your public key' -> Paste your address -> Import","title":"Can I access cold storage wallet in 'view-only' mode with TomoWallet?"},{"location":"general/faq/#i-sent-my-tomo-to-a-wrong-address-what-do-i-do","text":"TOMO: m/44'/889'/0'/0","title":"I sent my TOMO to a wrong address. What do I do?"},{"location":"general/faq/#can-i-switch-from-my-existing-wallet-app-like-metamask-myetherwallet-etc","text":"You can export private key/recovery phrases from existing wallet app then import to TomoWallet.","title":"Can I switch from my existing wallet app like Metamask, MyEtherWallet, etc.?"},{"location":"general/faq/#tomox","text":"","title":"TomoX"},{"location":"general/faq/#what-is-the-difference-between-tomox-and-a-dex","text":"TomoChain's philosophy on decentralized exchanges is quite different from others. In TomoChain's design for decentralized exchanges, TomoX is the core decentralized exchange protocol, which takes in charge the order matching and execution. TomoX is integrated into the core layer of the TomoChain consensus. A decentralized exchange (DEX) in TomoChain's design for DEXs is a relayer that interacts with the underlying TomoX protocol. Typically, a relayer will send/receive trade orders to/from TomoX which processes these trade orders. TomoDEX will be the first relayer in TomoChain's decentralized exchange ecosystem. We expect TomoDex to be one of the most sophisticated Dex out there, consequently users who like the Dex experience will use TomoDex. TomoDex will be the first to list any token running on top of TomoChain together with well-known cryptocurrencies such as BTC and ETH, and have the best liquidity for new TomoChain's tokens. With TomoChain almost zero-fee, 2-second confirmation and 2'000 transactions per second, all relayers interacting with TomoX Protocol will be fully decentralized and very efficient.","title":"What is the difference between TomoX and a DeX?"},{"location":"general/faq/#what-is-a-relayer-how-can-i-set-up-one","text":"A decentralized exchange (DEX) in TomoChain's design for DEXs is a relayer that interacts with the underlying TomoX protocol. Typically, a relayer will send/receive trade orders to/from TomoX which processes these trade orders.","title":"What is a Relayer? How can I set up one?"},{"location":"general/important-links/","text":"Links \u00b6 Main website Technical Whitepaper Github Testnet \u00b6 Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO)","title":"Links"},{"location":"general/important-links/#links","text":"Main website Technical Whitepaper Github","title":"Links"},{"location":"general/important-links/#testnet","text":"Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO)","title":"Testnet"},{"location":"general/networks/","text":"Mainnet \u00b6 TomoChain, a independent public blockchain, the most efficient platform for the token economy Specifications \u00b6 Chain id: 88 RPC endpoint: https://rpc.tomochain.com Websocket endpoint: wss://ws.tomochain.com Metrics endpoint: https://metrics.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Genesis block date: December 14th, 2018 Transaction fee: gas price 0.25 Gwei Smart contract creation fee: gas price 10000 Gwei, gas limit >= 1000000 Solidity Compiler version: < 0.5 Usefull links \u00b6 Status page TomoScan (Block explorer) TomoMaster (Governance dApp) Bootnodes \u00b6 enode://97f0ca95a653e3c44d5df2674e19e9324ea4bf4d47a46b1d8560f3ed4ea328f725acec3fcfcb37eb11706cf07da669e9688b091f1543f89b2425700a68bc8876@3.212.20.0:30301 enode://b72927f349f3a27b789d0ca615ffe3526f361665b496c80e7cc19dace78bd94785fdadc270054ab727dbb172d9e3113694600dd31b2558dd77ad85a869032dea@188.166.207.189:30301 enode://c8f2f0643527d4efffb8cb10ef9b6da4310c5ac9f2e988a7f85363e81d42f1793f64a9aa127dbaff56b1e8011f90fe9ff57fa02a36f73220da5ff81d8b8df351@104.248.98.60:30301 Stats websocket secret \u00b6 getty-site-pablo-auger-room-sos-blair-shin-whiz-delhi Host: stats.tomochain.com:443 Testnet \u00b6 The Testnet network is meant to be a public demo of our products and a way for us to test new features. Specifications \u00b6 Chain id: 89 RPC endpoint: https://rpc.testnet.tomochain.com Websocket endpoint: wss://ws.testnet.tomochain.com Metrics endpoint: https://metrics.testnet.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Smart contract creation fee: gas price 10000 Gwei, gas limit >= 1000000 Solidity Compiler version: < 0.5 Usefull links \u00b6 Status page TomoScan (Block explorer) TomoMaster (Governance dApp) TomoWallet (Wallet dApp) Faucet (Free testnet TOMO) For developers \u00b6 Testnet is the best way to test your smart contracts. Configure your deployment tool (truffle for example) to connect to the testnet and deploy your new code without having to worry about fees. For investors and enthusiasts \u00b6 You will find on the Testnet the exact same ecosystem as on the actual Mainnet. You can try all the features we propose like voting, running a masternode, discovering our dApps, etc. Bootnodes \u00b6 enode://ba966140e161ad416a7bd7c75dc695e0a41232723e2b19cbbf651883ef5e8f2528801b17b9d63152814d219a58a4fcc3e3c877486e64057523f6714092348efa@195.154.150.210:30301 Stats websocket secret \u00b6 9tlu4EymcTrEzaqWpSxh3KSa926au8 Host: wss://stats.testnet.tomochain.com:443","title":"Networks"},{"location":"general/networks/#mainnet","text":"TomoChain, a independent public blockchain, the most efficient platform for the token economy","title":"Mainnet"},{"location":"general/networks/#specifications","text":"Chain id: 88 RPC endpoint: https://rpc.tomochain.com Websocket endpoint: wss://ws.tomochain.com Metrics endpoint: https://metrics.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Genesis block date: December 14th, 2018 Transaction fee: gas price 0.25 Gwei Smart contract creation fee: gas price 10000 Gwei, gas limit >= 1000000 Solidity Compiler version: < 0.5","title":"Specifications"},{"location":"general/networks/#usefull-links","text":"Status page TomoScan (Block explorer) TomoMaster (Governance dApp)","title":"Usefull links"},{"location":"general/networks/#bootnodes","text":"enode://97f0ca95a653e3c44d5df2674e19e9324ea4bf4d47a46b1d8560f3ed4ea328f725acec3fcfcb37eb11706cf07da669e9688b091f1543f89b2425700a68bc8876@3.212.20.0:30301 enode://b72927f349f3a27b789d0ca615ffe3526f361665b496c80e7cc19dace78bd94785fdadc270054ab727dbb172d9e3113694600dd31b2558dd77ad85a869032dea@188.166.207.189:30301 enode://c8f2f0643527d4efffb8cb10ef9b6da4310c5ac9f2e988a7f85363e81d42f1793f64a9aa127dbaff56b1e8011f90fe9ff57fa02a36f73220da5ff81d8b8df351@104.248.98.60:30301","title":"Bootnodes"},{"location":"general/networks/#stats-websocket-secret","text":"getty-site-pablo-auger-room-sos-blair-shin-whiz-delhi Host: stats.tomochain.com:443","title":"Stats websocket secret"},{"location":"general/networks/#testnet","text":"The Testnet network is meant to be a public demo of our products and a way for us to test new features.","title":"Testnet"},{"location":"general/networks/#specifications_1","text":"Chain id: 89 RPC endpoint: https://rpc.testnet.tomochain.com Websocket endpoint: wss://ws.testnet.tomochain.com Metrics endpoint: https://metrics.testnet.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Smart contract creation fee: gas price 10000 Gwei, gas limit >= 1000000 Solidity Compiler version: < 0.5","title":"Specifications"},{"location":"general/networks/#usefull-links_1","text":"Status page TomoScan (Block explorer) TomoMaster (Governance dApp) TomoWallet (Wallet dApp) Faucet (Free testnet TOMO)","title":"Usefull links"},{"location":"general/networks/#for-developers","text":"Testnet is the best way to test your smart contracts. Configure your deployment tool (truffle for example) to connect to the testnet and deploy your new code without having to worry about fees.","title":"For developers"},{"location":"general/networks/#for-investors-and-enthusiasts","text":"You will find on the Testnet the exact same ecosystem as on the actual Mainnet. You can try all the features we propose like voting, running a masternode, discovering our dApps, etc.","title":"For investors and enthusiasts"},{"location":"general/networks/#bootnodes_1","text":"enode://ba966140e161ad416a7bd7c75dc695e0a41232723e2b19cbbf651883ef5e8f2528801b17b9d63152814d219a58a4fcc3e3c877486e64057523f6714092348efa@195.154.150.210:30301","title":"Bootnodes"},{"location":"general/networks/#stats-websocket-secret_1","text":"9tlu4EymcTrEzaqWpSxh3KSa926au8 Host: wss://stats.testnet.tomochain.com:443","title":"Stats websocket secret"},{"location":"general/use-cases/","text":"Use Cases \u00b6 Partners willing to run applications on top of Tomochain: Social Network: replyblock.com E-commerce: binkabi.io Advertising Ecosystem: bigbom.com Robotics Ecosystem: kambria.io Open Banking: orcaalliance.eu Food Traceability: te-food.com Pharmaceutical Tracking: farmatrust.com Travel Network: triip.me Decentralized Domain Name: portal.network You can consult a more detailed list of dApps on the main Tomochain website .","title":"Use Cases"},{"location":"general/use-cases/#use-cases","text":"Partners willing to run applications on top of Tomochain: Social Network: replyblock.com E-commerce: binkabi.io Advertising Ecosystem: bigbom.com Robotics Ecosystem: kambria.io Open Banking: orcaalliance.eu Food Traceability: te-food.com Pharmaceutical Tracking: farmatrust.com Travel Network: triip.me Decentralized Domain Name: portal.network You can consult a more detailed list of dApps on the main Tomochain website .","title":"Use Cases"},{"location":"get-started/apply-node/","text":"Once your full node is up and running, you need to apply it to make it eligible as a masternode. This page shows a tutorial for beginners to run a full node. Getting sufficient TOMO \u00b6 As 50'000 TOMO are required to apply: If you plan to run your node on testnet, you need to fill out the following form : to get 50k TOMO for testnet. Loading... Our team will then review your request and send you the required funds. Note: Those testnet TOMO are only usable in testnet, they have absolutely no trading value If you plan to run your node on mainnet, you need to acquire at least 50k TOMO on exchanges that list TOMO. Please refer to this page for which exchanges listing TOMO. Applying to become a masternode \u00b6 You can now apply by going to the TomoMaster page for testnet or mainnet . Login with the wallet that contains your newly received 50'000 TOMO. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the public key of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Confirm with apply and proceed to make the payement. Your full node will now be listed on TomoMaster. People can view its details and vote for it. If your node is in the top 150 most voted nodes, it will be promoted as a masternode and will start producing blocks at the next epoch. Resigning your masternode \u00b6 In case you want to stop your node, you need to resign it from TomoMaster first in order to retrieve your locked funds. Access TomoMaster for testnet or mainnet , go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 1440 epochs (around 30 days) after the resignation. After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completly terminated.","title":"Apply your node in testnet"},{"location":"get-started/apply-node/#getting-sufficient-tomo","text":"As 50'000 TOMO are required to apply: If you plan to run your node on testnet, you need to fill out the following form : to get 50k TOMO for testnet. Loading... Our team will then review your request and send you the required funds. Note: Those testnet TOMO are only usable in testnet, they have absolutely no trading value If you plan to run your node on mainnet, you need to acquire at least 50k TOMO on exchanges that list TOMO. Please refer to this page for which exchanges listing TOMO.","title":"Getting sufficient TOMO"},{"location":"get-started/apply-node/#applying-to-become-a-masternode","text":"You can now apply by going to the TomoMaster page for testnet or mainnet . Login with the wallet that contains your newly received 50'000 TOMO. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the public key of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Confirm with apply and proceed to make the payement. Your full node will now be listed on TomoMaster. People can view its details and vote for it. If your node is in the top 150 most voted nodes, it will be promoted as a masternode and will start producing blocks at the next epoch.","title":"Applying to become a masternode"},{"location":"get-started/apply-node/#resigning-your-masternode","text":"In case you want to stop your node, you need to resign it from TomoMaster first in order to retrieve your locked funds. Access TomoMaster for testnet or mainnet , go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 1440 epochs (around 30 days) after the resignation. After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completly terminated.","title":"Resigning your masternode"},{"location":"get-started/beginner/","text":"","title":"Beginner"},{"location":"get-started/how_to_read/","text":"How to read this documentation site \u00b6 The documentation site is designed to facilitate readers in understanding what are written on the site. For voters: Voters who mainly vote for masternodes to receive rewards are encouraged to our tutorials on how to connect wallets to TomoChain and how to vote . For masternode owners: A masternode is an important entity in TomoChain's ecosystem. A TomoChain masternode is a server which uses its computing power to contribute to the network. Its job is to create and sign blocks. For this contribution to the network, masternodes receive rewards in the form of TOMO. A masternode must satisfy a minimum requirements about its computing power, RAM, and storage in order to stably maintain the network. A financial requirement of 50k TOMO is also needed to apply to become a masternode candidate. For this, masternode owners are highly recommended to carefully read our dedicated guide to running a masternode , using tmn and Docker . Also, masternode owners can follow our tutorial on TomoChain medium page and our wiki page . For developers: We highly encourage developers to contribute to the development of TomoChain ecosystem growth. For this reason, we have been building a set of developer tutorials and documentation on developing DApps to be run on TomoChain as well as to contribute to the development of TomoChain's products. This DApp tutorial shows how to deploy a smart contract on TomoChain. For developers who are curious about TomoChain's source code, this private TomoChain testnet guides you how to setup a private TomoChain testnet.","title":"How to read"},{"location":"get-started/how_to_read/#how-to-read-this-documentation-site","text":"The documentation site is designed to facilitate readers in understanding what are written on the site. For voters: Voters who mainly vote for masternodes to receive rewards are encouraged to our tutorials on how to connect wallets to TomoChain and how to vote . For masternode owners: A masternode is an important entity in TomoChain's ecosystem. A TomoChain masternode is a server which uses its computing power to contribute to the network. Its job is to create and sign blocks. For this contribution to the network, masternodes receive rewards in the form of TOMO. A masternode must satisfy a minimum requirements about its computing power, RAM, and storage in order to stably maintain the network. A financial requirement of 50k TOMO is also needed to apply to become a masternode candidate. For this, masternode owners are highly recommended to carefully read our dedicated guide to running a masternode , using tmn and Docker . Also, masternode owners can follow our tutorial on TomoChain medium page and our wiki page . For developers: We highly encourage developers to contribute to the development of TomoChain ecosystem growth. For this reason, we have been building a set of developer tutorials and documentation on developing DApps to be run on TomoChain as well as to contribute to the development of TomoChain's products. This DApp tutorial shows how to deploy a smart contract on TomoChain. For developers who are curious about TomoChain's source code, this private TomoChain testnet guides you how to setup a private TomoChain testnet.","title":"How to read this documentation site"},{"location":"get-started/overview/","text":"","title":"Overview"},{"location":"get-started/productoverview/","text":"This page will provide users with an overview of TomoChain's product map and how to read the documentation site, depending on readers' interest. Overview of TomoChain's products \u00b6 The backbone of TomoChain's products and ecosystem is the TomoChain blockchain with its innovative Proof-of-Staking Voting (PoSV) consensus. To facilitate interactions between users (including voters and masternode owners) and the TomoChain blockchain, a set of products have been built, including TomoScan, TomoMaster, TomoWallet, and our stats page. TomoChain has been also developing a decentralized exchange protocol with its relayer-based architecture. These products will be continuously improved in our long-term plan. Furthermore, more highly innovative products and technologies will be intensively developed and researched to make TomoChain become an ideal platform for blockchain games, open finance, and enterprise-oriented applications. TomoChain : TomoChain is the backbone public blockchain of TomoChain's product map. TomoScan : TomoScan provides a user friendly, details and perfection-oriented user interface for TomoChain block explorer. From a user perspective, TomoScan brings TomoChain\u2019s transparency to users, because all block, transaction, finality, smart contracts, dApp and token information are read from TomoChain and shown to users. Furthermore, TomoScan also offers technical visualisations and does useful statistics about the TomoChain performance, token holders and other functionalities. TomoMaster : The Governance dApp - TomoMaster, provides a professional UI that allows to see the list of masternodes and candidates, to deposit 50k TOMO to become a masternode candidate, to vote for masternodes, and to show masternode performance statistics. TomoWallet : Tomo Wallet is the official mobile wallet for TomoChain, aiming to store the TOMO native coin and tokens issued on TomoChain. Tomo Wallet also allows users to vote for masternodes and track rewards. TomoX : TomoX is a decentralized cryptocurrency exchange directly integrated into the core layer of the TomoChain blockchain. Decentralized exchanges called relayers built following the TomoX standard will all interact with TomoX. TomoZ : is a TomoChain on-chain protocol that allows any token holders to transfer tokens without holding TOMO in their wallet. The transaction fees will be paid in the token the user is holding. TomoIssuer : provides a friendly UI and a smart contract that allow any user to issue a TRC21 token and apply the token to the TomoZ protocol in minutes without any programming skills required.","title":"Products overview"},{"location":"get-started/productoverview/#overview-of-tomochains-products","text":"The backbone of TomoChain's products and ecosystem is the TomoChain blockchain with its innovative Proof-of-Staking Voting (PoSV) consensus. To facilitate interactions between users (including voters and masternode owners) and the TomoChain blockchain, a set of products have been built, including TomoScan, TomoMaster, TomoWallet, and our stats page. TomoChain has been also developing a decentralized exchange protocol with its relayer-based architecture. These products will be continuously improved in our long-term plan. Furthermore, more highly innovative products and technologies will be intensively developed and researched to make TomoChain become an ideal platform for blockchain games, open finance, and enterprise-oriented applications. TomoChain : TomoChain is the backbone public blockchain of TomoChain's product map. TomoScan : TomoScan provides a user friendly, details and perfection-oriented user interface for TomoChain block explorer. From a user perspective, TomoScan brings TomoChain\u2019s transparency to users, because all block, transaction, finality, smart contracts, dApp and token information are read from TomoChain and shown to users. Furthermore, TomoScan also offers technical visualisations and does useful statistics about the TomoChain performance, token holders and other functionalities. TomoMaster : The Governance dApp - TomoMaster, provides a professional UI that allows to see the list of masternodes and candidates, to deposit 50k TOMO to become a masternode candidate, to vote for masternodes, and to show masternode performance statistics. TomoWallet : Tomo Wallet is the official mobile wallet for TomoChain, aiming to store the TOMO native coin and tokens issued on TomoChain. Tomo Wallet also allows users to vote for masternodes and track rewards. TomoX : TomoX is a decentralized cryptocurrency exchange directly integrated into the core layer of the TomoChain blockchain. Decentralized exchanges called relayers built following the TomoX standard will all interact with TomoX. TomoZ : is a TomoChain on-chain protocol that allows any token holders to transfer tokens without holding TOMO in their wallet. The transaction fees will be paid in the token the user is holding. TomoIssuer : provides a friendly UI and a smart contract that allow any user to issue a TRC21 token and apply the token to the TomoZ protocol in minutes without any programming skills required.","title":"Overview of TomoChain's products"},{"location":"get-started/run-node/","text":"This tutorial shows you how to run a full node and meet the requirements to apply to becoming a masternode candidate on TomoMaster, you have to run the TomoChain client , which is our TomoChain implementation written in Go . General hardware notice \u00b6 The TomoChain team has extensively tested performances and come up with those minimal requirements for any TomoChain masternode host. Testnet Must be facing internet directly (no NAT, public IP) Must have at least 2 cores Must have at least 8GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.). Storage must be SSD Mainnet Must be facing internet directly (no NAT, public IP) Must have at least 16 cores Must have at least 32GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.) Storage must be SSD We recommand prioritizing CPU. For example with Digital Ocean, pick a CPU optimized droplet. On AWS EC2, an C5 type instance would be a perfect match. The full node will serve on port 30303 udp and tcp for p2p communication with other nodes, 8545 tcp for RPC api and 8546 tcp for websocket api. You may need to edit your firewall configuration accordingly. If you have other production grade environment than cloud provider at your displosal, please tell us more about on our Gitter . tmn \u00b6 We made a simple command line interface called tmn to easily and quickly start a TomoChain full node. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your full node running in a few minutes! Prerequisites \u00b6 To use tmn, you should meet these requirements in addition to the hardware ones: Docker CE Python >= 3.5 Installation \u00b6 Simply install it from pip. pip3 install --user tmn Update \u00b6 Update it from pip. pip3 install -U tmn First start \u00b6 When you first start your full node with tmn, you need to give some informations. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: we advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] \\ --net testnet \\ --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the testnet stats page or the mainnet stats page , depending on which net you are connecting to! Note: it can take up to one hour or more (depending on the blockchain data size) to properly sync the entire blockchain. Usage \u00b6 You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data. Troubleshooting \u00b6 tmn: command not found \u00b6 It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:~/Library/Python/[VERSION]/bin' >> ~/.bashrc error: could not access the docker daemon \u00b6 If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"Run a full node in testnet"},{"location":"get-started/run-node/#general-hardware-notice","text":"The TomoChain team has extensively tested performances and come up with those minimal requirements for any TomoChain masternode host. Testnet Must be facing internet directly (no NAT, public IP) Must have at least 2 cores Must have at least 8GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.). Storage must be SSD Mainnet Must be facing internet directly (no NAT, public IP) Must have at least 16 cores Must have at least 32GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.) Storage must be SSD We recommand prioritizing CPU. For example with Digital Ocean, pick a CPU optimized droplet. On AWS EC2, an C5 type instance would be a perfect match. The full node will serve on port 30303 udp and tcp for p2p communication with other nodes, 8545 tcp for RPC api and 8546 tcp for websocket api. You may need to edit your firewall configuration accordingly. If you have other production grade environment than cloud provider at your displosal, please tell us more about on our Gitter .","title":"General hardware notice"},{"location":"get-started/run-node/#tmn","text":"We made a simple command line interface called tmn to easily and quickly start a TomoChain full node. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your full node running in a few minutes!","title":"tmn"},{"location":"get-started/run-node/#prerequisites","text":"To use tmn, you should meet these requirements in addition to the hardware ones: Docker CE Python >= 3.5","title":"Prerequisites"},{"location":"get-started/run-node/#installation","text":"Simply install it from pip. pip3 install --user tmn","title":"Installation"},{"location":"get-started/run-node/#update","text":"Update it from pip. pip3 install -U tmn","title":"Update"},{"location":"get-started/run-node/#first-start","text":"When you first start your full node with tmn, you need to give some informations. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: we advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] \\ --net testnet \\ --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the testnet stats page or the mainnet stats page , depending on which net you are connecting to! Note: it can take up to one hour or more (depending on the blockchain data size) to properly sync the entire blockchain.","title":"First start"},{"location":"get-started/run-node/#usage","text":"You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data.","title":"Usage"},{"location":"get-started/run-node/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"get-started/run-node/#tmn-command-not-found","text":"It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:~/Library/Python/[VERSION]/bin' >> ~/.bashrc","title":"tmn: command not found"},{"location":"get-started/run-node/#error-could-not-access-the-docker-daemon","text":"If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"error: could not access the docker daemon"},{"location":"get-started/voting/","text":"Prerequisites \u00b6 Have a wallet connected to the Testnet (See this tutorial ) Introduction \u00b6 With a connected wallet, it's not time to try voting for some masternodes. Get some TOMO \u00b6 Info Testnet TOMO are only used for experimenting with the testnet. They have no value in the main blockchain and not market value. Using TomoWallet \u00b6 TomoWallet provides a function named Earn TOMO to test . It allows you to get 15 TOMO on the Testnet. Just click on it and you will see your balance go up. Note You can use this function only once. You then have to use the faucet for any extra Testnet TOMO needed. Using any wallets \u00b6 We also have a service called \"Faucet\" which allows you to get 15 TOMO at a time. Access the faucet site at: faucet.testnet.tomochain.com Enter your wallet address in the field and tick the I'm not a robot box. Click REQUEST 15 TOMO and Wait for some seconds for the transaction to be confirmed. You will receive a success confirmation message and the amount of TOMO in your wallet should be updated. You can check your TOMO balance by either looking at your wallet or using TomoScan . How To Vote \u00b6 Now you have some TOMO. You can access our governance dApp, TomoMaster , to start voting for masternodes. TomoMaster natively supports Metamask. You can also access your account page (the vertical three dots on the top right) to fill in your wallet Private Key or MNEMONIC (see image below). If you use Metamask, you need to connect Mettamask to our testnet (please see the \"Create a wallet\" section) and choose Metamask in the drop-down settings list. Once configured, you can vote for masternodes by clicking on the Vote button. At least 100 TOMO is required per vote. After clicking submit, your TOMO will be sent to the voting smart contract and locked there. Reward \u00b6 Every epoch (~30 minutes), you will automatically receive rewards for each masternode you voted for. How to Unvote \u00b6 If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. After unvoting, your TOMO is still locked in the smart contract for 48 hours before you are able to withdraw. How to Withdraw \u00b6 For withdrawals after unvoting, you need to wait until your TOMO is unlocked from the smart contract. Then you can click the withdraw button in your account page (the vertical three dots on the top right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously. If you withdraw before the unlock period expires, an error will be raised.","title":"Voting"},{"location":"get-started/voting/#prerequisites","text":"Have a wallet connected to the Testnet (See this tutorial )","title":"Prerequisites"},{"location":"get-started/voting/#introduction","text":"With a connected wallet, it's not time to try voting for some masternodes.","title":"Introduction"},{"location":"get-started/voting/#get-some-tomo","text":"Info Testnet TOMO are only used for experimenting with the testnet. They have no value in the main blockchain and not market value.","title":"Get some TOMO"},{"location":"get-started/voting/#using-tomowallet","text":"TomoWallet provides a function named Earn TOMO to test . It allows you to get 15 TOMO on the Testnet. Just click on it and you will see your balance go up. Note You can use this function only once. You then have to use the faucet for any extra Testnet TOMO needed.","title":"Using TomoWallet"},{"location":"get-started/voting/#using-any-wallets","text":"We also have a service called \"Faucet\" which allows you to get 15 TOMO at a time. Access the faucet site at: faucet.testnet.tomochain.com Enter your wallet address in the field and tick the I'm not a robot box. Click REQUEST 15 TOMO and Wait for some seconds for the transaction to be confirmed. You will receive a success confirmation message and the amount of TOMO in your wallet should be updated. You can check your TOMO balance by either looking at your wallet or using TomoScan .","title":"Using any wallets"},{"location":"get-started/voting/#how-to-vote","text":"Now you have some TOMO. You can access our governance dApp, TomoMaster , to start voting for masternodes. TomoMaster natively supports Metamask. You can also access your account page (the vertical three dots on the top right) to fill in your wallet Private Key or MNEMONIC (see image below). If you use Metamask, you need to connect Mettamask to our testnet (please see the \"Create a wallet\" section) and choose Metamask in the drop-down settings list. Once configured, you can vote for masternodes by clicking on the Vote button. At least 100 TOMO is required per vote. After clicking submit, your TOMO will be sent to the voting smart contract and locked there.","title":"How To Vote"},{"location":"get-started/voting/#reward","text":"Every epoch (~30 minutes), you will automatically receive rewards for each masternode you voted for.","title":"Reward"},{"location":"get-started/voting/#how-to-unvote","text":"If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. After unvoting, your TOMO is still locked in the smart contract for 48 hours before you are able to withdraw.","title":"How to Unvote"},{"location":"get-started/voting/#how-to-withdraw","text":"For withdrawals after unvoting, you need to wait until your TOMO is unlocked from the smart contract. Then you can click the withdraw button in your account page (the vertical three dots on the top right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously. If you withdraw before the unlock period expires, an error will be raised.","title":"How to Withdraw"},{"location":"get-started/wallet/","text":"TomoWallet \u00b6 Download TomoWallet from Apple Store or Google Play . You can create a new wallet, import an existing wallet, stake for Masternodes and transfer/receive TOMO back and forth. Note: Under Settings you can Choose Network: TomoChain (Mainnet) or TomoChain Testnet (Testnet). TomoWallet also has Web Application. It allows you to create a new wallet or unlock your wallet with Private Key, Seed Phrase, Harware Wallet, Metamask. Mainnet: https://wallet.tomochain.com Testnet: https://wallet.testnet.tomochain.com Metamask \u00b6 TomoChain will guide you how to connect MetaMask to TomoChain Mainnet. It is an essential step to study an overview of TomoChain features in term of meeting the crypto trading needs on system. Get started! You first need to install MetaMask Extension on Chrome or Brave browsers. Once you agree to the Metamask Terms of Use and create an account successfully, follow instructions: Step 1: Click MetaMask logo on the browser to open the Extension -> select Network -> select Custom RPC as shown below: Step 2: When Settings screen pops up, scroll down to New Network and click Show Advanced Options . Enter the following information, then Save: Mainnet Testnet New RPC URL https://rpc.tomochain.com https://rpc.testnet.tomochain.com ChainID 88 89 Symbol TOMO TOMO Nickname TomoChain TomoChain Testnet Block Explorer URL https://scan.tomochain.com https://scan.testnet.tomochain.com Set Privacy Mode On, if you want to connect Metamask with your hardware wallet (Trezor, Ledger Nano S). Step 3: You are successfully connected to TomoChain Mainnet. MyEtherWallet \u00b6 TomoChain is now supported by MyEtherWallet . In order to connect your MyEtherWallet wallet to TomoChain, all you need to do is to choose Network TOMO in the dropdown network list at top right corner. TrustWallet \u00b6 Step 1: Open Trust Wallet then go to Settings > Wallets > and tap on the plus sign in the top right corner to import a new wallet. Step 2: Tap on Import Wallet and select TomoChain on the next screen Step 3: Tap on Private Key and enter your Private key. Tap one last time on Import to complete the recovery.","title":"Connect your wallet"},{"location":"get-started/wallet/#tomowallet","text":"Download TomoWallet from Apple Store or Google Play . You can create a new wallet, import an existing wallet, stake for Masternodes and transfer/receive TOMO back and forth. Note: Under Settings you can Choose Network: TomoChain (Mainnet) or TomoChain Testnet (Testnet). TomoWallet also has Web Application. It allows you to create a new wallet or unlock your wallet with Private Key, Seed Phrase, Harware Wallet, Metamask. Mainnet: https://wallet.tomochain.com Testnet: https://wallet.testnet.tomochain.com","title":"TomoWallet"},{"location":"get-started/wallet/#metamask","text":"TomoChain will guide you how to connect MetaMask to TomoChain Mainnet. It is an essential step to study an overview of TomoChain features in term of meeting the crypto trading needs on system. Get started! You first need to install MetaMask Extension on Chrome or Brave browsers. Once you agree to the Metamask Terms of Use and create an account successfully, follow instructions: Step 1: Click MetaMask logo on the browser to open the Extension -> select Network -> select Custom RPC as shown below: Step 2: When Settings screen pops up, scroll down to New Network and click Show Advanced Options . Enter the following information, then Save: Mainnet Testnet New RPC URL https://rpc.tomochain.com https://rpc.testnet.tomochain.com ChainID 88 89 Symbol TOMO TOMO Nickname TomoChain TomoChain Testnet Block Explorer URL https://scan.tomochain.com https://scan.testnet.tomochain.com Set Privacy Mode On, if you want to connect Metamask with your hardware wallet (Trezor, Ledger Nano S). Step 3: You are successfully connected to TomoChain Mainnet.","title":"Metamask"},{"location":"get-started/wallet/#myetherwallet","text":"TomoChain is now supported by MyEtherWallet . In order to connect your MyEtherWallet wallet to TomoChain, all you need to do is to choose Network TOMO in the dropdown network list at top right corner.","title":"MyEtherWallet"},{"location":"get-started/wallet/#trustwallet","text":"Step 1: Open Trust Wallet then go to Settings > Wallets > and tap on the plus sign in the top right corner to import a new wallet. Step 2: Tap on Import Wallet and select TomoChain on the next screen Step 3: Tap on Private Key and enter your Private key. Tap one last time on Import to complete the recovery.","title":"TrustWallet"},{"location":"legal/privacy/","text":"This Privacy Policy is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Services (defined below) (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d) This Policy (together with our Terms of Use) explains and sets out the basis for why and when we collect personal information about the people who use our Service(s), how we use it, the conditions under which we may disclose it to others and the measures we take to keep it secure. By using our Services, you are accepting and consenting to the practices described in this policy. Please note that this includes consenting to the collection and processing of any personal information you provide, as described below. We may amend this Policy from time to time so please check it occasionally to ensure that you agree with any changes. Your continued use of our Services will constitute your acceptance of, and agreement to, any changes. INTRODUCTION \u00b6 The Company values privacy and we make a concerted effort to minimize and, to the extent possible, eliminate the exposure of personal data during the use of our interface. TomoChain does not collect, hold, or store keys, account information, or passwords. To the extent we collect any personal information, this privacy policy (\u201cPolicy\u201d) describes how the Company collects, uses, and shares personal information of people who use our websites (the \u201cSite\u201d), TomoWallet, TomoScan, TomoMaster, TomoIssuer, TomoRelayer, TomoStats, TomoBridge and our other products (collectively, the \u201cServices\u201d). This Policy applies to anyone who accesses the Services. Please read the Policy carefully to understand our practices regarding your information and how we will treat it. By visiting the Site, App, and/or using the Services, you acknowledge that the collection, use, and sharing of your information will take place as described in this Policy. So that we are clear about the terminology we are using, when we use the phrase \u201cPersonal Information\u201d in this Privacy Policy, we mean information about an individual that (either by itself or when combined with information from other available sources) allows that individual to be identified, including but not limited , the individual\u2019s name, telephone number, or e-mail address. THE BLOCKCHAIN \u00b6 Due to the inherent transparency of many blockchains, including the TomoChain Blockchain, transactions that individuals broadcast via TomoChain may be publicly accessible. This includes, but is not limited to, your public sending address, the public address of the receiver, the amount sent or received, and any other data a user has chosen to include in a given transaction. Information stored on a blockchain may be public, immutable, and difficult or even impossible to remove or delete. Transactions and addresses may reveal information about the user\u2019s identity and information can potentially be correlated now or in the future by any party who chooses to do so, including law enforcement. Users are encouraged to review how privacy and transparency on the blockchain works. HOW WE COLLECT INFORMATION \u00b6 We obtain information about you when you use our website, when you contact us via email or a web form or if you register to receive one of our regular newsletters. We may collect and process the following types of information about you: Information you provide us You may provide us with personal information by filling in forms on our website(s) or by corresponding with us by e-mail or live-chat. The personal information you provide may include your name, email, address, phone number, IP address, language preference and information regarding the pages you access. By providing us with this information, you expressly consent to our use of your personal information in accordance with this privacy policy. Information we collect about you When you use our Services we may collect information about your IP address, information about your visit, your browsing activity, and how you use our Services. This information may be combined with other information you provide. Information we receive from other sources We may receive information about you if you use any other Services we, or our partners, operate. We also work with third parties (including, contractors, project partners, service providers, analytics providers) and may receive information about you from them. This may be combined with other information you provide to use collect information about you as described below. We use this information to enhance your experience with our Services. The Company does not track users over time and across third party websites to provide targeted advertising and therefore does not respond to Do Not Track (DNT) signals. USE OF INFORMATION \u00b6 We use the information that we have about you to provide support and certain Services to you. We may use the Personal Information we collect from and about you to (1) provide you with information or services that you request from us, including to respond to your comments, questions, and/or provide customer service; (2) monitor and analyze usage and trends and personalize and improve the Services and your experience using the Services; and (3) for any other purpose with your consent. We review our retention periods for personal information on a regular basis. We will hold your personal information on our systems for as long as is necessary for the relevant activity SHARING OF PERSONAL INFORMATION \u00b6 We will not disclose your Personal Information other than as described below, and we do not and will not sell your Personal Information to anyone. We may share the Personal Information we collect from and about you (1) to fulfill the purpose for which you provided it; (2) with your consent; (3) for legal, protection, and safety purposes; (4) to comply with any court order, law, or legal process, including to respond to any government or regulatory request; (5) to protect the rights of the Company, our agents, customers, and others, including by enforcing our agreements, policies, and terms of service; and (6) with those who need it to do work for us (our Service Providers, as defined below). Service providers: We may contract with third parties to perform functions related to the Services (\u201cService Providers\u201d). In general, Service Providers will have access to your Personal Information only to the extent needed to perform their business functions but may not use or share that personal information for purposes outside the scope of their functions related to the Services. LINKS TO OTHER SITES \u00b6 The Services contain links to other third-party websites or applications. Once you click on such a link and leave the Site or are redirected to a third-party website or application, you are no longer governed by this Policy. Any information you provide on those sites is subject to that third party\u2019s privacy policy and we are not responsible for the privacy and security practices and policies of those third-party sites or applications. OUR COMMITMENT TOWARDS CHILDREN'S PRIVACY \u00b6 We do not direct the Services to, nor do we knowingly collect any Personal Information from children under 13. Children under 13 are not eligible to use the Services. If we learn that someone using our Services is under 13 years of age, we will take steps to remove any Personal Information from our database and to prevent them from utilizing the Services. SECURITY OF YOUR PERSONAL INFORMATION & RIGHTS \u00b6 We are committed to protecting the security of Personal Information. We have taken certain physical, administrative, and technical steps to help safeguard the information we collect from and about you. While we take steps to help ensure the integrity and security of our network and systems, we cannot guarantee our security measures. In certain circumstances, you will also have the following rights: Right to access: the right to request certain information about, access to and copies of any Personal Information about you that we are holding (please note that you are entitled to request one copy of the Personal Information that we hold about you at no cost, but for any further copies, we reserve the right to charge a reasonable fee based on administration costs); Right to rectification: the right to have your Personal Information rectified if it is inaccurate or incomplete; Right to erasure/\u201cright to be forgotten\u201d: where the processing of your information is based on your consent, the right to withdraw that consent and the right to request that we delete or erase your Personal Information from our systems (however, this will not apply if we are required to hold on to the information for compliance with any legal obligation, or if we require the information to establish or defend any legal claim); Right to restriction of use of your information: the right to stop us from using your Personal Information or limit the way in which we can use it; Right to data portability: the right to request that we return any information you have provided in a structured, commonly used, and machine-readable format, or that we send it directly to another company, where technically feasible; and Right to object: the right to object to our use of your Personal Information including where we use it for our legitimate interests. Requests in relation to the above rights should be sent to: admin@tomochain.com Legal Basis for Processing The following legal bases apply to the ways in which we use and share an individual\u2019s Personal Information: We rely on an individual\u2019s consent to process Personal Information to provide support and/or carry out Promotions. This consent can be withdrawn at any time. We also process the information provided by an individual in our legitimate interests in ensuring our business is conducted legitimately and to a high standard. We will retain the information you provide in order to process your request, provide support, and/or carry out and fulfill our Promotions. If you request support, we will retain your information for no longer than six (6) months. If you participate in a Promotion, we will retain your information until the Promotion is carried out and ninety (90) days after any prize, reward, or offer is fulfilled. Your Personal Information will then be deleted. CONTACT INFORMATION \u00b6 Any questions regarding this policy and our privacy practices should be sent by email to admin@tomochain.com or by writing TomoChain Pte., Ltd at 10 Anson Road #22-15 International Plaza, Singapore 079903. CHANGES TO PRIVACY POLICY \u00b6 We may modify this Policy from time to time. We also may provide additional notice, as applicable, depending on the type of change. If you object to any changes, you may stop using the Services. Your continued use of the Services after we publish or otherwise provide notice about our changes to the Policy means that you are consenting to the updated Policy. We keep this Policy under regular review. This Policy was last updated in February 27, 2020","title":"Privacy Policy"},{"location":"legal/privacy/#introduction","text":"The Company values privacy and we make a concerted effort to minimize and, to the extent possible, eliminate the exposure of personal data during the use of our interface. TomoChain does not collect, hold, or store keys, account information, or passwords. To the extent we collect any personal information, this privacy policy (\u201cPolicy\u201d) describes how the Company collects, uses, and shares personal information of people who use our websites (the \u201cSite\u201d), TomoWallet, TomoScan, TomoMaster, TomoIssuer, TomoRelayer, TomoStats, TomoBridge and our other products (collectively, the \u201cServices\u201d). This Policy applies to anyone who accesses the Services. Please read the Policy carefully to understand our practices regarding your information and how we will treat it. By visiting the Site, App, and/or using the Services, you acknowledge that the collection, use, and sharing of your information will take place as described in this Policy. So that we are clear about the terminology we are using, when we use the phrase \u201cPersonal Information\u201d in this Privacy Policy, we mean information about an individual that (either by itself or when combined with information from other available sources) allows that individual to be identified, including but not limited , the individual\u2019s name, telephone number, or e-mail address.","title":"INTRODUCTION"},{"location":"legal/privacy/#the-blockchain","text":"Due to the inherent transparency of many blockchains, including the TomoChain Blockchain, transactions that individuals broadcast via TomoChain may be publicly accessible. This includes, but is not limited to, your public sending address, the public address of the receiver, the amount sent or received, and any other data a user has chosen to include in a given transaction. Information stored on a blockchain may be public, immutable, and difficult or even impossible to remove or delete. Transactions and addresses may reveal information about the user\u2019s identity and information can potentially be correlated now or in the future by any party who chooses to do so, including law enforcement. Users are encouraged to review how privacy and transparency on the blockchain works.","title":"THE BLOCKCHAIN"},{"location":"legal/privacy/#how-we-collect-information","text":"We obtain information about you when you use our website, when you contact us via email or a web form or if you register to receive one of our regular newsletters. We may collect and process the following types of information about you: Information you provide us You may provide us with personal information by filling in forms on our website(s) or by corresponding with us by e-mail or live-chat. The personal information you provide may include your name, email, address, phone number, IP address, language preference and information regarding the pages you access. By providing us with this information, you expressly consent to our use of your personal information in accordance with this privacy policy. Information we collect about you When you use our Services we may collect information about your IP address, information about your visit, your browsing activity, and how you use our Services. This information may be combined with other information you provide. Information we receive from other sources We may receive information about you if you use any other Services we, or our partners, operate. We also work with third parties (including, contractors, project partners, service providers, analytics providers) and may receive information about you from them. This may be combined with other information you provide to use collect information about you as described below. We use this information to enhance your experience with our Services. The Company does not track users over time and across third party websites to provide targeted advertising and therefore does not respond to Do Not Track (DNT) signals.","title":"HOW WE COLLECT INFORMATION"},{"location":"legal/privacy/#use-of-information","text":"We use the information that we have about you to provide support and certain Services to you. We may use the Personal Information we collect from and about you to (1) provide you with information or services that you request from us, including to respond to your comments, questions, and/or provide customer service; (2) monitor and analyze usage and trends and personalize and improve the Services and your experience using the Services; and (3) for any other purpose with your consent. We review our retention periods for personal information on a regular basis. We will hold your personal information on our systems for as long as is necessary for the relevant activity","title":"USE OF INFORMATION"},{"location":"legal/privacy/#sharing-of-personal-information","text":"We will not disclose your Personal Information other than as described below, and we do not and will not sell your Personal Information to anyone. We may share the Personal Information we collect from and about you (1) to fulfill the purpose for which you provided it; (2) with your consent; (3) for legal, protection, and safety purposes; (4) to comply with any court order, law, or legal process, including to respond to any government or regulatory request; (5) to protect the rights of the Company, our agents, customers, and others, including by enforcing our agreements, policies, and terms of service; and (6) with those who need it to do work for us (our Service Providers, as defined below). Service providers: We may contract with third parties to perform functions related to the Services (\u201cService Providers\u201d). In general, Service Providers will have access to your Personal Information only to the extent needed to perform their business functions but may not use or share that personal information for purposes outside the scope of their functions related to the Services.","title":"SHARING OF PERSONAL INFORMATION"},{"location":"legal/privacy/#links-to-other-sites","text":"The Services contain links to other third-party websites or applications. Once you click on such a link and leave the Site or are redirected to a third-party website or application, you are no longer governed by this Policy. Any information you provide on those sites is subject to that third party\u2019s privacy policy and we are not responsible for the privacy and security practices and policies of those third-party sites or applications.","title":"LINKS TO OTHER SITES"},{"location":"legal/privacy/#our-commitment-towards-childrens-privacy","text":"We do not direct the Services to, nor do we knowingly collect any Personal Information from children under 13. Children under 13 are not eligible to use the Services. If we learn that someone using our Services is under 13 years of age, we will take steps to remove any Personal Information from our database and to prevent them from utilizing the Services.","title":"OUR COMMITMENT TOWARDS CHILDREN'S PRIVACY"},{"location":"legal/privacy/#security-of-your-personal-information-rights","text":"We are committed to protecting the security of Personal Information. We have taken certain physical, administrative, and technical steps to help safeguard the information we collect from and about you. While we take steps to help ensure the integrity and security of our network and systems, we cannot guarantee our security measures. In certain circumstances, you will also have the following rights: Right to access: the right to request certain information about, access to and copies of any Personal Information about you that we are holding (please note that you are entitled to request one copy of the Personal Information that we hold about you at no cost, but for any further copies, we reserve the right to charge a reasonable fee based on administration costs); Right to rectification: the right to have your Personal Information rectified if it is inaccurate or incomplete; Right to erasure/\u201cright to be forgotten\u201d: where the processing of your information is based on your consent, the right to withdraw that consent and the right to request that we delete or erase your Personal Information from our systems (however, this will not apply if we are required to hold on to the information for compliance with any legal obligation, or if we require the information to establish or defend any legal claim); Right to restriction of use of your information: the right to stop us from using your Personal Information or limit the way in which we can use it; Right to data portability: the right to request that we return any information you have provided in a structured, commonly used, and machine-readable format, or that we send it directly to another company, where technically feasible; and Right to object: the right to object to our use of your Personal Information including where we use it for our legitimate interests. Requests in relation to the above rights should be sent to: admin@tomochain.com Legal Basis for Processing The following legal bases apply to the ways in which we use and share an individual\u2019s Personal Information: We rely on an individual\u2019s consent to process Personal Information to provide support and/or carry out Promotions. This consent can be withdrawn at any time. We also process the information provided by an individual in our legitimate interests in ensuring our business is conducted legitimately and to a high standard. We will retain the information you provide in order to process your request, provide support, and/or carry out and fulfill our Promotions. If you request support, we will retain your information for no longer than six (6) months. If you participate in a Promotion, we will retain your information until the Promotion is carried out and ninety (90) days after any prize, reward, or offer is fulfilled. Your Personal Information will then be deleted.","title":"SECURITY OF YOUR PERSONAL INFORMATION &amp; RIGHTS"},{"location":"legal/privacy/#contact-information","text":"Any questions regarding this policy and our privacy practices should be sent by email to admin@tomochain.com or by writing TomoChain Pte., Ltd at 10 Anson Road #22-15 International Plaza, Singapore 079903.","title":"CONTACT INFORMATION"},{"location":"legal/privacy/#changes-to-privacy-policy","text":"We may modify this Policy from time to time. We also may provide additional notice, as applicable, depending on the type of change. If you object to any changes, you may stop using the Services. Your continued use of the Services after we publish or otherwise provide notice about our changes to the Policy means that you are consenting to the updated Policy. We keep this Policy under regular review. This Policy was last updated in February 27, 2020","title":"CHANGES TO PRIVACY POLICY"},{"location":"legal/terms-of-use/","text":"Note PLEASE READ CAREFULLY THESE TERMS AND CONDITIONS AS THEY AFFECT YOUR OBLIGATIONS AND LEGAL RIGHTS, INCLUDING, BUT NOT LIMITED TO LIMITATION OF LIABILITY. IF YOU DO NOT AGREE WITH THESE TERMS AND CONDITIONS DO NOT USE OUR SERVICES AGREEMENT \u00b6 This Terms of Use is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Services (defined below) (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using our Services or any part of it, you accept and agree to be bound by the Terms of Use, the Privacy Policy, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. Please read the Privacy Policy to find out how we collect, use, disclose, process and protect your personal data. If you do not agree to these Terms, you should stop accessing or using our Services immediately. In these Terms, the \u201cServices\u201d means the application owned and operated by the Company including: our websites (the \u201cSite\u201d), TomoWallet, TomoScan, TomoMaster, TomoIssuer, TomoRelayer, TomoStats, TomoBridge and our other products. The \u201cCryptocurrency(ies)\u201d means a digital currency, also referred to as a token, in which encryption techniques are used to regulate the generation of units of the currency and to verify the transfer of the currency and which operates independently of the central bank of a country. Such digital currency is not legal tender issued by any central bank nor does it confer any interest in the ownership of, or debt relating to, any asset or property. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason. ELIGIBILITY \u00b6 To be eligible to use the Company's Services, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using our Services, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use our Services, however, and we reserve the right to change our eligibility criteria at any time. RESTRICTIONS OF USING OUR SERVICES \u00b6 As a user of the Services, we grant you a limited, personal, non-commercial, non-exclusive, non-transferable, and revocable license to use our Services. When using our Services, we ask that you follow some basic rules: DO NOT Use Our Services to Break the Law. You agree that you will not violate any laws when using our Services. This includes any local, provincial, state, federal, national, or international laws that may apply to you. You agree that you will not use our Services to pay for, support, or otherwise engage in any illegal activities including, but not limited to, illegal gambling, fraud, money laundering, or terrorist activities. If we discover that you have violated this Agreement or other regulatory requirements by participating in money laundering or by financing terrorist activities, we will take proportional disciplinary action. You further agree not to encourage or induce any third party to engage in any of the activities prohibited under this Section. DO NOT Interfere With Other\u2019s Use of the Services. You agree that you will not use or attempt to use another user\u2019s Wallet without authorization or use our Services in any manner that could interfere, disrupt, negatively affect, or inhibit other users from fully enjoying it. DO NOT Try to Harm Our System. You agree not to distribute any virus or other harmful computer code through our Services. You also agree to not take any action that may impose an unreasonable or disproportionately large load on our or any of our third party providers\u2019 infrastructure. DO NOT Attempt to Circumvent Our Security. You agree not to bypass, circumvent, or attempt to bypass or circumvent any measures that we may use to prevent or restrict access to the Services including, without limitation, other accounts, computer systems, or networks connected to the Services. Any use of our Services other than as specifically authorized in this Agreement, without our prior written permission, is strictly prohibited and will terminate your license to use our Services. LIMITATION & DISCLAIMER \u00b6 \u00b6 Wallet Address, Private Key, and Backup Capabilities. The private key is connected to the Wallet address and, together, they can be used to authorize the transfer of Cryptocurrencies to and from that Wallet address. You are solely responsible for maintaining the security of your private key and any mnemonic (backup) phrase associated with your Wallet. You must keep your Wallet address, mnemonic (backup) phrase, and private key access information secure. Failure to do so may result in the loss of control of Cryptocurrencies associated with the Wallet. The Company Cannot Assist With Password Retrieval. Our Services may store your Wallet address but does not receive or store your Wallet password, encrypted private key, unencrypted private key, or mnemonic (backup) phrase associated with your Wallet. We cannot, therefore, assist you with Wallet password retrieval. We cannot generate a new password for your Wallet if you fail to remember your original password. If you have not safely stored a backup of any Wallet address and private key pairs maintained in your Wallet, you accept and acknowledge that any Cryptocurrencies you have associated with such a Wallet address will become inaccessible if you do not have your Wallet password. Cryptocurrencies Transactions. In order to be completed, all proposed Cryptocurrencies transactions must be confirmed and recorded in the Cryptocurrencies of associated public blockchain. By using our Services, you acknowledge and agree that the transaction details you submit may not be completed, or may be substantially delayed, by the TomoChain Networks. Once transaction details have been submitted via the Services, we cannot assist you to cancel or otherwise modify your transaction. You must ensure that you have an adequate balance in your Wallet and/or gas to complete transactions before initiating a transaction. You acknowledge and agree that we will not be liable for any failed transactions due to insufficient funds or gas associated with your account. No Control and No Duty over risks Any fee that you might pay while using the Services is not a remuneration of the Company for the Services. This fee is to pay for Masternodes who produces the block to maintain the TomoChain blockchain. The Company provides you with the Services but you are the only person who is liable for any losses, damages, claims related to the use of the Services. The Company assumes no responsibility or liability related to TomoChain's Services. You understand and agree that the Company have no control over, and no duty to take any action regarding: Failures, disruptions, errors, or delays in processing Cryptocurrencies that you may experience while using the Services; The risk of failure of hardware, software, and Internet connections; The risk of malicious software being introduced or found in the software underlying our Services; The risk that third parties may obtain unauthorized access to information stored within your Wallet, including, but not limited to your Wallet address, private key, and mnemonic (backup) phrase; and The risk of unknown vulnerabilities in or unanticipated changes to the TomoChain Networks. Disasters. Disasters may damage the Cryptocurrencies systems resulting in loss of Cryptocurrencies held by users. Mistakes made by the user of any cryptocurrency-related software or service, e.g., forgotten passwords, and payments sent to wrong coin addresses. Software problems of TomoChain's and/or any cryptocurrency-related software or service, e.g., corrupted wallet file, incorrectly constructed transactions, unsafe cryptographic libraries, malware affecting the wallet and/or any cryptocurrency-related software or service Technical failures in the hardware of the user of any cryptocurrency-related software or service, e.g., data loss due to a faulty or damaged storage device Security problems experienced by the user of any cryptocurrency-related software or service, e.g., unauthorized access to users' wallets and/or accounts Actions or inactions of third parties and/or events experienced by third parties, e.g., bankruptcy of service providers, information security attacks on service providers, and fraud conducted by third parties. There is considerable exposure to risk in any crypto-currency exchange transaction. Any transaction involving currencies involves risks including, but not limited to, the potential for changing economic conditions that may substantially affect the price or liquidity of a currency. Investments in crypto-currency exchange speculation may also be susceptible to sharp rises and falls as the relevant market values fluctuate. It is for this reason that when speculating in such markets it is advisable to use only risk capital. ACCURACY OF MATERIALS \u00b6 The materials appearing on our Services could include technical, typographical, or photographic errors. The Company does not warrant that any of the materials on its Services are accurate, complete or current. The Company may make changes to the materials contained on its Services at any time without notice. However the Company does not make any commitment to update the materials. COMPLIANCE WITH TAX OBLIGATIONS \u00b6 The users of our Services are solely responsible to determinate what, if any, taxes apply to their crypto-currency transactions. The owners of, or contributors to, our Services are NOT responsible for determining the taxes that apply to crypto-currency transactions. ARBITRATION \u00b6 The user of our Services agrees to arbitrate any dispute arising from or in connection with the service or this disclaimer, except for disputes related to copyrights, logos, trademarks, trade names, trade secrets or patents. LAST AMENDMENT \u00b6 This Terms of Use was amended for the last time on February 27, 2020 .","title":"Terms of Use"},{"location":"legal/terms-of-use/#agreement","text":"This Terms of Use is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Services (defined below) (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using our Services or any part of it, you accept and agree to be bound by the Terms of Use, the Privacy Policy, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. Please read the Privacy Policy to find out how we collect, use, disclose, process and protect your personal data. If you do not agree to these Terms, you should stop accessing or using our Services immediately. In these Terms, the \u201cServices\u201d means the application owned and operated by the Company including: our websites (the \u201cSite\u201d), TomoWallet, TomoScan, TomoMaster, TomoIssuer, TomoRelayer, TomoStats, TomoBridge and our other products. The \u201cCryptocurrency(ies)\u201d means a digital currency, also referred to as a token, in which encryption techniques are used to regulate the generation of units of the currency and to verify the transfer of the currency and which operates independently of the central bank of a country. Such digital currency is not legal tender issued by any central bank nor does it confer any interest in the ownership of, or debt relating to, any asset or property. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason.","title":"AGREEMENT"},{"location":"legal/terms-of-use/#eligibility","text":"To be eligible to use the Company's Services, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using our Services, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use our Services, however, and we reserve the right to change our eligibility criteria at any time.","title":"ELIGIBILITY"},{"location":"legal/terms-of-use/#restrictions-of-using-our-services","text":"As a user of the Services, we grant you a limited, personal, non-commercial, non-exclusive, non-transferable, and revocable license to use our Services. When using our Services, we ask that you follow some basic rules: DO NOT Use Our Services to Break the Law. You agree that you will not violate any laws when using our Services. This includes any local, provincial, state, federal, national, or international laws that may apply to you. You agree that you will not use our Services to pay for, support, or otherwise engage in any illegal activities including, but not limited to, illegal gambling, fraud, money laundering, or terrorist activities. If we discover that you have violated this Agreement or other regulatory requirements by participating in money laundering or by financing terrorist activities, we will take proportional disciplinary action. You further agree not to encourage or induce any third party to engage in any of the activities prohibited under this Section. DO NOT Interfere With Other\u2019s Use of the Services. You agree that you will not use or attempt to use another user\u2019s Wallet without authorization or use our Services in any manner that could interfere, disrupt, negatively affect, or inhibit other users from fully enjoying it. DO NOT Try to Harm Our System. You agree not to distribute any virus or other harmful computer code through our Services. You also agree to not take any action that may impose an unreasonable or disproportionately large load on our or any of our third party providers\u2019 infrastructure. DO NOT Attempt to Circumvent Our Security. You agree not to bypass, circumvent, or attempt to bypass or circumvent any measures that we may use to prevent or restrict access to the Services including, without limitation, other accounts, computer systems, or networks connected to the Services. Any use of our Services other than as specifically authorized in this Agreement, without our prior written permission, is strictly prohibited and will terminate your license to use our Services.","title":"RESTRICTIONS OF USING OUR SERVICES"},{"location":"legal/terms-of-use/#limitation-disclaimer","text":"Wallet Address, Private Key, and Backup Capabilities. The private key is connected to the Wallet address and, together, they can be used to authorize the transfer of Cryptocurrencies to and from that Wallet address. You are solely responsible for maintaining the security of your private key and any mnemonic (backup) phrase associated with your Wallet. You must keep your Wallet address, mnemonic (backup) phrase, and private key access information secure. Failure to do so may result in the loss of control of Cryptocurrencies associated with the Wallet. The Company Cannot Assist With Password Retrieval. Our Services may store your Wallet address but does not receive or store your Wallet password, encrypted private key, unencrypted private key, or mnemonic (backup) phrase associated with your Wallet. We cannot, therefore, assist you with Wallet password retrieval. We cannot generate a new password for your Wallet if you fail to remember your original password. If you have not safely stored a backup of any Wallet address and private key pairs maintained in your Wallet, you accept and acknowledge that any Cryptocurrencies you have associated with such a Wallet address will become inaccessible if you do not have your Wallet password. Cryptocurrencies Transactions. In order to be completed, all proposed Cryptocurrencies transactions must be confirmed and recorded in the Cryptocurrencies of associated public blockchain. By using our Services, you acknowledge and agree that the transaction details you submit may not be completed, or may be substantially delayed, by the TomoChain Networks. Once transaction details have been submitted via the Services, we cannot assist you to cancel or otherwise modify your transaction. You must ensure that you have an adequate balance in your Wallet and/or gas to complete transactions before initiating a transaction. You acknowledge and agree that we will not be liable for any failed transactions due to insufficient funds or gas associated with your account. No Control and No Duty over risks Any fee that you might pay while using the Services is not a remuneration of the Company for the Services. This fee is to pay for Masternodes who produces the block to maintain the TomoChain blockchain. The Company provides you with the Services but you are the only person who is liable for any losses, damages, claims related to the use of the Services. The Company assumes no responsibility or liability related to TomoChain's Services. You understand and agree that the Company have no control over, and no duty to take any action regarding: Failures, disruptions, errors, or delays in processing Cryptocurrencies that you may experience while using the Services; The risk of failure of hardware, software, and Internet connections; The risk of malicious software being introduced or found in the software underlying our Services; The risk that third parties may obtain unauthorized access to information stored within your Wallet, including, but not limited to your Wallet address, private key, and mnemonic (backup) phrase; and The risk of unknown vulnerabilities in or unanticipated changes to the TomoChain Networks. Disasters. Disasters may damage the Cryptocurrencies systems resulting in loss of Cryptocurrencies held by users. Mistakes made by the user of any cryptocurrency-related software or service, e.g., forgotten passwords, and payments sent to wrong coin addresses. Software problems of TomoChain's and/or any cryptocurrency-related software or service, e.g., corrupted wallet file, incorrectly constructed transactions, unsafe cryptographic libraries, malware affecting the wallet and/or any cryptocurrency-related software or service Technical failures in the hardware of the user of any cryptocurrency-related software or service, e.g., data loss due to a faulty or damaged storage device Security problems experienced by the user of any cryptocurrency-related software or service, e.g., unauthorized access to users' wallets and/or accounts Actions or inactions of third parties and/or events experienced by third parties, e.g., bankruptcy of service providers, information security attacks on service providers, and fraud conducted by third parties. There is considerable exposure to risk in any crypto-currency exchange transaction. Any transaction involving currencies involves risks including, but not limited to, the potential for changing economic conditions that may substantially affect the price or liquidity of a currency. Investments in crypto-currency exchange speculation may also be susceptible to sharp rises and falls as the relevant market values fluctuate. It is for this reason that when speculating in such markets it is advisable to use only risk capital.","title":"LIMITATION &amp; DISCLAIMER \u00b6"},{"location":"legal/terms-of-use/#accuracy-of-materials","text":"The materials appearing on our Services could include technical, typographical, or photographic errors. The Company does not warrant that any of the materials on its Services are accurate, complete or current. The Company may make changes to the materials contained on its Services at any time without notice. However the Company does not make any commitment to update the materials.","title":"ACCURACY OF MATERIALS"},{"location":"legal/terms-of-use/#compliance-with-tax-obligations","text":"The users of our Services are solely responsible to determinate what, if any, taxes apply to their crypto-currency transactions. The owners of, or contributors to, our Services are NOT responsible for determining the taxes that apply to crypto-currency transactions.","title":"COMPLIANCE WITH TAX OBLIGATIONS"},{"location":"legal/terms-of-use/#arbitration","text":"The user of our Services agrees to arbitrate any dispute arising from or in connection with the service or this disclaimer, except for disputes related to copyrights, logos, trademarks, trade names, trade secrets or patents.","title":"ARBITRATION"},{"location":"legal/terms-of-use/#last-amendment","text":"This Terms of Use was amended for the last time on February 27, 2020 .","title":"LAST AMENDMENT"},{"location":"masternode/applying/","text":"Once your full node is up and running, you need to apply to make it eligible as a masternode. Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, masternode candidates need to invest in TomoChain by depositing at least 50'000 Tomo, and stake them for a long term. Furthermore, after the initial deposit to become a candidate, if he doesn't make it to the top 150 most voted candidates, he will not be promoted as masternode and thus receive no rewards. Therefore, candidates have an incentive to do as much as they can such as signalling their capability to support TomoChain to get into top 150 most voted candidates. Requirements \u00b6 To have a masternode candidate, the following requirements must be satisfied: The token holder has an up and running node -- see our documentation . The token holder must hold a minimum required amount of tokens (50 000 TOMO). These 50 000 TOMO are deposited to the Voting Smart Contract. Must be one of the 150 most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism. Applying to become a masternode \u00b6 You can apply by going on TomoMaster . Connect the wallet that contains the funds you want to deposit. Warning The wallet who makes the initial deposit will be the one receiving block rewards. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the address of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Important note: We advise for security measures to use a fresh new account for your masternode or 'coinbase address'. This is not the account that will receive the rewards. The rewards are sent to the account that will make the 50k TOMO initial deposit. Confirm with apply and proceed to make the payment. Your full node will now be listed on TomoMaster. People can view its details and vote for it. A candidate becomes a masternode when it belongs to top 150 most voted candidates in each epoch. Info An epoch is a period of 900 blocks (~ 30 minutes) starting from block #1 If your node is in the top 150 most voted candidates at the checkpoint between two epochs, it will be promoted as a masternode and will start producing blocks at the next epoch. Resigning your masternode \u00b6 In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster, go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation (1,296,000 blocks). After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completely terminated.","title":"Applying for Masternode Candidacy"},{"location":"masternode/applying/#requirements","text":"To have a masternode candidate, the following requirements must be satisfied: The token holder has an up and running node -- see our documentation . The token holder must hold a minimum required amount of tokens (50 000 TOMO). These 50 000 TOMO are deposited to the Voting Smart Contract. Must be one of the 150 most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism.","title":"Requirements"},{"location":"masternode/applying/#applying-to-become-a-masternode","text":"You can apply by going on TomoMaster . Connect the wallet that contains the funds you want to deposit. Warning The wallet who makes the initial deposit will be the one receiving block rewards. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the address of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Important note: We advise for security measures to use a fresh new account for your masternode or 'coinbase address'. This is not the account that will receive the rewards. The rewards are sent to the account that will make the 50k TOMO initial deposit. Confirm with apply and proceed to make the payment. Your full node will now be listed on TomoMaster. People can view its details and vote for it. A candidate becomes a masternode when it belongs to top 150 most voted candidates in each epoch. Info An epoch is a period of 900 blocks (~ 30 minutes) starting from block #1 If your node is in the top 150 most voted candidates at the checkpoint between two epochs, it will be promoted as a masternode and will start producing blocks at the next epoch.","title":"Applying to become a masternode"},{"location":"masternode/applying/#resigning-your-masternode","text":"In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster, go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation (1,296,000 blocks). After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completely terminated.","title":"Resigning your masternode"},{"location":"masternode/create-tomochain-masternode/","text":"This tool aims to help beginner/intermediate masternode owners. It acts as a terminal wizard which helps the user generate a working configuration for docker-compose to run the node. Using create-tomochain-masternode and docker-compose offers you benefits like: working \"out of the box\" docker-compose configuration auto-restarting your node on failure flexible configuration (storage, logging, ports) Prerequisites \u00b6 Docker Docker-compose Installation of Docker CE \u00b6 To install Docker, first update the apt package index. sudo apt update Then install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common dirmngr gnupg Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index, then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. sudo usermod -aG docker $(whoami) Warning You need to relog into your account for this to take effect. Until then, you will not be able to access the Docker deamon. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message starting by \"Hello from Docker!\" and exits. Installation of Docker-compose \u00b6 To install docker-compose, start by downloading the executable. sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Make it executable. sudo chmod +x /usr/local/bin/docker-compose Optional: install bash completion. sudo curl -L https://raw.githubusercontent.com/docker/compose/1.23.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose Verify that docker-compose is correctly installed by running the version command. docker-compose version Installation \u00b6 Download create-tomochain-masternode from the latest release . Make it executable. chmod +x create-tomochain-masternode Move it in your path. sudo mv create-tomochain-masternode /usr/local/bin/ Usage \u00b6 Simply run create-tomochain-masternode with the name of your masternode as argument. create-tomochain-masternode mymasternode Follow the wizard by replying to the following questions: Coinbase private key : Your masternode coinbase account private key. A TomoChain node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account which will receive the rewards. The rewards are sent to the account which will make the initial deposit. Storage : The storage location for your node data (chaindata). Either docker volume if you want to use the default docker volume location, or host directory if you want to define specific location on your filesystem (usefull when extending storage). Chaindata : The name of the docker volume that will be used or the path to the directory coontaining the chaindata, depending on your answer to the last question. The volume already exists : If you selected \"docker volume\", this will determine if the volume already exists or if it needs to be created. Expose RPC : If you want to expose or not port 8545 . It is the RPC api to your node. It should be only exposed if you have a specific reason to access the TomoChain JSON-RPC Protocol. The masternode owner is responsible of proxing and securing the RPC api as it should not be directly exposed to the internet. Expose WebSocket : If you want to expose or not port 8546 . It is the WebSocket api to your node. It should only be exposed if you have a specific reason to access the TomoChain Protocol via WebSocket. The masternode owner is responsible of proxing and securing the WebSocket api as it should not be directly exposed to the internet. Logging level : Set the logging level of the TomoChain container to error, info or debug. Info or Error is usually a good logging level. Only use the debug level if you have a good reason to do so, it will generate a lot of output and increase ressource usage. Once finished, you will get a folder named after your masternode (in our case \"mymasternode\") with two files. .env Which contains the configuration generated from your answers to the question. docker-compose.yml Which tells docker-compose how and which container run for your node. Your specific configuration will be read from the .env file. Now that we have generated the correct initial configuration for docker-compose, we just need to start our node. docker-compose up -d You can check that your masternode is running with the ps sub-command. docker-compose ps For more docker-compose commands, use docker-compose --help or refer to their documentation . Migrating from tmn \u00b6 You can find a guide on migrating from tmn in the wiki . For the long time masternode runners who started with our older tool, tmn , here are the commands to achieve the same actions. tmn start : docker-compose up -d tmn stop : docker-compose stop tmn update : docker-compose pull docker-compose up -d tmn remove : docker-compose down Troubleshooting \u00b6 error: could not access the docker daemon \u00b6 If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"Create-tomochain-masternode"},{"location":"masternode/create-tomochain-masternode/#prerequisites","text":"Docker Docker-compose","title":"Prerequisites"},{"location":"masternode/create-tomochain-masternode/#installation-of-docker-ce","text":"To install Docker, first update the apt package index. sudo apt update Then install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common dirmngr gnupg Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index, then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. sudo usermod -aG docker $(whoami) Warning You need to relog into your account for this to take effect. Until then, you will not be able to access the Docker deamon. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message starting by \"Hello from Docker!\" and exits.","title":"Installation of Docker CE"},{"location":"masternode/create-tomochain-masternode/#installation-of-docker-compose","text":"To install docker-compose, start by downloading the executable. sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Make it executable. sudo chmod +x /usr/local/bin/docker-compose Optional: install bash completion. sudo curl -L https://raw.githubusercontent.com/docker/compose/1.23.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose Verify that docker-compose is correctly installed by running the version command. docker-compose version","title":"Installation of Docker-compose"},{"location":"masternode/create-tomochain-masternode/#installation","text":"Download create-tomochain-masternode from the latest release . Make it executable. chmod +x create-tomochain-masternode Move it in your path. sudo mv create-tomochain-masternode /usr/local/bin/","title":"Installation"},{"location":"masternode/create-tomochain-masternode/#usage","text":"Simply run create-tomochain-masternode with the name of your masternode as argument. create-tomochain-masternode mymasternode Follow the wizard by replying to the following questions: Coinbase private key : Your masternode coinbase account private key. A TomoChain node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account which will receive the rewards. The rewards are sent to the account which will make the initial deposit. Storage : The storage location for your node data (chaindata). Either docker volume if you want to use the default docker volume location, or host directory if you want to define specific location on your filesystem (usefull when extending storage). Chaindata : The name of the docker volume that will be used or the path to the directory coontaining the chaindata, depending on your answer to the last question. The volume already exists : If you selected \"docker volume\", this will determine if the volume already exists or if it needs to be created. Expose RPC : If you want to expose or not port 8545 . It is the RPC api to your node. It should be only exposed if you have a specific reason to access the TomoChain JSON-RPC Protocol. The masternode owner is responsible of proxing and securing the RPC api as it should not be directly exposed to the internet. Expose WebSocket : If you want to expose or not port 8546 . It is the WebSocket api to your node. It should only be exposed if you have a specific reason to access the TomoChain Protocol via WebSocket. The masternode owner is responsible of proxing and securing the WebSocket api as it should not be directly exposed to the internet. Logging level : Set the logging level of the TomoChain container to error, info or debug. Info or Error is usually a good logging level. Only use the debug level if you have a good reason to do so, it will generate a lot of output and increase ressource usage. Once finished, you will get a folder named after your masternode (in our case \"mymasternode\") with two files. .env Which contains the configuration generated from your answers to the question. docker-compose.yml Which tells docker-compose how and which container run for your node. Your specific configuration will be read from the .env file. Now that we have generated the correct initial configuration for docker-compose, we just need to start our node. docker-compose up -d You can check that your masternode is running with the ps sub-command. docker-compose ps For more docker-compose commands, use docker-compose --help or refer to their documentation .","title":"Usage"},{"location":"masternode/create-tomochain-masternode/#migrating-from-tmn","text":"You can find a guide on migrating from tmn in the wiki . For the long time masternode runners who started with our older tool, tmn , here are the commands to achieve the same actions. tmn start : docker-compose up -d tmn stop : docker-compose stop tmn update : docker-compose pull docker-compose up -d tmn remove : docker-compose down","title":"Migrating from tmn"},{"location":"masternode/create-tomochain-masternode/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"masternode/create-tomochain-masternode/#error-could-not-access-the-docker-daemon","text":"If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"error: could not access the docker daemon"},{"location":"masternode/docker/","text":"Alternatively to using our simple tool tmn , people or companies with existing infrastructure might want to directly run our docker images for more flexibility. To achieve that, you just need to run our tomochain/node docker image. This image runs the TomoChain go client with some automation added on top. Tags \u00b6 Environment Tag Testnet :testnet Mainnet :stable Environment variables \u00b6 Variable Required Default Example Description IDENTITY False Random name my-super-node The name of your masternode PASSWORD False Random password S5G@fS3A8+*g-)ftYc The password used by the the client to localy encrypt its account PRIVATE_KEY False Random account 0xa3f5195... The private key of the account who will identify the node and receive txs fees BOOTNODES True None enode://4d3...@1.2.3.4:30301,enode://... The comma separated list of bootnodes. Find them here VERBOSITY False 3 4 The level of logging (default one should be enough) NETWORK_ID False 89 88 The network id of the join your node is joining. Find them here WS_SECRET False None d$M4J4\\5gLAz%Zjn>% The password to send data to the stats website NETSTATS_HOST False netstats-server https://stats.tomochain.com The stats website to report to, regarding to your environment NETSTATS_PORT False 3000 443 The port used by the stats website (usually 443) ANNOUNCE_TXS False None True Enable reporting transactions via RPC/WS Ports \u00b6 Exposed Protocol Description 30303 tcp TomoChain client p2p port 30303 udp TomoChain client p2p port 8545 tcp Blockchain RPC 8546 tcp Blockchain WS Filesystem \u00b6 Path Content /tomochain/data Chaindata /tomochain/keystore Accounts Examples \u00b6 docker run docker run -d --name masternode \\ -e IDENTITY = $MASTERNODE_NAME \\ -e PRIVATE_KEY = $MASTERNODE_PK \\ -e BOOTNODES = $BOOTNODES \\ -e NETSTATS_HOST = stats.tomochain.com \\ -e NETSTATS_PORT = 443 \\ -e WS_SECRET = $STATS_WS_SECRET \\ -p 30303 :30303 \\ -p 30303 :30303/udp \\ -v chaindata:/tomochain/data \\ tomochain/node:stable docker-compose.yml version: \"3.4\" services: masternode: image: tomochain/node:stable environment: IDENTITY: $MASTERNODE_NAME PRIVATE_KEY: $MASTERNODE_PK BOOTNODES: $BOOTNODES NETSTATS_HOST: stats.tomochain.com NETSTATS_PORT: 443 WS_SECRET: $STATS_WS_SECRET ports: - 30303:30303 - 30303:30303/udp volumes: - chaindata:/tomochain/data","title":"Docker"},{"location":"masternode/docker/#tags","text":"Environment Tag Testnet :testnet Mainnet :stable","title":"Tags"},{"location":"masternode/docker/#environment-variables","text":"Variable Required Default Example Description IDENTITY False Random name my-super-node The name of your masternode PASSWORD False Random password S5G@fS3A8+*g-)ftYc The password used by the the client to localy encrypt its account PRIVATE_KEY False Random account 0xa3f5195... The private key of the account who will identify the node and receive txs fees BOOTNODES True None enode://4d3...@1.2.3.4:30301,enode://... The comma separated list of bootnodes. Find them here VERBOSITY False 3 4 The level of logging (default one should be enough) NETWORK_ID False 89 88 The network id of the join your node is joining. Find them here WS_SECRET False None d$M4J4\\5gLAz%Zjn>% The password to send data to the stats website NETSTATS_HOST False netstats-server https://stats.tomochain.com The stats website to report to, regarding to your environment NETSTATS_PORT False 3000 443 The port used by the stats website (usually 443) ANNOUNCE_TXS False None True Enable reporting transactions via RPC/WS","title":"Environment variables"},{"location":"masternode/docker/#ports","text":"Exposed Protocol Description 30303 tcp TomoChain client p2p port 30303 udp TomoChain client p2p port 8545 tcp Blockchain RPC 8546 tcp Blockchain WS","title":"Ports"},{"location":"masternode/docker/#filesystem","text":"Path Content /tomochain/data Chaindata /tomochain/keystore Accounts","title":"Filesystem"},{"location":"masternode/docker/#examples","text":"docker run docker run -d --name masternode \\ -e IDENTITY = $MASTERNODE_NAME \\ -e PRIVATE_KEY = $MASTERNODE_PK \\ -e BOOTNODES = $BOOTNODES \\ -e NETSTATS_HOST = stats.tomochain.com \\ -e NETSTATS_PORT = 443 \\ -e WS_SECRET = $STATS_WS_SECRET \\ -p 30303 :30303 \\ -p 30303 :30303/udp \\ -v chaindata:/tomochain/data \\ tomochain/node:stable docker-compose.yml version: \"3.4\" services: masternode: image: tomochain/node:stable environment: IDENTITY: $MASTERNODE_NAME PRIVATE_KEY: $MASTERNODE_PK BOOTNODES: $BOOTNODES NETSTATS_HOST: stats.tomochain.com NETSTATS_PORT: 443 WS_SECRET: $STATS_WS_SECRET ports: - 30303:30303 - 30303:30303/udp volumes: - chaindata:/tomochain/data","title":"Examples"},{"location":"masternode/masternode-setup-guide/","text":"Tomochain Masternode Setup Guide \u00b6 This is a procedural step-by-step guide to setting up your first Tomochain Masternode using the tmn tool. It is meant for first-time and intermediate-level masternode operators. Security Disclaimer: Despite there being mention of some security elements in this guide, there is no implied guarantee of security . You alone must fully secure your server. Technical Requirements / Recommendations \u00b6 The following are required items and server specifications. Click here for more details 50,000 TOMO deposit Server (cloud-VPS or your-own) 16 vCPU cores (Prefer higher clock speed. Usually found on \"CPU optimized\" cloud providers' servers) 32GB RAM Storage (Disk Space) 100 GB of storage for the base chaindata ~1 GB of weekly data storage space increase (reccomend SSD-based Block Storage; low-latency, not NAS speeds) Note: These numbers may decrease with ongoing optimisations to the code base. 2 TomoChain wallets (addresses) - see details below Knowledge Requirements \u00b6 VPS Setup - You are able to setup your own cloud-hosted virtual private server (VPS) Linux familiarity - You have a basic knowledge of how to ssh-into (ex: putty or terminal) and operate the linux command-line. Do not proceed if you are not confident with the Linux command-line. Why? The upkeep and troubleshooting will become more complex than this guide. Some commands fail and you must know what you are doing. For Advanced users, go here (Command-line-only-version) \u00b6 For advanced users or repeat-offenders, see this super-short command-line-only version of the lengthy guide below. If you have done this before or know what you are doing, you might more-easily follow these linux commands instead of having to read through the below lengthy prose. Note: You will MISS many tips and tricks found in the detailed instructions. Beginner/Intermediate users, keep reading... \u00b6 Introduction \u00b6 What is a masternode? \u00b6 A masternode is a computer on a decentralized blockchain network that is running 24 hours a day that keeps the system operating. It powers the blockchain network by processing transactions and signing blocks. What are the benefits of a masternode? \u00b6 Masternodes help support the network by creating and signing blocks, providing faster transaction times, and decentralized operations. They utilize PoS (Proof of Stake) vs PoW (Proof of Work) consensus-building. Masternode operators are paid a reward (coins) as an incentive for their involved investment of coin-deposit, server setup, and continued operation. What is a VPS? \u00b6 VPS stands for Virtual Private Server. They are paid servers hosted on a cloud-hosting-provider. Each VPS runs an independent installation of an operating system (OS), Linux or Windows, and typically provides root access to the OS for advanced management and control. Why is a VPS highly recommended for masternodes? \u00b6 A VPS is recommended (and often required) for masternode setups, as you will need a dedicated static IP and 99.9% uptime to provide a stable and efficient node for the network. Unlike your home or office PC, a masternode VPS serves one purpose, to securely and efficiently run a masternode. A VPS is online 24/7 and provides dedicated resources for the project\u2019s decentralized network. 1. Choose your hosting provider \u00b6 Choose which VPS hosting provider you want to utilize. The following providers are sample VPS providers. You could choose elsewhere, or even your own 24/7 server. AWS (Amazon) DigitalOcean GCE (Google) Linode OVH Vultr Note on provider choice: It is encouraged for masternode operators to utilize various hosting providers so as to encourage a more decentralized network. It is in your best interest because if any one popular provider goes down, others will get more rewards. 2. Start your VPS server \u00b6 Start/Boot your VPS server instance. Choose Ubuntu 18.04 . This is an LTS version ( Long Term Support ). LTS versions are more stable and have seen less errors when installing Docker and Python. You must use Ubuntu 18.04 to seek support from the wider community or Tomochain. If you need help with this, see this example . Data Storage: It is recommended to assure that your provider has Block Storage or expandable disk space on SSD drives (more performant). Block Storage is pay-as-you-go disk space that you can expand in the future. You may not need it now, but you will in the future. Some locations within a hosting provider do not have this, while others will. SSH-Key login: Consider utilizing a SSH-Key login over passwords. Some providers allow you to set it up upon server creation. 3. Change passwords and accounts (logged in as root user) \u00b6 Login to your newly created server with SSH / Putty. If you need help with this, see this example . ssh root@178.62.127.177 Note on Users: Login as the root user at first. Later, we will create and switch to your own username. If you did not utilize SSH-key login (highly recommended), you will want to change the root password (only the first time) with the following command. passwd Save your root password as you can get locked out of your own server if you forget it. It is strongly recommended to use a 16+ char password with a mix of letters, numbers, special characters. You are now logged in as root. The root user is the administrative user in a Linux environment that has very broad privileges. Because of the heightened privileges of the root account, you are discouraged from using it on a regular basis. This is because part of the power inherent with the root account is the ability to make very destructive changes, even by accident. The next step is to set up an alternative user account with a reduced scope of influence for day-to-day work. Create a new user \u00b6 Use the following command to add a new user account that we will use to log in to from now on. Our user is called michael, you can replace it with any username that you like. Use the same username as your local mac/PC username and you will have an easier time logging in! adduser michael You will be asked a few questions, starting with the account password. Enter a strong password. Optionally, fill in any of the additional information if you want or ignore it. This is not required and you can just hit ENTER in any field you wish to skip. Grant the user administrative privileges \u00b6 Now we have a new user account with regular account privileges. However, we will need to do administrative tasks from this normal account. To add these privileges to our new user, we need to add the new user to the sudo group. This will allow our normal user to run commands with administrative privileges by putting the word sudo before each command. As root, run this command to add your new user to the sudo group (substitute michael with your new user): usermod -aG sudo michael -a stands for Append and -G is Group; sudo is the groupname you are adding to your user You can check to make sure that the usermod command worked: cat /etc/group | grep sudo groups michael Assure that you get a response such as sudo:x:27:michael from first command and michael : michael sudo from the second command. When you eventually (not yet) log in as your new user, you can type sudo before commands to perform actions with superuser privileges. Remain logged in as the root user for now, as we have more initial setup to do. After this, you will almost always login as your new user. 4. Configure your VPS (remain logged in as root user) \u00b6 We will now prepare the prerequisites for tmn . You need Python 3.6+ and Docker installed. Upgrade operating system \u00b6 We should upgrade the Ubuntu operating system and all installed package libraries first. You may consider doing this upgrade occasionally in the future. Type these two commands on the console with an ENTER after each: apt update apt upgrade Watch out for WARNINGs or ERRORs. A lot of text could fly by, and you should watch all of it in case something installs incorrectly. Google anything out of the ordinary and try to understand or fix it. Reboot your VPS instace in case any of the upgraded components will only fully engage until rebooted fresh. reboot Install Python \u00b6 apt install python3 apt install python3-pip Check if you have installed the right Python version (must be newer than version 3.6). python3 --version System Security \u00b6 This topic is optional, but highly recommended. If the default SSH port is not changed, you could see nefarious connection-attempts in a short time-period. Look at our wiki security doc for more details At a minimum, you will want to consider: SSHD on non-standard port UFW (Uncomplicated Fire Wall) (open port 30303 tcp & udp, and above non-standard SSH) Other security options you could consider: SSH key-based login (vs password) Fail2ban Blocking remote password auth Blocking remote root SSH-access 5. Setup Docker (logged in as new user) \u00b6 From now on, you will almost always want to login as your new user . If you are logged in as root still, logout and log back in as the new user. You may want to consider denying remote root ssh logins. ssh michael@178.62.127.177 Install Docker Repositories \u00b6 Update the apt package index. Then install various packages to allow apt to use a repository over HTTPS. The third line adds Docker\u2019s official GPG key. sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \"OK\" is normal output of that last command; -fsS shows less progress, but still error messages and -L allows redirect NOTE: Be careful with certain ssh consoles. They may not paste the \u2018|\u2019 symbol correctly. Next, verify that you have the correct key, by searching for the last 8 characters of the fingerprint. Compare the results to what is below. apt-key fingerprint 0EBFCD88 Example Results (format may be slightly different, but the string of char-numbers the same): pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] Use the following command to set up the \"stable\" repository. You could get errors here if you have a release of Ubuntu that is too recent (non LSB). sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" Install Docker CE \u00b6 Update the apt package index. Then install the latest version of Docker CE: sudo apt update sudo apt install docker-ce Watch out for WARNINGs or ERRORs. Google anything out of the ordinary and try to understand or fix it. Once installed, add your current user to the Docker group and verify that the user has been added. sudo usermod -aG docker michael groups michael cat /etc/group | grep docker Assure Docker is working \u00b6 Verify that Docker CE is installed correctly by running the hello-world image. This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. The second command shows more detailed docker information. docker run hello-world sudo systemctl status docker # hit 'q' to exit Docker CE is installed and running. Congratulations! You have installed Python and Docker. You have the prerequisites ready to run TomoChain\u2019s tmn. TROUBLESHOOTING error: could not access the docker daemon If you have installed Docker, and get this error, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $(whoami) 6. Installing TMN utility \u00b6 Tmn is a simple interface created by TomoChain developers to help you quickstart your masternode . It is installed as a python package and it utilizes two docker containers once operating. We will follow through the steps found here: guide to install tmn \u201cWe made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don\u2019t already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes!\u201d Install and update the tomochain-created tmn utility from pip: pip3 install --user tmn pip3 install -U tmn Watch out for WARNINGs or ERRORs and troubleshoot (see end of this section). To check that tmn has been correctly installed, use the following command to show some tmn info: pip3 show tmn Name: tmn Version: 0 .5 Summary: Quickstart your masternode Home-page: https://tomochain.com Author: Etienne Napoleone Author-email: etienne@tomochain.com License: GPL-3.0+ Location: /home/michael/.local/lib/python3.6/site-packages Requires: python-slugify, click, clint, pastel, docker The next step will be to actually START TMN , however we cannot do this until we have two wallet addresses. See the next section for this. TROUBLESHOOTING Occasionally a VPS image will not come installed with all of the software packages needed to install what we need. If you get any of the errors below, you are in need of particular packages to be installed. ERROR: ModuleNotFoundError: No module named \u2018setuptools\u2019 SOLUTION: sudo apt-get install python3-setuptools ERROR: Failed building wheel for <package> SOLUTION: pip3 install wheel ERROR: error: command 'x86_64-linux-gnu-gcc' failed with exit status 1 SOLUTION: sudo apt install build-essential ERROR: fatal error: Python.h: No such file or directory SOLUTION: sudo apt install python3-dev 7. Create Wallet Addresses \u00b6 Before being able to proceed further, you will need two seperate Tomo wallet addresses to operate a masternode. One helps to operate the masternode day-to-day, and the other is where the 50,000 TOMO (50k) is staked from. The genius of this is that the wallet where the 50k will pass through (and where rewards will eventually come into) is never stored or seen by the VPS server. This is a security strategy that keeps your coins safe. WALLET1 - Operating Wallet: Used for operating the masternode, including signing blocks. It effectively acts as a unique identifier of your masternode. No coins need to be inserted in this wallet; It's even advised to be empty, so in case of breach, no funds are exposed. WALLET2 - Deposit Wallet: Your 50k of staked coins need to be placed here; later, the 50k will go into a smart contract; eventually, masternode rewards will show here. You will need both the Public Key and Private Key for both addresses. It is advise that you store all of this information somewhere safe, yet accessible. You may need to utilize this information during continued operations of your masternode. Password manager apps like KeePass/KeePassXC, LastPass, or 1Password are your friend. Your private key is your money. Give it to no one. WALLET1 Suggestions - If setting up a single masternode, you can use a mobile wallet. Binances Trust Wallet and Tomochains Tomo Wallet apps are best. Alternatives are Metamask and MEW (MyEtherWallet), in that order. You can use Ledger Hardware Wallet, however the added security on WALLET1 isn't as necessary. WALLET2 Suggestions - Preferred to use Ledger / Hardware Wallet (if possible) in combo with Metamask because 50k and rewards will be handled here. Assure to use an address you do not have history on eth chain with - otherwise others will be able to see your unrelated investment history. Because most wallet apps do not have Tomo mainnet as a selectable network yet, you will need to manually add the new mainnet if you have not already. See the first link below for the guide on how to do this. How to Set Up a Wallet: Setting Up MyEtherWallet, Metamask, or Binance TrustWallet More info: Using Metamask or Mobile Tomo Wallet Links to mobile downloads and other tomo info Old Masternode guide (testnet) Section on wallets 8. Run TMN \u00b6 Below, you will finally start your Tomochain node with a utility called tmn . Initial TMN start \u00b6 IMPORTANT: Logout and SSH back in so that the $PATH variable takes effect. This allows you to run tmn from any directory. exit ssh michael@178.62.127.177 When you first start your full node with tmn start , you need to give some information. --name: The name of your full node. Your input will be converted to a \"slugified\" name. Slug format allows all letters and numbers, dashes (\"-\") and underscores (\"_\"). Ex: MyMaStErNode#24 cool -> mymasternode24-cool . You can name it to reflect your identity, company name, etc. --net: The network your full node will connect to. You can choose here to connect it to the TomoChain mainnet or testnet . --pkey: The private key of your WALLET1 wallet (non 50k). A TomoChain full node uses a wallet address to be uniquely identified and to receive transaction fees. Transaction fees are not rewards, and they are usually tiny. Important note: we advise for security measures to use a fresh new wallet for your masternode. This is not the wallet that will receive the rewards. The rewards are sent to the wallet that will make the 50k TOMO initial deposit. The command is structured like this: tmn start --name [ YOUR_NODE_NAME ] --net mainnet --pkey [ YOUR_WALLET1_PRIVATE_KEY ] We used the following command for our node (copy your own name & private key ): tmn start --name Atlantis --net mainnet --pkey cf03cb58************ TROUBLESHOOTING tmn: command not found It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo \"export PATH= $PATH : $HOME /.local/bin\" >> $HOME /.bashrc source $HOME /.bashrc 9. Check sync status \u00b6 This section coming soon. Contents to come: tmn status ; tmn inspect ; top command; https://stats.tomochain.com/ website; # of blocks command; tmn update , tmn --help , etc 10. Jumpstart the chaindata (Optional) \u00b6 Full Jumpstart instructions can be found here The basic structure has been created, blocks have started synchronizing, and now we want to speed up the process by pulling in the latest chaindata. Chaindata is where the entire history of tomo's blockchain records are stored. All coin transactions, all smart contracts, all operations. This takes up a lot of space. To syncrhonize it from decentralized nodes piecemeal-like could take days or weeks. Instead, lets download the latest image of the data, and synchronize from there. 11. Apply for Masternode Candidacy \u00b6 This section coming soon. For now, see here Contents to come: Explain; Assure synced; master.tomo; login; apply 12. Name your Masternode \u00b6 This section coming soon. Contents to come: https://master.tomochain.com/ ; login as 50k wallet; find your MN; edit; enter name; sign data 13. Verify initial rewards \u00b6 This section coming soon. Contents to come: https://master.tomochain.com/ ; https://scan.tomochain.com/ ; explain infra vs stake reward; link to economics APPENDIX \u00b6 Commands-only (ADVANCED users) \u00b6 If you have done this before or know what you are doing, you can follow these linux commands. Note: You will MISS many tips and tricks in the detailed instructions. ssh root@178.62.127.177 passwd adduser michael ; usermod -aG sudo michael groups michael apt update ; apt upgrade ; reboot apt install python3 apt install python3-pip python3 --version ssh michael@178.62.127.177 sudo apt update ; sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" sudo apt update ; sudo apt install docker-ce sudo usermod -aG docker michael ; groups michael docker run hello-world pip3 install --user tmn pip3 install -U tmn pip3 show tmn # Create Wallet Addresses # logoff SSH and back in to set $PATH variable tmn start --name Atlantis --net mainnet --pkey cf03cb58************ tmn status ; tmn inspect ; tmn --help # Enact Jumpstart: https://github.com/tomochain/docs/wiki/Update-stuck-node-or-Jumpstart-chain-sync","title":"Detailed guide"},{"location":"masternode/masternode-setup-guide/#tomochain-masternode-setup-guide","text":"This is a procedural step-by-step guide to setting up your first Tomochain Masternode using the tmn tool. It is meant for first-time and intermediate-level masternode operators. Security Disclaimer: Despite there being mention of some security elements in this guide, there is no implied guarantee of security . You alone must fully secure your server.","title":"Tomochain Masternode Setup Guide"},{"location":"masternode/masternode-setup-guide/#technical-requirements-recommendations","text":"The following are required items and server specifications. Click here for more details 50,000 TOMO deposit Server (cloud-VPS or your-own) 16 vCPU cores (Prefer higher clock speed. Usually found on \"CPU optimized\" cloud providers' servers) 32GB RAM Storage (Disk Space) 100 GB of storage for the base chaindata ~1 GB of weekly data storage space increase (reccomend SSD-based Block Storage; low-latency, not NAS speeds) Note: These numbers may decrease with ongoing optimisations to the code base. 2 TomoChain wallets (addresses) - see details below","title":"Technical Requirements / Recommendations"},{"location":"masternode/masternode-setup-guide/#knowledge-requirements","text":"VPS Setup - You are able to setup your own cloud-hosted virtual private server (VPS) Linux familiarity - You have a basic knowledge of how to ssh-into (ex: putty or terminal) and operate the linux command-line. Do not proceed if you are not confident with the Linux command-line. Why? The upkeep and troubleshooting will become more complex than this guide. Some commands fail and you must know what you are doing.","title":"Knowledge Requirements"},{"location":"masternode/masternode-setup-guide/#for-advanced-users-go-here-command-line-only-version","text":"For advanced users or repeat-offenders, see this super-short command-line-only version of the lengthy guide below. If you have done this before or know what you are doing, you might more-easily follow these linux commands instead of having to read through the below lengthy prose. Note: You will MISS many tips and tricks found in the detailed instructions.","title":"For Advanced users, go here (Command-line-only-version)"},{"location":"masternode/masternode-setup-guide/#beginnerintermediate-users-keep-reading","text":"","title":"Beginner/Intermediate users, keep reading..."},{"location":"masternode/masternode-setup-guide/#introduction","text":"","title":"Introduction"},{"location":"masternode/masternode-setup-guide/#what-is-a-masternode","text":"A masternode is a computer on a decentralized blockchain network that is running 24 hours a day that keeps the system operating. It powers the blockchain network by processing transactions and signing blocks.","title":"What is a masternode?"},{"location":"masternode/masternode-setup-guide/#what-are-the-benefits-of-a-masternode","text":"Masternodes help support the network by creating and signing blocks, providing faster transaction times, and decentralized operations. They utilize PoS (Proof of Stake) vs PoW (Proof of Work) consensus-building. Masternode operators are paid a reward (coins) as an incentive for their involved investment of coin-deposit, server setup, and continued operation.","title":"What are the benefits of a masternode?"},{"location":"masternode/masternode-setup-guide/#what-is-a-vps","text":"VPS stands for Virtual Private Server. They are paid servers hosted on a cloud-hosting-provider. Each VPS runs an independent installation of an operating system (OS), Linux or Windows, and typically provides root access to the OS for advanced management and control.","title":"What is a VPS?"},{"location":"masternode/masternode-setup-guide/#why-is-a-vps-highly-recommended-for-masternodes","text":"A VPS is recommended (and often required) for masternode setups, as you will need a dedicated static IP and 99.9% uptime to provide a stable and efficient node for the network. Unlike your home or office PC, a masternode VPS serves one purpose, to securely and efficiently run a masternode. A VPS is online 24/7 and provides dedicated resources for the project\u2019s decentralized network.","title":"Why is a VPS highly recommended for masternodes?"},{"location":"masternode/masternode-setup-guide/#1-choose-your-hosting-provider","text":"Choose which VPS hosting provider you want to utilize. The following providers are sample VPS providers. You could choose elsewhere, or even your own 24/7 server. AWS (Amazon) DigitalOcean GCE (Google) Linode OVH Vultr Note on provider choice: It is encouraged for masternode operators to utilize various hosting providers so as to encourage a more decentralized network. It is in your best interest because if any one popular provider goes down, others will get more rewards.","title":"1. Choose your hosting provider"},{"location":"masternode/masternode-setup-guide/#2-start-your-vps-server","text":"Start/Boot your VPS server instance. Choose Ubuntu 18.04 . This is an LTS version ( Long Term Support ). LTS versions are more stable and have seen less errors when installing Docker and Python. You must use Ubuntu 18.04 to seek support from the wider community or Tomochain. If you need help with this, see this example . Data Storage: It is recommended to assure that your provider has Block Storage or expandable disk space on SSD drives (more performant). Block Storage is pay-as-you-go disk space that you can expand in the future. You may not need it now, but you will in the future. Some locations within a hosting provider do not have this, while others will. SSH-Key login: Consider utilizing a SSH-Key login over passwords. Some providers allow you to set it up upon server creation.","title":"2. Start your VPS server"},{"location":"masternode/masternode-setup-guide/#3-change-passwords-and-accounts-logged-in-as-root-user","text":"Login to your newly created server with SSH / Putty. If you need help with this, see this example . ssh root@178.62.127.177 Note on Users: Login as the root user at first. Later, we will create and switch to your own username. If you did not utilize SSH-key login (highly recommended), you will want to change the root password (only the first time) with the following command. passwd Save your root password as you can get locked out of your own server if you forget it. It is strongly recommended to use a 16+ char password with a mix of letters, numbers, special characters. You are now logged in as root. The root user is the administrative user in a Linux environment that has very broad privileges. Because of the heightened privileges of the root account, you are discouraged from using it on a regular basis. This is because part of the power inherent with the root account is the ability to make very destructive changes, even by accident. The next step is to set up an alternative user account with a reduced scope of influence for day-to-day work.","title":"3. Change passwords and accounts (logged in as root user)"},{"location":"masternode/masternode-setup-guide/#create-a-new-user","text":"Use the following command to add a new user account that we will use to log in to from now on. Our user is called michael, you can replace it with any username that you like. Use the same username as your local mac/PC username and you will have an easier time logging in! adduser michael You will be asked a few questions, starting with the account password. Enter a strong password. Optionally, fill in any of the additional information if you want or ignore it. This is not required and you can just hit ENTER in any field you wish to skip.","title":"Create a new user"},{"location":"masternode/masternode-setup-guide/#grant-the-user-administrative-privileges","text":"Now we have a new user account with regular account privileges. However, we will need to do administrative tasks from this normal account. To add these privileges to our new user, we need to add the new user to the sudo group. This will allow our normal user to run commands with administrative privileges by putting the word sudo before each command. As root, run this command to add your new user to the sudo group (substitute michael with your new user): usermod -aG sudo michael -a stands for Append and -G is Group; sudo is the groupname you are adding to your user You can check to make sure that the usermod command worked: cat /etc/group | grep sudo groups michael Assure that you get a response such as sudo:x:27:michael from first command and michael : michael sudo from the second command. When you eventually (not yet) log in as your new user, you can type sudo before commands to perform actions with superuser privileges. Remain logged in as the root user for now, as we have more initial setup to do. After this, you will almost always login as your new user.","title":"Grant the user administrative privileges"},{"location":"masternode/masternode-setup-guide/#4-configure-your-vps-remain-logged-in-as-root-user","text":"We will now prepare the prerequisites for tmn . You need Python 3.6+ and Docker installed.","title":"4. Configure your VPS (remain logged in as root user)"},{"location":"masternode/masternode-setup-guide/#upgrade-operating-system","text":"We should upgrade the Ubuntu operating system and all installed package libraries first. You may consider doing this upgrade occasionally in the future. Type these two commands on the console with an ENTER after each: apt update apt upgrade Watch out for WARNINGs or ERRORs. A lot of text could fly by, and you should watch all of it in case something installs incorrectly. Google anything out of the ordinary and try to understand or fix it. Reboot your VPS instace in case any of the upgraded components will only fully engage until rebooted fresh. reboot","title":"Upgrade operating system"},{"location":"masternode/masternode-setup-guide/#install-python","text":"apt install python3 apt install python3-pip Check if you have installed the right Python version (must be newer than version 3.6). python3 --version","title":"Install Python"},{"location":"masternode/masternode-setup-guide/#system-security","text":"This topic is optional, but highly recommended. If the default SSH port is not changed, you could see nefarious connection-attempts in a short time-period. Look at our wiki security doc for more details At a minimum, you will want to consider: SSHD on non-standard port UFW (Uncomplicated Fire Wall) (open port 30303 tcp & udp, and above non-standard SSH) Other security options you could consider: SSH key-based login (vs password) Fail2ban Blocking remote password auth Blocking remote root SSH-access","title":"System Security"},{"location":"masternode/masternode-setup-guide/#5-setup-docker-logged-in-as-new-user","text":"From now on, you will almost always want to login as your new user . If you are logged in as root still, logout and log back in as the new user. You may want to consider denying remote root ssh logins. ssh michael@178.62.127.177","title":"5. Setup Docker (logged in as new user)"},{"location":"masternode/masternode-setup-guide/#install-docker-repositories","text":"Update the apt package index. Then install various packages to allow apt to use a repository over HTTPS. The third line adds Docker\u2019s official GPG key. sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \"OK\" is normal output of that last command; -fsS shows less progress, but still error messages and -L allows redirect NOTE: Be careful with certain ssh consoles. They may not paste the \u2018|\u2019 symbol correctly. Next, verify that you have the correct key, by searching for the last 8 characters of the fingerprint. Compare the results to what is below. apt-key fingerprint 0EBFCD88 Example Results (format may be slightly different, but the string of char-numbers the same): pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] Use the following command to set up the \"stable\" repository. You could get errors here if you have a release of Ubuntu that is too recent (non LSB). sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\"","title":"Install Docker Repositories"},{"location":"masternode/masternode-setup-guide/#install-docker-ce","text":"Update the apt package index. Then install the latest version of Docker CE: sudo apt update sudo apt install docker-ce Watch out for WARNINGs or ERRORs. Google anything out of the ordinary and try to understand or fix it. Once installed, add your current user to the Docker group and verify that the user has been added. sudo usermod -aG docker michael groups michael cat /etc/group | grep docker","title":"Install Docker CE"},{"location":"masternode/masternode-setup-guide/#assure-docker-is-working","text":"Verify that Docker CE is installed correctly by running the hello-world image. This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. The second command shows more detailed docker information. docker run hello-world sudo systemctl status docker # hit 'q' to exit Docker CE is installed and running. Congratulations! You have installed Python and Docker. You have the prerequisites ready to run TomoChain\u2019s tmn. TROUBLESHOOTING error: could not access the docker daemon If you have installed Docker, and get this error, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $(whoami)","title":"Assure Docker is working"},{"location":"masternode/masternode-setup-guide/#6-installing-tmn-utility","text":"Tmn is a simple interface created by TomoChain developers to help you quickstart your masternode . It is installed as a python package and it utilizes two docker containers once operating. We will follow through the steps found here: guide to install tmn \u201cWe made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don\u2019t already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes!\u201d Install and update the tomochain-created tmn utility from pip: pip3 install --user tmn pip3 install -U tmn Watch out for WARNINGs or ERRORs and troubleshoot (see end of this section). To check that tmn has been correctly installed, use the following command to show some tmn info: pip3 show tmn Name: tmn Version: 0 .5 Summary: Quickstart your masternode Home-page: https://tomochain.com Author: Etienne Napoleone Author-email: etienne@tomochain.com License: GPL-3.0+ Location: /home/michael/.local/lib/python3.6/site-packages Requires: python-slugify, click, clint, pastel, docker The next step will be to actually START TMN , however we cannot do this until we have two wallet addresses. See the next section for this. TROUBLESHOOTING Occasionally a VPS image will not come installed with all of the software packages needed to install what we need. If you get any of the errors below, you are in need of particular packages to be installed. ERROR: ModuleNotFoundError: No module named \u2018setuptools\u2019 SOLUTION: sudo apt-get install python3-setuptools ERROR: Failed building wheel for <package> SOLUTION: pip3 install wheel ERROR: error: command 'x86_64-linux-gnu-gcc' failed with exit status 1 SOLUTION: sudo apt install build-essential ERROR: fatal error: Python.h: No such file or directory SOLUTION: sudo apt install python3-dev","title":"6. Installing TMN utility"},{"location":"masternode/masternode-setup-guide/#7-create-wallet-addresses","text":"Before being able to proceed further, you will need two seperate Tomo wallet addresses to operate a masternode. One helps to operate the masternode day-to-day, and the other is where the 50,000 TOMO (50k) is staked from. The genius of this is that the wallet where the 50k will pass through (and where rewards will eventually come into) is never stored or seen by the VPS server. This is a security strategy that keeps your coins safe. WALLET1 - Operating Wallet: Used for operating the masternode, including signing blocks. It effectively acts as a unique identifier of your masternode. No coins need to be inserted in this wallet; It's even advised to be empty, so in case of breach, no funds are exposed. WALLET2 - Deposit Wallet: Your 50k of staked coins need to be placed here; later, the 50k will go into a smart contract; eventually, masternode rewards will show here. You will need both the Public Key and Private Key for both addresses. It is advise that you store all of this information somewhere safe, yet accessible. You may need to utilize this information during continued operations of your masternode. Password manager apps like KeePass/KeePassXC, LastPass, or 1Password are your friend. Your private key is your money. Give it to no one. WALLET1 Suggestions - If setting up a single masternode, you can use a mobile wallet. Binances Trust Wallet and Tomochains Tomo Wallet apps are best. Alternatives are Metamask and MEW (MyEtherWallet), in that order. You can use Ledger Hardware Wallet, however the added security on WALLET1 isn't as necessary. WALLET2 Suggestions - Preferred to use Ledger / Hardware Wallet (if possible) in combo with Metamask because 50k and rewards will be handled here. Assure to use an address you do not have history on eth chain with - otherwise others will be able to see your unrelated investment history. Because most wallet apps do not have Tomo mainnet as a selectable network yet, you will need to manually add the new mainnet if you have not already. See the first link below for the guide on how to do this. How to Set Up a Wallet: Setting Up MyEtherWallet, Metamask, or Binance TrustWallet More info: Using Metamask or Mobile Tomo Wallet Links to mobile downloads and other tomo info Old Masternode guide (testnet) Section on wallets","title":"7. Create Wallet Addresses"},{"location":"masternode/masternode-setup-guide/#8-run-tmn","text":"Below, you will finally start your Tomochain node with a utility called tmn .","title":"8. Run TMN"},{"location":"masternode/masternode-setup-guide/#initial-tmn-start","text":"IMPORTANT: Logout and SSH back in so that the $PATH variable takes effect. This allows you to run tmn from any directory. exit ssh michael@178.62.127.177 When you first start your full node with tmn start , you need to give some information. --name: The name of your full node. Your input will be converted to a \"slugified\" name. Slug format allows all letters and numbers, dashes (\"-\") and underscores (\"_\"). Ex: MyMaStErNode#24 cool -> mymasternode24-cool . You can name it to reflect your identity, company name, etc. --net: The network your full node will connect to. You can choose here to connect it to the TomoChain mainnet or testnet . --pkey: The private key of your WALLET1 wallet (non 50k). A TomoChain full node uses a wallet address to be uniquely identified and to receive transaction fees. Transaction fees are not rewards, and they are usually tiny. Important note: we advise for security measures to use a fresh new wallet for your masternode. This is not the wallet that will receive the rewards. The rewards are sent to the wallet that will make the 50k TOMO initial deposit. The command is structured like this: tmn start --name [ YOUR_NODE_NAME ] --net mainnet --pkey [ YOUR_WALLET1_PRIVATE_KEY ] We used the following command for our node (copy your own name & private key ): tmn start --name Atlantis --net mainnet --pkey cf03cb58************ TROUBLESHOOTING tmn: command not found It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo \"export PATH= $PATH : $HOME /.local/bin\" >> $HOME /.bashrc source $HOME /.bashrc","title":"Initial TMN start"},{"location":"masternode/masternode-setup-guide/#9-check-sync-status","text":"This section coming soon. Contents to come: tmn status ; tmn inspect ; top command; https://stats.tomochain.com/ website; # of blocks command; tmn update , tmn --help , etc","title":"9. Check sync status"},{"location":"masternode/masternode-setup-guide/#10-jumpstart-the-chaindata-optional","text":"Full Jumpstart instructions can be found here The basic structure has been created, blocks have started synchronizing, and now we want to speed up the process by pulling in the latest chaindata. Chaindata is where the entire history of tomo's blockchain records are stored. All coin transactions, all smart contracts, all operations. This takes up a lot of space. To syncrhonize it from decentralized nodes piecemeal-like could take days or weeks. Instead, lets download the latest image of the data, and synchronize from there.","title":"10. Jumpstart the chaindata (Optional)"},{"location":"masternode/masternode-setup-guide/#11-apply-for-masternode-candidacy","text":"This section coming soon. For now, see here Contents to come: Explain; Assure synced; master.tomo; login; apply","title":"11. Apply for Masternode Candidacy"},{"location":"masternode/masternode-setup-guide/#12-name-your-masternode","text":"This section coming soon. Contents to come: https://master.tomochain.com/ ; login as 50k wallet; find your MN; edit; enter name; sign data","title":"12. Name your Masternode"},{"location":"masternode/masternode-setup-guide/#13-verify-initial-rewards","text":"This section coming soon. Contents to come: https://master.tomochain.com/ ; https://scan.tomochain.com/ ; explain infra vs stake reward; link to economics","title":"13. Verify initial rewards"},{"location":"masternode/masternode-setup-guide/#appendix","text":"","title":"APPENDIX"},{"location":"masternode/masternode-setup-guide/#commands-only-advanced-users","text":"If you have done this before or know what you are doing, you can follow these linux commands. Note: You will MISS many tips and tricks in the detailed instructions. ssh root@178.62.127.177 passwd adduser michael ; usermod -aG sudo michael groups michael apt update ; apt upgrade ; reboot apt install python3 apt install python3-pip python3 --version ssh michael@178.62.127.177 sudo apt update ; sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" sudo apt update ; sudo apt install docker-ce sudo usermod -aG docker michael ; groups michael docker run hello-world pip3 install --user tmn pip3 install -U tmn pip3 show tmn # Create Wallet Addresses # logoff SSH and back in to set $PATH variable tmn start --name Atlantis --net mainnet --pkey cf03cb58************ tmn status ; tmn inspect ; tmn --help # Enact Jumpstart: https://github.com/tomochain/docs/wiki/Update-stuck-node-or-Jumpstart-chain-sync","title":"Commands-only (ADVANCED users)"},{"location":"masternode/name-your-masternode/","text":"Name Your Masternode \u00b6 Masternodes and proposed-masternodes (not enough votes yet) can be given alternate names and info on https://master.tomochain.com/ . To alter this information, you will need to login to master with your WALLET2 Deposit Wallet (50k), find your masternode, edit the text, and then sign the change with your wallet. By signing the changes, you are cryptographically proving that this is actually the owner who wants to change the info. Know which wallet and wallet-software you used for the 50k For example, maybe you use your Ledger Hardware Wallet with Metamask. Or maybe you used a mobile wallet like Tomochains Tomo Wallet or Binances Trust Wallet. Head to https://master.tomochain.com/ If you originally setup your masternode with a Ledger or MyEtherWallet or MetaMask, you do this on a computer browser. If you originally used a mobile wallet such as Tomochains Tomo Wallet or Binances Trust Wallet app, you will visit this webpage inside those apps. Login with your wallet a. Click the GEAR icon in the upper right corner b. Click the dropdown to select which Wallet type you are using For Ledger, you will need to enter the Derivation Path of m/44'/60'/0' and on the actual ledger, you are using Ethereum app with setting Browser Support: Yes . Network provider was changed successfully will temporarily popup on the same webpage if you succeed. Account Information section will now show the Address for this wallet. Navigate to your Masternode a. Click the Address shown This should be the Address of your masternodes WALLET2 Deposit Wallet where you originally posted your 50k. This will take you to an intermediate page showing your address as if it were a voter. b. Click the Address under Candidates section This should be the Address of your masternodes WALLET1 Operating Wallet which uniquely identifies your masternode. This will take you to your masternodes home page... where voters vote on you and find information such as your past rewards, status, and masternode information. Click the EDIT icon next to your masternodes name This icon looks like a paper and pencil. The icon will not appear if you are not the owner or are not logged into the wallet. Alter your Name, Hardware, Data Center, and Location There are no requirements here. The information is for voters. Click Next and then Submit once done. Sign the transaction Use your wallet to sign the transaction. This proves that you are who you say you are. With Ledger, you will need to click it physically to confirm. Mobile apps will have a popup where you confirm. Candidate information updated successfully will temporarily popup if successful. Check main page of https://master.tomochain.com/ ! Done! Changes you made should now be visible here. Note that the name does not change on the stats.tomochain.com website.","title":"Name Your Masternode"},{"location":"masternode/name-your-masternode/#name-your-masternode","text":"Masternodes and proposed-masternodes (not enough votes yet) can be given alternate names and info on https://master.tomochain.com/ . To alter this information, you will need to login to master with your WALLET2 Deposit Wallet (50k), find your masternode, edit the text, and then sign the change with your wallet. By signing the changes, you are cryptographically proving that this is actually the owner who wants to change the info. Know which wallet and wallet-software you used for the 50k For example, maybe you use your Ledger Hardware Wallet with Metamask. Or maybe you used a mobile wallet like Tomochains Tomo Wallet or Binances Trust Wallet. Head to https://master.tomochain.com/ If you originally setup your masternode with a Ledger or MyEtherWallet or MetaMask, you do this on a computer browser. If you originally used a mobile wallet such as Tomochains Tomo Wallet or Binances Trust Wallet app, you will visit this webpage inside those apps. Login with your wallet a. Click the GEAR icon in the upper right corner b. Click the dropdown to select which Wallet type you are using For Ledger, you will need to enter the Derivation Path of m/44'/60'/0' and on the actual ledger, you are using Ethereum app with setting Browser Support: Yes . Network provider was changed successfully will temporarily popup on the same webpage if you succeed. Account Information section will now show the Address for this wallet. Navigate to your Masternode a. Click the Address shown This should be the Address of your masternodes WALLET2 Deposit Wallet where you originally posted your 50k. This will take you to an intermediate page showing your address as if it were a voter. b. Click the Address under Candidates section This should be the Address of your masternodes WALLET1 Operating Wallet which uniquely identifies your masternode. This will take you to your masternodes home page... where voters vote on you and find information such as your past rewards, status, and masternode information. Click the EDIT icon next to your masternodes name This icon looks like a paper and pencil. The icon will not appear if you are not the owner or are not logged into the wallet. Alter your Name, Hardware, Data Center, and Location There are no requirements here. The information is for voters. Click Next and then Submit once done. Sign the transaction Use your wallet to sign the transaction. This proves that you are who you say you are. With Ledger, you will need to click it physically to confirm. Mobile apps will have a popup where you confirm. Candidate information updated successfully will temporarily popup if successful. Check main page of https://master.tomochain.com/ ! Done! Changes you made should now be visible here. Note that the name does not change on the stats.tomochain.com website.","title":"Name Your Masternode"},{"location":"masternode/requirements/","text":"Running a masternode candidate require to pay attention to the team's announcements regarding updates and technical notices. Here are the base recommendations for running a masternode candidate. Minimum hardware requirements \u00b6 Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers. Directly facing internet (public IP, no NAT) 16 cores CPU 32GB of RAM SSD storage Note If you are running a node in Testnet, 2CPU/8GB of RAM is sufficient. We recommend using popular cloud providers as there reliability and uptime are close to 100%. Those servers would be a good starting point: DigitalOcean : CPU optimized droplet 32GB/16CPU Amazon EC2 : C5 instance Google Cloud Engine : n1-highcpu-16 Setting up a masternode candidate on a weaker machine might result in poor performances. Significantly impacting owner's rewards and the chain performance. If you have other production grade environment than cloud provider at your disposal, please come chat with us on our Gitter . Info A masternode have a certain amount of tasks to process (validations, block creations, etc.) over time. You masternode should be able to process all the tasks that are attributed to him or the rewards will be negatively impacted. However, over sizing your masternode will not get you more rewards. Maintenance \u00b6 All IT systems require maintenance. It is of the owner's responsability to ensure over time that your node has enough: disk space to store the new blockchain data processing power to keep the chain operating at optimal speed monitoring to be able to react quickly in case of problem security mesures like firewalling, os security patching, ssh via keypairs, etc. This is a non exhaustive list.","title":"Requirements"},{"location":"masternode/requirements/#hardware","text":"Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers. Directly facing internet (public IP, no NAT) 16 cores CPU 32GB of RAM SSD storage Note If you are running a node in Testnet, 2CPU/8GB of RAM is sufficient. We recommend using popular cloud providers as there reliability and uptime are close to 100%. Those servers would be a good starting point: DigitalOcean : CPU optimized droplet 32GB/16CPU Amazon EC2 : C5 instance Google Cloud Engine : n1-highcpu-16 Setting up a masternode candidate on a weaker machine might result in poor performances. Significantly impacting owner's rewards and the chain performance. If you have other production grade environment than cloud provider at your disposal, please come chat with us on our Gitter . Info A masternode have a certain amount of tasks to process (validations, block creations, etc.) over time. You masternode should be able to process all the tasks that are attributed to him or the rewards will be negatively impacted. However, over sizing your masternode will not get you more rewards.","title":"Minimum hardware requirements"},{"location":"masternode/requirements/#maintenance","text":"All IT systems require maintenance. It is of the owner's responsability to ensure over time that your node has enough: disk space to store the new blockchain data processing power to keep the chain operating at optimal speed monitoring to be able to react quickly in case of problem security mesures like firewalling, os security patching, ssh via keypairs, etc. This is a non exhaustive list.","title":"Maintenance"},{"location":"masternode/snapshot/","text":"Latest snapshot: download (91 GB, md5sum 0b23a48b0d6585690350e91b0f6c9f14) The following commands are step by step instructions for Tomo masternode operators that can be used for two major use-cases: Fixing nodes that are stuck; evidenced by a node that stays on a block and doesn't progress Jumpstarting a newly setup masternode; avoid waiting a week for synchronization Basically, you download a compressed version of the last-known \"good\" chaindata. This comes from Tomochain Ptd on a weekly basis. You remove the nodes old data and update it with the newly downloaded data. Finally you restart the sync-process from this known-good checkpoint. Note: Assure that you have enough disk space for both the tar file AND its uncompressed contents. Double the space or more. # Login as user that has access to tmn # Download Tomo's chaindata archive (make sure you have enough disk space available) wget -c https://chaindata.tomochain.com/20190813.tar -P /tmp # Stop your node (for tmn users) tmn stop # or in the node folder (for docker-compose users) docker-compose stop # Find the name of your volume docker volume ls # Remove your node old data sudo rm -rf /var/lib/docker/volumes/NAME_OF_YOUR_VOLUME/_data/data/tomo/chaindata # Find the name of your volume docker volume ls # Extract the data cd /tmp sudo tar xvC /var/lib/docker/volumes/NAME_OF_YOUR_VOLUME/_data/data/tomo/ -f 20190813.tar # Start your node back(for tmn users) tmn start # or in the node folder (for docker-compose users) docker-compose start # If you're really running out of space, remove the tar file # keeping it might be a good idea if you get stuck further before a new snapshot is released rm /tmp/20190813.tar Tip: extract the data in backgroud In case you can not wait for the extraction finish, you can run it in the background nohup tar xvC /var/lib/docker/volumes/NAME_OF_YOUR_VOLUME/_data/data/tomo/ -f 20190813.tar &","title":"Chaindata Snapshots"},{"location":"masternode/tmn/","text":"We made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes! Prerequisites \u00b6 Python >= 3.6 Docker CE Warning We recommand to run your masternode on Ubuntu 18.04 LTS. This version have python 3.6 and has been reported as working out of the box. Installation of Python \u00b6 To install Python under debian based distribution, run the following commands. apt update apt install python3-pip To check if you have installed the right Python version (must be greater than 3.5). python3 --version Installation of Docker CE \u00b6 To install Docker, first update the apt package index. sudo apt update Then Install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index. Then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. usermod -aG docker $your_user_name Warning You need to relog into your account for this to take effect. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. tmn \u00b6 Installation \u00b6 Simply install it from pip. pip3 install --user tmn Update \u00b6 Update it from pip. pip3 install -U tmn First start \u00b6 When you first start your full node with tmn, you need to give some information. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. --api : Expose RPC and websocket on ports 8545 and 8546 . Important note: Those ports should not be accessible directly from the internet. Please setup firewalling accordingly if you need to access them localy. Use a reverse proxy if you want to expose them to the outside. It could look like this: tmn start --name [YOUR_NODE_NAME] --net testnet --pkey [YOUR_COINBASE_PRIVATE_KEY] --api Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain. Usage \u00b6 You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data. Troubleshooting \u00b6 tmn: command not found \u00b6 It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:$HOME/.local/bin' >> $HOME/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:$HOME/Library/Python/[VERSION]/bin' >> $HOME/.bashrc Then reload your environment: source ~/.bashrc error: could not access the docker daemon \u00b6 If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name pip3 install fails due to not being able to build some package \u00b6 Your OS might not come with build tools preinstalled. For ubuntu, you can solve that by running: sudo apt install build-essential python3-dev python3-wheel pip3 install fails due to \"No Module named Setuptools\" \u00b6 Your OS might not come with setuptools preinstalled. For ubuntu, you can solve that by running: sudo apt install python3-setuptools","title":"Tmn"},{"location":"masternode/tmn/#prerequisites","text":"Python >= 3.6 Docker CE Warning We recommand to run your masternode on Ubuntu 18.04 LTS. This version have python 3.6 and has been reported as working out of the box.","title":"Prerequisites"},{"location":"masternode/tmn/#installation-of-python","text":"To install Python under debian based distribution, run the following commands. apt update apt install python3-pip To check if you have installed the right Python version (must be greater than 3.5). python3 --version","title":"Installation of Python"},{"location":"masternode/tmn/#installation-of-docker-ce","text":"To install Docker, first update the apt package index. sudo apt update Then Install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index. Then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. usermod -aG docker $your_user_name Warning You need to relog into your account for this to take effect. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.","title":"Installation of Docker CE"},{"location":"masternode/tmn/#tmn","text":"","title":"tmn"},{"location":"masternode/tmn/#installation","text":"Simply install it from pip. pip3 install --user tmn","title":"Installation"},{"location":"masternode/tmn/#update","text":"Update it from pip. pip3 install -U tmn","title":"Update"},{"location":"masternode/tmn/#first-start","text":"When you first start your full node with tmn, you need to give some information. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. --api : Expose RPC and websocket on ports 8545 and 8546 . Important note: Those ports should not be accessible directly from the internet. Please setup firewalling accordingly if you need to access them localy. Use a reverse proxy if you want to expose them to the outside. It could look like this: tmn start --name [YOUR_NODE_NAME] --net testnet --pkey [YOUR_COINBASE_PRIVATE_KEY] --api Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain.","title":"First start"},{"location":"masternode/tmn/#usage","text":"You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data.","title":"Usage"},{"location":"masternode/tmn/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"masternode/tmn/#tmn-command-not-found","text":"It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:$HOME/.local/bin' >> $HOME/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:$HOME/Library/Python/[VERSION]/bin' >> $HOME/.bashrc Then reload your environment: source ~/.bashrc","title":"tmn: command not found"},{"location":"masternode/tmn/#error-could-not-access-the-docker-daemon","text":"If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"error: could not access the docker daemon"},{"location":"masternode/tmn/#pip3-install-fails-due-to-not-being-able-to-build-some-package","text":"Your OS might not come with build tools preinstalled. For ubuntu, you can solve that by running: sudo apt install build-essential python3-dev python3-wheel","title":"pip3 install fails due to not being able to build some package"},{"location":"masternode/tmn/#pip3-install-fails-due-to-no-module-named-setuptools","text":"Your OS might not come with setuptools preinstalled. For ubuntu, you can solve that by running: sudo apt install python3-setuptools","title":"pip3 install fails due to \"No Module named Setuptools\""},{"location":"masternode/tomonative/","text":"This guide shows how to run a TomoChain masternode in testnet and mainnet without the need of using Docker and tmn . Install Golang \u00b6 Reference: https://golang.org/doc/install Set environment variables Supports Go 1.10, 1.11, 1.12 export GOROOT = $HOME /usr/local/go export GOPATH = $HOME /go Prepare tomo client software \u00b6 Build from source code \u00b6 Create new directory for the project mkdir -p $GOPATH /src/github.com/ethereum/ cd $GOPATH /src/github.com/ethereum/ Download source code and build git clone https://github.com/tomochain/tomochain.git go-ethereum cd go-ethereum Checkout the latest version (e.g v1.5.4) git pull origin --tags git checkout v1.4.1 Build the project make all Binary file should be generated in build folder $GOPATH/src/github.com/ethereum/go-ethereum/build/bin alias tomo = $GOPATH /src/github.com/ethereum/go-ethereum/build/bin/tomo Download TomoChain binary from Github release page \u00b6 Download tomo binary from our releases page alias tomo = path/to/tomo/binary Download genesis block \u00b6 $GENESIS_PATH : location of genesis file you would like to put export GENESIS_PATH = path/to/genesis.json Testnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o $GENESIS_PATH Mainnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/mainnet.json -o $GENESIS_PATH Create datadir \u00b6 create a folder to store tomochain data on your machine export DATA_DIR=/path/to/your/data/folder mkdir -p $DATA_DIR/tomo Initialize the chain from genesis \u00b6 tomo init $GENESIS_PATH --datadir $DATA_DIR Initialize / Import accounts for the nodes's keystore \u00b6 If you already had an existing account, import it. Otherwise, please initialize new accounts export KEYSTORE_DIR = path/to/keystore Initialize new accounts \u00b6 tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $KEYSTORE_DIR Import accounts \u00b6 tomo account import [ PRIVATE_KEY_FILE_OF_YOUR_ACCOUNT ] \\ --keystore $KEYSTORE_DIR \\ --password [ YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT ] List all available accounts in keystore folder \u00b6 tomo account list --datadir $DATA_DIR --keystore $KEYSTORE_DIR Start a node \u00b6 Environment variables \u00b6 $IDENTITY: the name of your node $PASSWORD: the password file to unlock your account $YOUR_COINBASE_ADDRESS: address of your account which generated in the previous step $NETWORK_ID: the networkId. Mainnet: 88. Testnet: 89 $BOOTNODES: The comma separated list of bootnodes. Find them here $WS_SECRET: The password to send data to the stats website. Find them here $NETSTATS_HOST: The stats website to report to, regarding to your environment. Find them here $NETSTATS_PORT: The port used by the stats website (usually 443) Let's start a node \u00b6 tomo --syncmode \"full\" \\ --datadir $DATA_DIR --networkid $NETWORK_ID --port 30303 \\ --keystore $KEYSTORE_DIR --password $PASSWORD \\ --identity $IDENTITY \\ --mine --gasprice 250000000 \\ --bootnodes $BOOTNODES \\ --ethstats $IDENTITY : $WS_SECRET @ $NETSTATS_HOST : $NETSTATS_PORT If you are a dapp developer, you should open RPC and WS apis: tomo --syncmode \"full\" \\ --datadir $DATA_DIR --networkid $NETWORK_ID --port 30303 \\ --keystore $KEYSTORE_DIR --password $PASSWORD \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0 .0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0 .0.0.0 --wsport 8546 --wsorigins \"*\" --unlock \" $YOUR_COINBASE_ADDRESS \" \\ --identity $IDENTITY \\ --mine --gasprice 250000000 \\ --bootnodes $BOOTNODES \\ --ethstats $IDENTITY : $WS_SECRET @ $NETSTATS_HOST : $NETSTATS_PORT Some explanations on the flags \u00b6 --verbosity: log level from 1 to 5. Here we're using 4 for debug messages --datadir: path to your data directory created above. --keystore: path to your account's keystore created above. --identity: your full-node's name. --password: your account's password. --networkid: our network ID. --port: your full-node's listening port (default to 30303) --rpc, --rpccorsdomain, --rpcaddr, --rpcport, --rpcvhosts: your full-node will accept RPC requests at 8545 TCP. --ws, --wsaddr, --wsport, --wsorigins: your full-node will accept Websocket requests at 8546 TCP. --mine: your full-node wants to register to be a candidate for masternode selection. --gasprice: Minimal gas price to accept for mining a transaction. --targetgaslimit: Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --bootnode: bootnode information to help to discover other nodes in the network --gcmode: blockchain garbage collection mode (\"full\", \"archive\") --synmode: blockchain sync mode (\"fast\", \"full\", or \"light\". More detail: https://github.com/tomochain/tomochain/blob/master/eth/downloader/modes.go#L24) --ethstats: send data to stats website --tomo-testnet: required when the networkid is testnet(89) --store-reward: store reward report To see all flags usage tomo --help See your node on stats page \u00b6 Testnet: https://stats.testnet.tomochain.com Mainnet: http://stats.tomochain.com Troubleshoot \u00b6 If your node seems run smooth with no error logs but still get slash frequently. You need to check system time on your node, your system time have to be synced from NTP server E.g: $ timedatectl Local time: Fri 2019-07-26 05:57:40 CEST Universal time: Fri 2019-07-26 03:57:40 UTC RTC time: Fri 2019-07-26 03:58:01 Time zone: Europe/Berlin (CEST, +0200) Network time on: yes NTP synchronized: no RTC in local TZ: no NTP synchronized: no means your node does not use NTP, you have to enable it.","title":"Binary"},{"location":"masternode/tomonative/#install-golang","text":"Reference: https://golang.org/doc/install Set environment variables Supports Go 1.10, 1.11, 1.12 export GOROOT = $HOME /usr/local/go export GOPATH = $HOME /go","title":"Install Golang"},{"location":"masternode/tomonative/#prepare-tomo-client-software","text":"","title":"Prepare tomo client software"},{"location":"masternode/tomonative/#build-from-source-code","text":"Create new directory for the project mkdir -p $GOPATH /src/github.com/ethereum/ cd $GOPATH /src/github.com/ethereum/ Download source code and build git clone https://github.com/tomochain/tomochain.git go-ethereum cd go-ethereum Checkout the latest version (e.g v1.5.4) git pull origin --tags git checkout v1.4.1 Build the project make all Binary file should be generated in build folder $GOPATH/src/github.com/ethereum/go-ethereum/build/bin alias tomo = $GOPATH /src/github.com/ethereum/go-ethereum/build/bin/tomo","title":"Build from source code"},{"location":"masternode/tomonative/#download-tomochain-binary-from-github-release-page","text":"Download tomo binary from our releases page alias tomo = path/to/tomo/binary","title":"Download TomoChain binary from Github release page"},{"location":"masternode/tomonative/#download-genesis-block","text":"$GENESIS_PATH : location of genesis file you would like to put export GENESIS_PATH = path/to/genesis.json Testnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o $GENESIS_PATH Mainnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/mainnet.json -o $GENESIS_PATH","title":"Download genesis block"},{"location":"masternode/tomonative/#create-datadir","text":"create a folder to store tomochain data on your machine export DATA_DIR=/path/to/your/data/folder mkdir -p $DATA_DIR/tomo","title":"Create datadir"},{"location":"masternode/tomonative/#initialize-the-chain-from-genesis","text":"tomo init $GENESIS_PATH --datadir $DATA_DIR","title":"Initialize the chain from genesis"},{"location":"masternode/tomonative/#initialize-import-accounts-for-the-nodess-keystore","text":"If you already had an existing account, import it. Otherwise, please initialize new accounts export KEYSTORE_DIR = path/to/keystore","title":"Initialize / Import accounts for the nodes's keystore"},{"location":"masternode/tomonative/#initialize-new-accounts","text":"tomo account new \\ --password [YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT] \\ --keystore $KEYSTORE_DIR","title":"Initialize new accounts"},{"location":"masternode/tomonative/#import-accounts","text":"tomo account import [ PRIVATE_KEY_FILE_OF_YOUR_ACCOUNT ] \\ --keystore $KEYSTORE_DIR \\ --password [ YOUR_PASSWORD_FILE_TO_LOCK_YOUR_ACCOUNT ]","title":"Import accounts"},{"location":"masternode/tomonative/#list-all-available-accounts-in-keystore-folder","text":"tomo account list --datadir $DATA_DIR --keystore $KEYSTORE_DIR","title":"List all available accounts in keystore folder"},{"location":"masternode/tomonative/#start-a-node","text":"","title":"Start a node"},{"location":"masternode/tomonative/#environment-variables","text":"$IDENTITY: the name of your node $PASSWORD: the password file to unlock your account $YOUR_COINBASE_ADDRESS: address of your account which generated in the previous step $NETWORK_ID: the networkId. Mainnet: 88. Testnet: 89 $BOOTNODES: The comma separated list of bootnodes. Find them here $WS_SECRET: The password to send data to the stats website. Find them here $NETSTATS_HOST: The stats website to report to, regarding to your environment. Find them here $NETSTATS_PORT: The port used by the stats website (usually 443)","title":"Environment variables"},{"location":"masternode/tomonative/#lets-start-a-node","text":"tomo --syncmode \"full\" \\ --datadir $DATA_DIR --networkid $NETWORK_ID --port 30303 \\ --keystore $KEYSTORE_DIR --password $PASSWORD \\ --identity $IDENTITY \\ --mine --gasprice 250000000 \\ --bootnodes $BOOTNODES \\ --ethstats $IDENTITY : $WS_SECRET @ $NETSTATS_HOST : $NETSTATS_PORT If you are a dapp developer, you should open RPC and WS apis: tomo --syncmode \"full\" \\ --datadir $DATA_DIR --networkid $NETWORK_ID --port 30303 \\ --keystore $KEYSTORE_DIR --password $PASSWORD \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0 .0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --rpcapi \"db,eth,net,web3,personal,debug\" \\ --gcmode \"archive\" \\ --ws --wsaddr 0 .0.0.0 --wsport 8546 --wsorigins \"*\" --unlock \" $YOUR_COINBASE_ADDRESS \" \\ --identity $IDENTITY \\ --mine --gasprice 250000000 \\ --bootnodes $BOOTNODES \\ --ethstats $IDENTITY : $WS_SECRET @ $NETSTATS_HOST : $NETSTATS_PORT","title":"Let's start a node"},{"location":"masternode/tomonative/#some-explanations-on-the-flags","text":"--verbosity: log level from 1 to 5. Here we're using 4 for debug messages --datadir: path to your data directory created above. --keystore: path to your account's keystore created above. --identity: your full-node's name. --password: your account's password. --networkid: our network ID. --port: your full-node's listening port (default to 30303) --rpc, --rpccorsdomain, --rpcaddr, --rpcport, --rpcvhosts: your full-node will accept RPC requests at 8545 TCP. --ws, --wsaddr, --wsport, --wsorigins: your full-node will accept Websocket requests at 8546 TCP. --mine: your full-node wants to register to be a candidate for masternode selection. --gasprice: Minimal gas price to accept for mining a transaction. --targetgaslimit: Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --bootnode: bootnode information to help to discover other nodes in the network --gcmode: blockchain garbage collection mode (\"full\", \"archive\") --synmode: blockchain sync mode (\"fast\", \"full\", or \"light\". More detail: https://github.com/tomochain/tomochain/blob/master/eth/downloader/modes.go#L24) --ethstats: send data to stats website --tomo-testnet: required when the networkid is testnet(89) --store-reward: store reward report To see all flags usage tomo --help","title":"Some explanations on the flags"},{"location":"masternode/tomonative/#see-your-node-on-stats-page","text":"Testnet: https://stats.testnet.tomochain.com Mainnet: http://stats.tomochain.com","title":"See your node on stats page"},{"location":"masternode/tomonative/#troubleshoot","text":"If your node seems run smooth with no error logs but still get slash frequently. You need to check system time on your node, your system time have to be synced from NTP server E.g: $ timedatectl Local time: Fri 2019-07-26 05:57:40 CEST Universal time: Fri 2019-07-26 03:57:40 UTC RTC time: Fri 2019-07-26 03:58:01 Time zone: Europe/Berlin (CEST, +0200) Network time on: yes NTP synchronized: no RTC in local TZ: no NTP synchronized: no means your node does not use NTP, you have to enable it.","title":"Troubleshoot"},{"location":"masternode/tomox-fullnode/","text":"This guide shows how to run a TomoX MongoDb Fullnode. To run the fullnode, you need to have MongoDb instance that enable replica set. Start MongoDB \u00b6 In this tutorial, we will run a mongo instance with Docker. Run this command: docker run -d -p 27017 :27017 --name mongodb \\ --hostname mongodb mongo:4.2 --replSet rs0 Enable Mongodb replica set: docker exec -it mongodb mongo --eval \"rs.initiate()\" Run a fullnode \u00b6 Download tomo version 2.0+ from TomoChain Github Release page E.g: wget https://github.com/tomochain/tomochain/releases/download/v2.0.0-beta/tomo-linux-amd64 -O tomo chmod +x tomo sudo mv tomo /usr/bin/ Create a coinbase address: tomo account new Init genesis block: Testnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o genesis.json tomo init genesis.json Then run the node: Testnet NODENAME =[ your_node_name ] tomo \\ --bootnodes \"enode://ce1191bf9a634e7939676d136816ad84941b079c03d6a96e64cca35852363012169055c6879c644e821dc236a01d0499a1b7ff39e9518dbc00da87c7f1898604@13.251.101.216:30301,enode://cf2d05f71f143d85dce45dae6f74fae0ba56fc5ea1d1c548a095e29a5becb3a1fb93eb33e7b1dec43946dcfe608fd1495a02740af710bc615b90ad60fcc04d14@13.250.94.232:30301\" \\ --networkid 89 \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0 .0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --ws --wsaddr 0 .0.0.0 --wsport 8546 --wsorigins \"*\" \\ --rpcapi \"personal,db,eth,net,web3,txpool,miner,tomox\" \\ --announce-txs \\ --tomo-testnet \\ --tomox.dbengine \"mongodb\" \\ --ethstats \" ${ NODENAME } :anna-coal-flee-carrie-zip-hhhh-tarry-laue-felon-rhine@stats.testnet.tomochain.com\" You node will sync the data from TomoChain network, you need to wait until your node catch up the latest block. You can check the status in the logs or the stats page. To save your time, you should download chaindata snapshot and override your chaindata. Troubleshoot \u00b6 Fatal: Failed to write genesis block You already inited genesis block for the default datadir. So you need to use another datadir by --datadir tomo account new --datadir [YOUR_DATADIR] tomo init genesis.json --datadir [YOUR_DATADIR] Example \u00b6 Testnet wget https://github.com/tomochain/tomochain/releases/download/v2.0.0-beta/tomo-linux-amd64 -O tomo chmod +x tomo sudo mv tomo /usr/bin/ tomo --version tomo version curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o genesis.json tomo init genesis.json tomo account new --datadir /tmp/chaindata tomo init genesis.json --datadir /tmp/chaindata/ NODENAME=testnode02 tomo \\ --bootnodes \"enode://ce1191bf9a634e7939676d136816ad84941b079c03d6a96e64cca35852363012169055c6879c644e821dc236a01d0499a1b7ff39e9518dbc00da87c7f1898604@13.251.101.216:30301,enode://cf2d05f71f143d85dce45dae6f74fae0ba56fc5ea1d1c548a095e29a5becb3a1fb93eb33e7b1dec43946dcfe608fd1495a02740af710bc615b90ad60fcc04d14@13.250.94.232:30301\" \\ --networkid 89 \\ --rpc \\ --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --ws --wsaddr 0.0.0.0 --wsport 8546 --wsorigins \"*\" \\ --rpcapi \"personal,db,eth,net,web3,txpool,miner,tomox\" \\ --announce-txs --tomo-testnet --tomox.dbengine \"mongodb\" \\ --ethstats \"${NODENAME}:anna-coal-flee-carrie-zip-hhhh-tarry-laue-felon-rhine@stats.testnet.tomochain.com\" \\ --datadir /tmp/chaindata/ Testnet chaindata snapshot \u00b6 To speed up syncing chaindata, you can download chaindata snapshot and override your local chaindata. Download: Testnet chaindata E.g: # Download wget -c https://chaindata-testnet.s3-ap-southeast-1.amazonaws.com/chaindata-testnet.tar # Uncompress tar xvf chaindata-testnet.tar","title":"Running a TomoX Mongodb fullnode"},{"location":"masternode/tomox-fullnode/#start-mongodb","text":"In this tutorial, we will run a mongo instance with Docker. Run this command: docker run -d -p 27017 :27017 --name mongodb \\ --hostname mongodb mongo:4.2 --replSet rs0 Enable Mongodb replica set: docker exec -it mongodb mongo --eval \"rs.initiate()\"","title":"Start MongoDB"},{"location":"masternode/tomox-fullnode/#run-a-fullnode","text":"Download tomo version 2.0+ from TomoChain Github Release page E.g: wget https://github.com/tomochain/tomochain/releases/download/v2.0.0-beta/tomo-linux-amd64 -O tomo chmod +x tomo sudo mv tomo /usr/bin/ Create a coinbase address: tomo account new Init genesis block: Testnet curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o genesis.json tomo init genesis.json Then run the node: Testnet NODENAME =[ your_node_name ] tomo \\ --bootnodes \"enode://ce1191bf9a634e7939676d136816ad84941b079c03d6a96e64cca35852363012169055c6879c644e821dc236a01d0499a1b7ff39e9518dbc00da87c7f1898604@13.251.101.216:30301,enode://cf2d05f71f143d85dce45dae6f74fae0ba56fc5ea1d1c548a095e29a5becb3a1fb93eb33e7b1dec43946dcfe608fd1495a02740af710bc615b90ad60fcc04d14@13.250.94.232:30301\" \\ --networkid 89 \\ --rpc --rpccorsdomain \"*\" --rpcaddr 0 .0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --ws --wsaddr 0 .0.0.0 --wsport 8546 --wsorigins \"*\" \\ --rpcapi \"personal,db,eth,net,web3,txpool,miner,tomox\" \\ --announce-txs \\ --tomo-testnet \\ --tomox.dbengine \"mongodb\" \\ --ethstats \" ${ NODENAME } :anna-coal-flee-carrie-zip-hhhh-tarry-laue-felon-rhine@stats.testnet.tomochain.com\" You node will sync the data from TomoChain network, you need to wait until your node catch up the latest block. You can check the status in the logs or the stats page. To save your time, you should download chaindata snapshot and override your chaindata.","title":"Run a fullnode"},{"location":"masternode/tomox-fullnode/#troubleshoot","text":"Fatal: Failed to write genesis block You already inited genesis block for the default datadir. So you need to use another datadir by --datadir tomo account new --datadir [YOUR_DATADIR] tomo init genesis.json --datadir [YOUR_DATADIR]","title":"Troubleshoot"},{"location":"masternode/tomox-fullnode/#example","text":"Testnet wget https://github.com/tomochain/tomochain/releases/download/v2.0.0-beta/tomo-linux-amd64 -O tomo chmod +x tomo sudo mv tomo /usr/bin/ tomo --version tomo version curl -L https://raw.githubusercontent.com/tomochain/tomochain/master/genesis/testnet.json -o genesis.json tomo init genesis.json tomo account new --datadir /tmp/chaindata tomo init genesis.json --datadir /tmp/chaindata/ NODENAME=testnode02 tomo \\ --bootnodes \"enode://ce1191bf9a634e7939676d136816ad84941b079c03d6a96e64cca35852363012169055c6879c644e821dc236a01d0499a1b7ff39e9518dbc00da87c7f1898604@13.251.101.216:30301,enode://cf2d05f71f143d85dce45dae6f74fae0ba56fc5ea1d1c548a095e29a5becb3a1fb93eb33e7b1dec43946dcfe608fd1495a02740af710bc615b90ad60fcc04d14@13.250.94.232:30301\" \\ --networkid 89 \\ --rpc \\ --rpccorsdomain \"*\" --rpcaddr 0.0.0.0 --rpcport 8545 --rpcvhosts \"*\" \\ --ws --wsaddr 0.0.0.0 --wsport 8546 --wsorigins \"*\" \\ --rpcapi \"personal,db,eth,net,web3,txpool,miner,tomox\" \\ --announce-txs --tomo-testnet --tomox.dbengine \"mongodb\" \\ --ethstats \"${NODENAME}:anna-coal-flee-carrie-zip-hhhh-tarry-laue-felon-rhine@stats.testnet.tomochain.com\" \\ --datadir /tmp/chaindata/","title":"Example"},{"location":"masternode/tomox-fullnode/#testnet-chaindata-snapshot","text":"To speed up syncing chaindata, you can download chaindata snapshot and override your local chaindata. Download: Testnet chaindata E.g: # Download wget -c https://chaindata-testnet.s3-ap-southeast-1.amazonaws.com/chaindata-testnet.tar # Uncompress tar xvf chaindata-testnet.tar","title":"Testnet chaindata snapshot"},{"location":"masternode/tomox-sdk/","text":"This guide will show you how to start a TomoX DEX on your server. To start, you need to download TomoX-SDK source code, and it includes two parts: TomoX-SDK : Backend server, API, it requires Mongodb database with rabbitmq. TomoX-SDK-UI : Frontend - DEX UI, requires NodeJs, React To enable trading for your DEX, you need to register your DEX on TomoRelayer by depositing 25K TOMO. Quick start \u00b6 Run this command on an empty server Ubuntu version 16+: bash <(curl -sSL https://tomochain.com/get-tomox.sh) After finishing the command above, you can see the result: See fullnode in the Stats Page (Testnet: https://stats.testnet.tomochain.com/) Open your relayer on browser (http://[SERVER_IP]) Note You need to wait for until your fullnode pass the block number that you registered your relayer to see the pairs Setup manually \u00b6 Prerequisite \u00b6 Minimum hardware and software requirements \u00b6 Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers.(You can check our base recommendations to create your fullnode here ) Directly facing internet (public IP, no NAT) 16 cores CPU 32 GB of RAM SSD Storage Note If you are running a node in Testnet, 8CPU/32GB of RAM is sufficient. Application platform \u00b6 Go 1.12 or higher Docker with the latest version Nodejs 8.16.x or higher Nginx Networks \u00b6 Your server needs to open these ports: 80/443 for HTTP/HTTPs 30303 for fullnode All IT systems require maintenance \u00b6 It is of the owner's responsibility to ensure over time that your node has enough: Disk space to store the new blockchain data Processing power to keep the chain operating at optimal speed Monitoring to be able to react quickly in case of a problem Security mesures like firewalling, os security patching, ssh via keypairs, etc. Prepare RabbitMQ, MongoDB, and TomoX fullnode \u00b6 Run MongoDB and TomoX Fullnode: Use this guide to run your fullnode and MongoDB on the server. And run RabbitMQ: docker run -d -p 5672 :5672 --name rabbitmq rabbitmq:3.8 Basic Deployment \u00b6 TomoX SDK Backend \u00b6 Download tomox-sdk binary from TomoX-SDK Github Releases . E.g: wget https://github.com/tomochain/tomox-sdk/releases/download/v1.0.1-beta/tomox-sdk.v1.0.1-beta.linux.amd64 -O tomox-sdk chmod +x tomox-sdk Or you can build the binary from the source code by following the steps below: Clone tomox-sdk to your server: $ git clone https://github.com/tomochain/tomox-sdk.git Go to tomox-sdk and create and edit your config file. cd tomox-sdk cp config/config.yaml.example config/config.yaml We have some parameter that needs to be changed. exchange_address : Your DEX coinbase (the address you use to register a DEX on TomoRelayer) contract_address : TomoRelayer smart contract address (Testnet: 0xe7c16037992bEcAFaeeE779Dacaf8991637953F3 ) After customizing your config, you can build SDK backend cd tomox-sdk GO111MODULE = on go mod download go build . And run it: ./tomox-sdk Note: tomox-sdk requires ./config/config.yaml and ./config/errors.yaml file to run the service. To run tomox-sdk as daemon service, you can use pm2 , supervisord or systemd . TomoX SDK UI \u00b6 Download the site from TomoX-SDK-UI Github Releases E.g: # download wget https://github.com/tomochain/tomox-sdk-ui/releases/download/v1.0.1-beta/tomox-sdk-ui.v1.0.1-beta.testnet.tar.gz # uncompress tar xvzf tomox-sdk-ui.v1.0.1-beta.testnet.tar.gz Or you can build the site by following the steps below: Clone tomox-sdk-ui to your server: git clone https://github.com/tomochain/tomox-sdk-ui.git Go to tomox-sdk-ui to update the env file: cd tomox-sdk-ui cp .env.sample .env There are some parameters that need to be changed: REACT_APP_ENGINE_HTTP_URL : url backend, http://[SERVER_IP_OR_DOMAIN]/api REACT_APP_ENGINE_WS_URL : url websocket backend, ws://[SERVER_IP_OR_DOMAIN]/socket You need to have yarn and sass to build the site, install it: npm install -g yarn sass Build the site: cd tomox-sdk-ui yarn install && yarn build Your DEX UI is created into ./buid directory. You can setup web server (nginx) and domain to publish your site to internet. You can use nginx to serve the site. Setup web server (nginx) \u00b6 TomoX-SDK backend run on port 8080 in the default. We can use Nginx to serve both TomoX-SDK and TomoX-SDK-UI and publish it to internet. server { listen 80; server_name _; root /path_to_your_tomox_sdk_ui_build; index index.html index.htm; # TomoX-SDK API location /api { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_pass http://localhost:8080; } # TomoX-SDK socket location /socket { auth_basic off; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/socket; } # TomoX-SDK UI location / { try_files $uri $uri/ /index.html; } } After reloading nginx with the new configuration. You can access your DEX via http://SERVER_IP Troubleshot & FAQ \u00b6 How to secure my DEX? You need to setup HTTPS and INBOUND firewall for your DEX, open only SSH (22), HTTP (80), HTTPS (443), Fullnode RLPX (30303). You can setup firewall by using software on your server or create firewall on your cloud provider. Why doesn't ledger work with my DEX? Ledger required HTTPS to work properly with your DEX. On testnet, you can only use HD path 44/60 for your ledger, path 44/889 is only supported on mainnet. Error: Cannot get tokens or pairs You need to wait for until your fullnode pass the block number that you registered your relayer to see the pairs. In another case, might you setup TomoX-SDK backend incorrectly. You need to make sure that exchange_address in config/config.yaml file is your DEX coinbase.","title":"Running a TomoX DEX"},{"location":"masternode/tomox-sdk/#quick-start","text":"Run this command on an empty server Ubuntu version 16+: bash <(curl -sSL https://tomochain.com/get-tomox.sh) After finishing the command above, you can see the result: See fullnode in the Stats Page (Testnet: https://stats.testnet.tomochain.com/) Open your relayer on browser (http://[SERVER_IP]) Note You need to wait for until your fullnode pass the block number that you registered your relayer to see the pairs","title":"Quick start"},{"location":"masternode/tomox-sdk/#setup-manually","text":"","title":"Setup manually"},{"location":"masternode/tomox-sdk/#prerequisite","text":"","title":"Prerequisite"},{"location":"masternode/tomox-sdk/#minimum-hardware-and-software-requirements","text":"Processing transactions is mostly CPU bound. Therefore we recommend running CPU optimized servers.(You can check our base recommendations to create your fullnode here ) Directly facing internet (public IP, no NAT) 16 cores CPU 32 GB of RAM SSD Storage Note If you are running a node in Testnet, 8CPU/32GB of RAM is sufficient.","title":"Minimum hardware and software requirements"},{"location":"masternode/tomox-sdk/#application-platform","text":"Go 1.12 or higher Docker with the latest version Nodejs 8.16.x or higher Nginx","title":"Application platform"},{"location":"masternode/tomox-sdk/#networks","text":"Your server needs to open these ports: 80/443 for HTTP/HTTPs 30303 for fullnode","title":"Networks"},{"location":"masternode/tomox-sdk/#all-it-systems-require-maintenance","text":"It is of the owner's responsibility to ensure over time that your node has enough: Disk space to store the new blockchain data Processing power to keep the chain operating at optimal speed Monitoring to be able to react quickly in case of a problem Security mesures like firewalling, os security patching, ssh via keypairs, etc.","title":"All IT systems require maintenance"},{"location":"masternode/tomox-sdk/#prepare-rabbitmq-mongodb-and-tomox-fullnode","text":"Run MongoDB and TomoX Fullnode: Use this guide to run your fullnode and MongoDB on the server. And run RabbitMQ: docker run -d -p 5672 :5672 --name rabbitmq rabbitmq:3.8","title":"Prepare RabbitMQ, MongoDB, and TomoX fullnode"},{"location":"masternode/tomox-sdk/#basic-deployment","text":"","title":"Basic Deployment"},{"location":"masternode/tomox-sdk/#tomox-sdk-backend","text":"Download tomox-sdk binary from TomoX-SDK Github Releases . E.g: wget https://github.com/tomochain/tomox-sdk/releases/download/v1.0.1-beta/tomox-sdk.v1.0.1-beta.linux.amd64 -O tomox-sdk chmod +x tomox-sdk Or you can build the binary from the source code by following the steps below: Clone tomox-sdk to your server: $ git clone https://github.com/tomochain/tomox-sdk.git Go to tomox-sdk and create and edit your config file. cd tomox-sdk cp config/config.yaml.example config/config.yaml We have some parameter that needs to be changed. exchange_address : Your DEX coinbase (the address you use to register a DEX on TomoRelayer) contract_address : TomoRelayer smart contract address (Testnet: 0xe7c16037992bEcAFaeeE779Dacaf8991637953F3 ) After customizing your config, you can build SDK backend cd tomox-sdk GO111MODULE = on go mod download go build . And run it: ./tomox-sdk Note: tomox-sdk requires ./config/config.yaml and ./config/errors.yaml file to run the service. To run tomox-sdk as daemon service, you can use pm2 , supervisord or systemd .","title":"TomoX SDK Backend"},{"location":"masternode/tomox-sdk/#tomox-sdk-ui","text":"Download the site from TomoX-SDK-UI Github Releases E.g: # download wget https://github.com/tomochain/tomox-sdk-ui/releases/download/v1.0.1-beta/tomox-sdk-ui.v1.0.1-beta.testnet.tar.gz # uncompress tar xvzf tomox-sdk-ui.v1.0.1-beta.testnet.tar.gz Or you can build the site by following the steps below: Clone tomox-sdk-ui to your server: git clone https://github.com/tomochain/tomox-sdk-ui.git Go to tomox-sdk-ui to update the env file: cd tomox-sdk-ui cp .env.sample .env There are some parameters that need to be changed: REACT_APP_ENGINE_HTTP_URL : url backend, http://[SERVER_IP_OR_DOMAIN]/api REACT_APP_ENGINE_WS_URL : url websocket backend, ws://[SERVER_IP_OR_DOMAIN]/socket You need to have yarn and sass to build the site, install it: npm install -g yarn sass Build the site: cd tomox-sdk-ui yarn install && yarn build Your DEX UI is created into ./buid directory. You can setup web server (nginx) and domain to publish your site to internet. You can use nginx to serve the site.","title":"TomoX SDK UI"},{"location":"masternode/tomox-sdk/#setup-web-server-nginx","text":"TomoX-SDK backend run on port 8080 in the default. We can use Nginx to serve both TomoX-SDK and TomoX-SDK-UI and publish it to internet. server { listen 80; server_name _; root /path_to_your_tomox_sdk_ui_build; index index.html index.htm; # TomoX-SDK API location /api { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_pass http://localhost:8080; } # TomoX-SDK socket location /socket { auth_basic off; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/socket; } # TomoX-SDK UI location / { try_files $uri $uri/ /index.html; } } After reloading nginx with the new configuration. You can access your DEX via http://SERVER_IP","title":"Setup web server (nginx)"},{"location":"masternode/tomox-sdk/#troubleshot-faq","text":"How to secure my DEX? You need to setup HTTPS and INBOUND firewall for your DEX, open only SSH (22), HTTP (80), HTTPS (443), Fullnode RLPX (30303). You can setup firewall by using software on your server or create firewall on your cloud provider. Why doesn't ledger work with my DEX? Ledger required HTTPS to work properly with your DEX. On testnet, you can only use HD path 44/60 for your ledger, path 44/889 is only supported on mainnet. Error: Cannot get tokens or pairs You need to wait for until your fullnode pass the block number that you registered your relayer to see the pairs. In another case, might you setup TomoX-SDK backend incorrectly. You need to make sure that exchange_address in config/config.yaml file is your DEX coinbase.","title":"Troubleshot &amp; FAQ"},{"location":"misc/wip/","text":"Work in progress \u00b6 We are working hard to provide a complete documentation for all our products but this page is not yet ready. If you have any questions, please join us on Gitter .","title":"Work in progress"},{"location":"misc/wip/#work-in-progress","text":"We are working hard to provide a complete documentation for all our products but this page is not yet ready. If you have any questions, please join us on Gitter .","title":"Work in progress"},{"location":"products/tomobridge/faq/","text":"Is TomoChain migrating to Binance Chain? \u00b6 No we are not. We are simply offering a 2-way bridge to allow TomoChain holders to operate on Binance Chain (TomoChain <-> Binance Chain). This is TomoChain\u2019s first real test of cross-chain compatibility using TomoBridge. What is TOMOB? \u00b6 TomoChain has issued BEP-2 TOMO tokens on Binance Chain called TOMOB. With the creation of TOMOB, we have locked up an equal number of native TOMO to ensure the total supply remains the same. Can I trade TOMOB on Binance DEX now after swapping? \u00b6 Yes, you can. How do I swap my TOMO to TOMOB and vice versa? \u00b6 Go to TomoBridge and swap between TOMO and TOMOB. Check out this video for details: TomoBridge Tutorial Can TomoB be staked? \u00b6 No you can't stake TomoB.","title":"FAQ"},{"location":"products/tomobridge/faq/#is-tomochain-migrating-to-binance-chain","text":"No we are not. We are simply offering a 2-way bridge to allow TomoChain holders to operate on Binance Chain (TomoChain <-> Binance Chain). This is TomoChain\u2019s first real test of cross-chain compatibility using TomoBridge.","title":"Is TomoChain migrating to Binance Chain?"},{"location":"products/tomobridge/faq/#what-is-tomob","text":"TomoChain has issued BEP-2 TOMO tokens on Binance Chain called TOMOB. With the creation of TOMOB, we have locked up an equal number of native TOMO to ensure the total supply remains the same.","title":"What is TOMOB?"},{"location":"products/tomobridge/faq/#can-i-trade-tomob-on-binance-dex-now-after-swapping","text":"Yes, you can.","title":"Can I trade TOMOB on Binance DEX now after swapping?"},{"location":"products/tomobridge/faq/#how-do-i-swap-my-tomo-to-tomob-and-vice-versa","text":"Go to TomoBridge and swap between TOMO and TOMOB. Check out this video for details: TomoBridge Tutorial","title":"How do I swap my TOMO to TOMOB and vice versa?"},{"location":"products/tomobridge/faq/#can-tomob-be-staked","text":"No you can't stake TomoB.","title":"Can TomoB be staked?"},{"location":"products/tomoissuer/","text":"Below are the most important features of TomoIssuer that have made it a revolutionary tool: User-Friendly Interface: Issue a TRC21 token in only a few steps. No Coding Experience Required: No prerequisite knowledge about smart contract programming is needed. Token Customization Options: Customize the token supply, token name, and minimum transaction fee through TomoIssuer\u2019s dashboard. Issue token \u00b6 At the homepage you will see two main options with the TomoIssuer. The first one is to create the new TRC21 token and the second one is donate fee for an existing TRC21 token. Go to Token Issuance dashboard, then sets of the parameters (From top to bottom: Token\u2019s Name; Token\u2019s Symbol; Token\u2019s Total Supply, and Token\u2019s Decimals). A small number of issuance fee will be charged, make sure that your wallet has enough testnet TOMO. You can get free testnet TOMO from our faucet . Disclaimer : The token issuance fee is not fixed, the fee is adjusted by RPC owner who runs the full-node TomoIssuer will ask you the token\u2019s information to confirm. Please check all the criteria carefully before clicking on the \u201cIssue token\u201d and wait for the contract to be deployed. Note: Any developer with some experience of developing and deploying smart contracts can refer to our reference implementation of the TRC21 standard to make customizations to the deployed token contract. Apply TomoZ protocol \u00b6 You will receive a notification when your token is successfully issued, click \u201cview detail\u201d to check the token\u2019s summary including: number of holders, transactions, etc. Choose \u201cApply to pay fee by any token\u201d for TomoZ integration. Once deployed, the issuer needs to claim to the network that the fees for all transactions to the newly deployed token contract will be paid in terms of the issued token. If you agree with the condition then move to the next step by entering \u201cI understand\u201d Token issuer need to deposit a minimum amount of 10TOMO to apply TomoZ protocol. The deposit can\u2019t be withdrawn, that amount is deducted to pay masternodes for transaction processing. Congratulations! You have already applied your TRC21 token to TomoZ protocol. Now you can edit the transaction fee (transaction fee in your token). You can change this number during the operation of your token. In the token management dashboard, you will have some buttons to interact with the tokens such as transfer, deposit more TOMO to pay for subsequent transaction fees. Don\u2019t forget to check your TRC21 fee fund because transactions will not be processed if the remaining deposit is not enough to pay transaction fees. Donate transaction fee \u00b6 If the TOMO funds of the token issuer in TomoIssuer is not enough to pay for subsequent transaction fees, any token holders can deposit more TOMO to the TomoIssuer contract to continue making transactions. Go to donate transaction fee tab from TomoIssuer\u2019s homepage. Enter the name of token you want to donate fee then input the donation amount. Considering that transaction fee in TomoChain is near-zero, 1 TOMO can power thousands of transactions. Transfer token \u00b6 You can transfer your TRC21 token to any member in your community just by going to \u201ctransfers token\u201d. TomoWallet (testnet version) will start running in a new tab so you can use it to transfer issued token.","title":"Overview"},{"location":"products/tomoissuer/#issue-token","text":"At the homepage you will see two main options with the TomoIssuer. The first one is to create the new TRC21 token and the second one is donate fee for an existing TRC21 token. Go to Token Issuance dashboard, then sets of the parameters (From top to bottom: Token\u2019s Name; Token\u2019s Symbol; Token\u2019s Total Supply, and Token\u2019s Decimals). A small number of issuance fee will be charged, make sure that your wallet has enough testnet TOMO. You can get free testnet TOMO from our faucet . Disclaimer : The token issuance fee is not fixed, the fee is adjusted by RPC owner who runs the full-node TomoIssuer will ask you the token\u2019s information to confirm. Please check all the criteria carefully before clicking on the \u201cIssue token\u201d and wait for the contract to be deployed. Note: Any developer with some experience of developing and deploying smart contracts can refer to our reference implementation of the TRC21 standard to make customizations to the deployed token contract.","title":"Issue token"},{"location":"products/tomoissuer/#apply-tomoz-protocol","text":"You will receive a notification when your token is successfully issued, click \u201cview detail\u201d to check the token\u2019s summary including: number of holders, transactions, etc. Choose \u201cApply to pay fee by any token\u201d for TomoZ integration. Once deployed, the issuer needs to claim to the network that the fees for all transactions to the newly deployed token contract will be paid in terms of the issued token. If you agree with the condition then move to the next step by entering \u201cI understand\u201d Token issuer need to deposit a minimum amount of 10TOMO to apply TomoZ protocol. The deposit can\u2019t be withdrawn, that amount is deducted to pay masternodes for transaction processing. Congratulations! You have already applied your TRC21 token to TomoZ protocol. Now you can edit the transaction fee (transaction fee in your token). You can change this number during the operation of your token. In the token management dashboard, you will have some buttons to interact with the tokens such as transfer, deposit more TOMO to pay for subsequent transaction fees. Don\u2019t forget to check your TRC21 fee fund because transactions will not be processed if the remaining deposit is not enough to pay transaction fees.","title":"Apply TomoZ protocol"},{"location":"products/tomoissuer/#donate-transaction-fee","text":"If the TOMO funds of the token issuer in TomoIssuer is not enough to pay for subsequent transaction fees, any token holders can deposit more TOMO to the TomoIssuer contract to continue making transactions. Go to donate transaction fee tab from TomoIssuer\u2019s homepage. Enter the name of token you want to donate fee then input the donation amount. Considering that transaction fee in TomoChain is near-zero, 1 TOMO can power thousands of transactions.","title":"Donate transaction fee"},{"location":"products/tomoissuer/#transfer-token","text":"You can transfer your TRC21 token to any member in your community just by going to \u201ctransfers token\u201d. TomoWallet (testnet version) will start running in a new tab so you can use it to transfer issued token.","title":"Transfer token"},{"location":"products/tomoissuer/policyprivacy/","text":"Last updated: July, 2019 INTRODUCTION \u00b6 Welcome to TomoIssuer, a free, open-source, client-side tool for interacting with the blockchain. TomoChain values privacy and we make a concerted effort to minimize and, to the extent possible, eliminate the exposure of personal data during the use of our interface. TomoIssuer does not collect, hold, or store keys, account information, or passwords. We do not collect data passively, do not monetize the collection of data, and do not use your data for marketing or advertising. To the extent we collect any personal information, this privacy policy (\u201cPolicy\u201d) describes how TomoIssuer collects, uses, and shares personal information of people who visit our website (the \u201cSite\u201d), use our mobile application, TomoIssuer (the \u201cApp\u201d), or otherwise use our services (collectively, the \u201cServices\u201d). This Policy applies to anyone who accesses the Services. Please read the Policy carefully to understand our practices regarding your information and how we will treat it. By visiting the Site, App, and/or using the Services, you acknowledge that the collection, use, and sharing of your information will take place as described in this Policy. So that we are clear about the terminology we are using, when we use the phrase \u201cPersonal Information\u201d in this Privacy Policy, we mean information about an individual that (either by itself or when combined with information from other available sources) allows that individual to be identified, including, the individual\u2019s name, telephone number, or e-mail address. THE BLOCKCHAIN \u00b6 Due to the inherent transparency of many blockchains, including the TomoChain Blockchain, transactions that individuals broadcast via TomoIssuer may be publicly accessible. This includes, but is not limited to, your public sending address, the public address of the receiver, the amount sent or received, and any other data a user has chosen to include in a given transaction. Information stored on a blockchain may be public, immutable, and difficult or even impossible to remove or delete. Transactions and addresses may reveal information about the user\u2019s identity and information can potentially be correlated now or in the future by any party who chooses to do so, including law enforcement. Users are encouraged to review how privacy and transparency on the blockchain works. WHAT WE COLLECT \u00b6 We collect information about you as described below. We use this information to enhance your experience with our Services. Information You Provide We may collect Personal Information you choose to provide to us. For example, when you contact us for support through the Services, you give us with your e-mail address and any other information that you choose to provide. Also, if you participate in a TomoIssuer offer, give-away, or promotion (\u201cPromotion\u201d), you provide your name, e-mail address, and mailing address. California Do Not Track Disclosures TomoIssuer does not track users over time and across third party websites to provide targeted advertising and therefore does not respond to Do Not Track (DNT) signals. USE OF INFORMATION \u00b6 We use the information that we have about you to provide support and certain Services to you. We may use the Personal Information we collect from and about you to (1) provide you with information or services that you request from us, including to respond to your comments, questions, and/or provide customer service; (2) monitor and analyze usage and trends and personalize and improve the Services and your experience using the Services; and (3) for any other purpose with your consent. SHARING OF PERSONAL INFORMATION \u00b6 We will not disclose your Personal Information other than as described below, and we do not and will not sell your Personal Information to anyone. We may share the Personal Information we collect from and about you (1) to fulfill the purpose for which you provided it; (2) with your consent; (3) for legal, protection, and safety purposes; (4) to comply with any court order, law, or legal process, including to respond to any government or regulatory request; (5) to protect the rights of TomoIssuer, our agents, customers, and others, including by enforcing our agreements, policies, and terms of service; and (6) with those who need it to do work for us (our Service Providers, as defined below). Service providers We may contract with third parties to perform functions related to the Services (\u201cService Providers\u201d). In general, Service Providers will have access to your Personal Information only to the extent needed to perform their business functions but may not use or share that personal information for purposes outside the scope of their functions related to the Services. LINKS TO OTHER SITES \u00b6 The Services contain links to other third-party websites or applications. Once you click on such a link and leave the Site or are redirected to a third-party website or application, you are no longer governed by this Policy. Any information you provide on those sites is subject to that third party\u2019s privacy policy and we are not responsible for the privacy and security practices and policies of those third-party sites or applications. OUR COMMITMENT TOWARDS CHILDREN'S PRIVACY \u00b6 We do not direct the Services to, nor do we knowingly collect any Personal Information from children under 13. Children under 13 are not eligible to use the Services. If we learn that someone using our Services is under 13 years of age, we will take steps to remove any Personal Information from our database and to prevent them from utilizing the Services. SECURITY OF YOUR PERSONAL INFORMATION & RIGHTS \u00b6 We are committed to protecting the security of Personal Information. We have taken certain physical, administrative, and technical steps to help safeguard the information we collect from and about you. While we take steps to help ensure the integrity and security of our network and systems, we cannot guarantee our security measures. In certain circumstances, you will also have the following rights: Right to access: the right to request certain information about, access to and copies of any Personal Information about you that we are holding (please note that you are entitled to request one copy of the Personal Information that we hold about you at no cost, but for any further copies, we reservethe right to charge a reasonable fee based on administration costs); Right to rectification: the right to have your Personal Information rectified if it is inaccurate or incomplete; Right to erasure/\u201cright to be forgotten\u201d: where the processing of your information is based on your consent, the right to withdraw that consent and the right to request that we delete or erase your Personal Information from our systems (however, this will not apply if we are required to hold on to the information for compliance with any legal obligation, or if we require the information to establish or defend any legal claim); Right to restriction of use of your information: the right to stop us from using your Personal Information or limit the way in which we can use it; Right to data portability: the right to request that we return any information you have provided in a structured, commonly used, and machine-readable format, or that we send it directly to another company, where technically feasible; and Right to object: the right to object to our use of your Personal Information including where we use it for our legitimate interests. Requests in relation to the above rights should be sent to: admin@tomochain.com Legal Basis for Processing The following legal bases apply to the ways in which we use and share an individual\u2019s Personal Information: We rely on an individual\u2019s consent to process Personal Information to provide support and/or carry out Promotions. This consent can be withdrawn at any time. We also process the information provided by an individual in our legitimate interests in ensuring our business is conducted legitimately and to a high standard. RETENTION \u00b6 We will retain the information you provide in order to process your request, provide support, and/or carry out and fulfill our Promotions. If you request support, we will retain your information for no longer than six (6) months. If you participate in a Promotion, we will retain your information until the Promotion is carried out and ninety (90) days after any prize, reward, or offer is fulfilled. Your Personal Information will then be deleted. CONTACT INFORMATION \u00b6 We welcome your comments or questions about this Policy. You may contact us at admin@tomochain.com CHANGES TO PRIVACY POLICY \u00b6 We may modify this Policy from time to time. If we make any changes, we will change the Last Updated date above. We also may provide additional notice, as applicable, depending on the type of change. If you object to any changes, you may stop using the Services. Your continued use of the Services after we publish or otherwise provide notice about our changes to the Policy means that you are consenting to the updated Policy.","title":"Policy Privacy"},{"location":"products/tomoissuer/policyprivacy/#introduction","text":"Welcome to TomoIssuer, a free, open-source, client-side tool for interacting with the blockchain. TomoChain values privacy and we make a concerted effort to minimize and, to the extent possible, eliminate the exposure of personal data during the use of our interface. TomoIssuer does not collect, hold, or store keys, account information, or passwords. We do not collect data passively, do not monetize the collection of data, and do not use your data for marketing or advertising. To the extent we collect any personal information, this privacy policy (\u201cPolicy\u201d) describes how TomoIssuer collects, uses, and shares personal information of people who visit our website (the \u201cSite\u201d), use our mobile application, TomoIssuer (the \u201cApp\u201d), or otherwise use our services (collectively, the \u201cServices\u201d). This Policy applies to anyone who accesses the Services. Please read the Policy carefully to understand our practices regarding your information and how we will treat it. By visiting the Site, App, and/or using the Services, you acknowledge that the collection, use, and sharing of your information will take place as described in this Policy. So that we are clear about the terminology we are using, when we use the phrase \u201cPersonal Information\u201d in this Privacy Policy, we mean information about an individual that (either by itself or when combined with information from other available sources) allows that individual to be identified, including, the individual\u2019s name, telephone number, or e-mail address.","title":"INTRODUCTION"},{"location":"products/tomoissuer/policyprivacy/#the-blockchain","text":"Due to the inherent transparency of many blockchains, including the TomoChain Blockchain, transactions that individuals broadcast via TomoIssuer may be publicly accessible. This includes, but is not limited to, your public sending address, the public address of the receiver, the amount sent or received, and any other data a user has chosen to include in a given transaction. Information stored on a blockchain may be public, immutable, and difficult or even impossible to remove or delete. Transactions and addresses may reveal information about the user\u2019s identity and information can potentially be correlated now or in the future by any party who chooses to do so, including law enforcement. Users are encouraged to review how privacy and transparency on the blockchain works.","title":"THE BLOCKCHAIN"},{"location":"products/tomoissuer/policyprivacy/#what-we-collect","text":"We collect information about you as described below. We use this information to enhance your experience with our Services. Information You Provide We may collect Personal Information you choose to provide to us. For example, when you contact us for support through the Services, you give us with your e-mail address and any other information that you choose to provide. Also, if you participate in a TomoIssuer offer, give-away, or promotion (\u201cPromotion\u201d), you provide your name, e-mail address, and mailing address. California Do Not Track Disclosures TomoIssuer does not track users over time and across third party websites to provide targeted advertising and therefore does not respond to Do Not Track (DNT) signals.","title":"WHAT WE COLLECT"},{"location":"products/tomoissuer/policyprivacy/#use-of-information","text":"We use the information that we have about you to provide support and certain Services to you. We may use the Personal Information we collect from and about you to (1) provide you with information or services that you request from us, including to respond to your comments, questions, and/or provide customer service; (2) monitor and analyze usage and trends and personalize and improve the Services and your experience using the Services; and (3) for any other purpose with your consent.","title":"USE OF INFORMATION"},{"location":"products/tomoissuer/policyprivacy/#sharing-of-personal-information","text":"We will not disclose your Personal Information other than as described below, and we do not and will not sell your Personal Information to anyone. We may share the Personal Information we collect from and about you (1) to fulfill the purpose for which you provided it; (2) with your consent; (3) for legal, protection, and safety purposes; (4) to comply with any court order, law, or legal process, including to respond to any government or regulatory request; (5) to protect the rights of TomoIssuer, our agents, customers, and others, including by enforcing our agreements, policies, and terms of service; and (6) with those who need it to do work for us (our Service Providers, as defined below). Service providers We may contract with third parties to perform functions related to the Services (\u201cService Providers\u201d). In general, Service Providers will have access to your Personal Information only to the extent needed to perform their business functions but may not use or share that personal information for purposes outside the scope of their functions related to the Services.","title":"SHARING OF PERSONAL INFORMATION"},{"location":"products/tomoissuer/policyprivacy/#links-to-other-sites","text":"The Services contain links to other third-party websites or applications. Once you click on such a link and leave the Site or are redirected to a third-party website or application, you are no longer governed by this Policy. Any information you provide on those sites is subject to that third party\u2019s privacy policy and we are not responsible for the privacy and security practices and policies of those third-party sites or applications.","title":"LINKS TO OTHER SITES"},{"location":"products/tomoissuer/policyprivacy/#our-commitment-towards-childrens-privacy","text":"We do not direct the Services to, nor do we knowingly collect any Personal Information from children under 13. Children under 13 are not eligible to use the Services. If we learn that someone using our Services is under 13 years of age, we will take steps to remove any Personal Information from our database and to prevent them from utilizing the Services.","title":"OUR COMMITMENT TOWARDS CHILDREN'S PRIVACY"},{"location":"products/tomoissuer/policyprivacy/#security-of-your-personal-information-rights","text":"We are committed to protecting the security of Personal Information. We have taken certain physical, administrative, and technical steps to help safeguard the information we collect from and about you. While we take steps to help ensure the integrity and security of our network and systems, we cannot guarantee our security measures. In certain circumstances, you will also have the following rights: Right to access: the right to request certain information about, access to and copies of any Personal Information about you that we are holding (please note that you are entitled to request one copy of the Personal Information that we hold about you at no cost, but for any further copies, we reservethe right to charge a reasonable fee based on administration costs); Right to rectification: the right to have your Personal Information rectified if it is inaccurate or incomplete; Right to erasure/\u201cright to be forgotten\u201d: where the processing of your information is based on your consent, the right to withdraw that consent and the right to request that we delete or erase your Personal Information from our systems (however, this will not apply if we are required to hold on to the information for compliance with any legal obligation, or if we require the information to establish or defend any legal claim); Right to restriction of use of your information: the right to stop us from using your Personal Information or limit the way in which we can use it; Right to data portability: the right to request that we return any information you have provided in a structured, commonly used, and machine-readable format, or that we send it directly to another company, where technically feasible; and Right to object: the right to object to our use of your Personal Information including where we use it for our legitimate interests. Requests in relation to the above rights should be sent to: admin@tomochain.com Legal Basis for Processing The following legal bases apply to the ways in which we use and share an individual\u2019s Personal Information: We rely on an individual\u2019s consent to process Personal Information to provide support and/or carry out Promotions. This consent can be withdrawn at any time. We also process the information provided by an individual in our legitimate interests in ensuring our business is conducted legitimately and to a high standard.","title":"SECURITY OF YOUR PERSONAL INFORMATION &amp; RIGHTS"},{"location":"products/tomoissuer/policyprivacy/#retention","text":"We will retain the information you provide in order to process your request, provide support, and/or carry out and fulfill our Promotions. If you request support, we will retain your information for no longer than six (6) months. If you participate in a Promotion, we will retain your information until the Promotion is carried out and ninety (90) days after any prize, reward, or offer is fulfilled. Your Personal Information will then be deleted.","title":"RETENTION"},{"location":"products/tomoissuer/policyprivacy/#contact-information","text":"We welcome your comments or questions about this Policy. You may contact us at admin@tomochain.com","title":"CONTACT INFORMATION"},{"location":"products/tomoissuer/policyprivacy/#changes-to-privacy-policy","text":"We may modify this Policy from time to time. If we make any changes, we will change the Last Updated date above. We also may provide additional notice, as applicable, depending on the type of change. If you object to any changes, you may stop using the Services. Your continued use of the Services after we publish or otherwise provide notice about our changes to the Policy means that you are consenting to the updated Policy.","title":"CHANGES TO PRIVACY POLICY"},{"location":"products/tomoissuer/termofcondition/","text":"ATTENTION: PLEASE READ CAREFULLY THESE TERMS AND CONDITIONS AS THEY AFFECT YOUR OBLIGATIONS AND LEGAL RIGHTS, INCLUDING, BUT NOT LIMITED TO LIMITATION OF LIABILITY. IF YOU DO NOT AGREE WITH THESE TERMS AND CONDITIONS DO NOT USE OUR SOFTWARE AND SERVICES AGREEMENT \u00b6 This licence agreement (Licence) is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Website defined below (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using the TomoIssuer (defined below) or any part of it, you accept and agree to be bound by the Terms and the Privacy & Data Protection Policy (accessible at: https://tomochain.com). Please read the Privacy & Data Protection Policy to find out how we collect, use, disclose, process and protect your personal data, in accordance with the Personal Data Protection Act 2012 (No. 26 of 2012) of Singapore. If you do not agree to these Terms, you should stop accessing or using the TomoIssuer immediately. In these Terms, the \u201cTomoIssuer\u201d means the application owned and operated by the Company and its subsidiaries, affiliates and related corporations. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason. ELIGIBILITY \u00b6 To be eligible to use TomoIssuer, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using TomoIssuer, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use TomoIssuer, however, and we reserve the right to change our eligibility criteria at any time. SERVICES \u00b6 3.1. You may use TomoIssuer under these Terms of Use and receive the following services (\u201cServices\u201d): a) Token issuance tool that allows you to issue TRC-21 tokens TomoIssuer provides a dashboard for any token issuer to issue a TRC-21 token on TomoChain by only configuring some parameters such as token supply, token name and minimum transaction fee. Through the dashboard, a token issuer can deploy a TRC-21 token on TomoChain without any coding experience. b, TomoZ protocol application allows token to be paid transaction fee by token itself Once deployed, the issuer needs to claim to the network that the fees for all transactions to the newly deployed token contract will be paid in terms of the issued token. The dashboard provides a convenient graphical interface for the issuer to make the claim transaction. 3.2. Any fee that you might pay while using the Services is not a remuneration of the Company for the Services. This fee is to pay for Masternodes who produces the block to maintain the TomoChain blockchain. 3.3. The Company provides you with technical opportunity to issue TRC-21 tokens, you are the only person who is liable for any losses, damages, claims related to the issuance of Tokens. The Company assumes no responsibility or liability related to your issuance of Tokens or your transfer of Tokens issued via TomoIssuer. RISK WARNING \u00b6 TomoIssuer will not be responsible for any losses, damages or claims arising from events falling within the scope of the following five categories: (1) Mistakes made by the user of any cryptocurrency-related software or service, e.g., forgotten passwords, and payments sent to wrong coin addresses. (2) Software problems of TomoIssuer and/or any cryptocurrency-related software or service, e.g., corrupted wallet file, incorrectly constructed transactions, unsafe cryptographic libraries, malware affecting the wallet and/or any cryptocurrency-related software or service. (3) Technical failures in the hardware of the user of any cryptocurrency-related software or service, e.g., data loss due to a faulty or damaged storage device. (4) Security problems experienced by the user of any cryptocurrency-related software or service, e.g., unauthorized access to users' wallets and/or accounts. (5) Actions or inactions of third parties and/or events experienced by third parties, e.g., bankruptcy of service providers, information security attacks on service providers, and fraud conducted by third parties. (6) There is considerable exposure to risk in any crypto-currency exchange transaction. Any transaction involving currencies involves risks including, but not limited to, the potential for changing economic conditions that may substantially affect the price or liquidity of a currency. Investments in crypto-currency exchange speculation may also be susceptible to sharp rises and falls as the relevant market values fluctuate. It is for this reason that when speculating in such markets it is advisable to use only risk capital. COMPLIANCE WITH TAX OBLIGATIONS \u00b6 The users of TomoIssuer are solely responsible to determinate what, if any, taxes apply to their crypto-currency transactions. The owners of, or contributors to, TomoIssuer are NOT responsible for determining the taxes that apply to crypto-currency transactions. LIMITATION OF LIABILITY \u00b6 Unless otherwise required by law, in no event shall the owners of, or contributors to, the wallet be liable for any damages of any kind, including, but not limited to, loss of use, loss of profits, or loss of data arising out of or in any way connected with the use of the wallet. In no way are the owners of, or contributors to, the wallet responsible for the actions, decisions, or other behavior taken or not taken by you in reliance upon the wallet. ARBITRATION \u00b6 The user of TomoMaster agrees to arbitrate any dispute arising from or in connection with the service or this disclaimer, except for disputes related to copyrights, logos, trademarks, trade names, trade secrets or patents. LAST AMENDMENT \u00b6 This disclaimer was amended for the last time on July 8th, 2019.","title":"Term Of Condition"},{"location":"products/tomoissuer/termofcondition/#agreement","text":"This licence agreement (Licence) is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Website defined below (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using the TomoIssuer (defined below) or any part of it, you accept and agree to be bound by the Terms and the Privacy & Data Protection Policy (accessible at: https://tomochain.com). Please read the Privacy & Data Protection Policy to find out how we collect, use, disclose, process and protect your personal data, in accordance with the Personal Data Protection Act 2012 (No. 26 of 2012) of Singapore. If you do not agree to these Terms, you should stop accessing or using the TomoIssuer immediately. In these Terms, the \u201cTomoIssuer\u201d means the application owned and operated by the Company and its subsidiaries, affiliates and related corporations. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason.","title":"AGREEMENT"},{"location":"products/tomoissuer/termofcondition/#eligibility","text":"To be eligible to use TomoIssuer, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using TomoIssuer, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use TomoIssuer, however, and we reserve the right to change our eligibility criteria at any time.","title":"ELIGIBILITY"},{"location":"products/tomoissuer/termofcondition/#services","text":"3.1. You may use TomoIssuer under these Terms of Use and receive the following services (\u201cServices\u201d): a) Token issuance tool that allows you to issue TRC-21 tokens TomoIssuer provides a dashboard for any token issuer to issue a TRC-21 token on TomoChain by only configuring some parameters such as token supply, token name and minimum transaction fee. Through the dashboard, a token issuer can deploy a TRC-21 token on TomoChain without any coding experience. b, TomoZ protocol application allows token to be paid transaction fee by token itself Once deployed, the issuer needs to claim to the network that the fees for all transactions to the newly deployed token contract will be paid in terms of the issued token. The dashboard provides a convenient graphical interface for the issuer to make the claim transaction. 3.2. Any fee that you might pay while using the Services is not a remuneration of the Company for the Services. This fee is to pay for Masternodes who produces the block to maintain the TomoChain blockchain. 3.3. The Company provides you with technical opportunity to issue TRC-21 tokens, you are the only person who is liable for any losses, damages, claims related to the issuance of Tokens. The Company assumes no responsibility or liability related to your issuance of Tokens or your transfer of Tokens issued via TomoIssuer.","title":"SERVICES"},{"location":"products/tomoissuer/termofcondition/#risk-warning","text":"TomoIssuer will not be responsible for any losses, damages or claims arising from events falling within the scope of the following five categories: (1) Mistakes made by the user of any cryptocurrency-related software or service, e.g., forgotten passwords, and payments sent to wrong coin addresses. (2) Software problems of TomoIssuer and/or any cryptocurrency-related software or service, e.g., corrupted wallet file, incorrectly constructed transactions, unsafe cryptographic libraries, malware affecting the wallet and/or any cryptocurrency-related software or service. (3) Technical failures in the hardware of the user of any cryptocurrency-related software or service, e.g., data loss due to a faulty or damaged storage device. (4) Security problems experienced by the user of any cryptocurrency-related software or service, e.g., unauthorized access to users' wallets and/or accounts. (5) Actions or inactions of third parties and/or events experienced by third parties, e.g., bankruptcy of service providers, information security attacks on service providers, and fraud conducted by third parties. (6) There is considerable exposure to risk in any crypto-currency exchange transaction. Any transaction involving currencies involves risks including, but not limited to, the potential for changing economic conditions that may substantially affect the price or liquidity of a currency. Investments in crypto-currency exchange speculation may also be susceptible to sharp rises and falls as the relevant market values fluctuate. It is for this reason that when speculating in such markets it is advisable to use only risk capital.","title":"RISK WARNING"},{"location":"products/tomoissuer/termofcondition/#compliance-with-tax-obligations","text":"The users of TomoIssuer are solely responsible to determinate what, if any, taxes apply to their crypto-currency transactions. The owners of, or contributors to, TomoIssuer are NOT responsible for determining the taxes that apply to crypto-currency transactions.","title":"COMPLIANCE WITH TAX OBLIGATIONS"},{"location":"products/tomoissuer/termofcondition/#limitation-of-liability","text":"Unless otherwise required by law, in no event shall the owners of, or contributors to, the wallet be liable for any damages of any kind, including, but not limited to, loss of use, loss of profits, or loss of data arising out of or in any way connected with the use of the wallet. In no way are the owners of, or contributors to, the wallet responsible for the actions, decisions, or other behavior taken or not taken by you in reliance upon the wallet.","title":"LIMITATION OF LIABILITY"},{"location":"products/tomoissuer/termofcondition/#arbitration","text":"The user of TomoMaster agrees to arbitrate any dispute arising from or in connection with the service or this disclaimer, except for disputes related to copyrights, logos, trademarks, trade names, trade secrets or patents.","title":"ARBITRATION"},{"location":"products/tomoissuer/termofcondition/#last-amendment","text":"This disclaimer was amended for the last time on July 8th, 2019.","title":"LAST AMENDMENT"},{"location":"products/tomomaster/features/","text":"Here are the pages and features available on TomoMaster. Home \u00b6 Network Status \u00b6 On TomoMaster, this area shows you what the current block is, the block time, how many blocks are in each epoch, and the next checkpoint (end of epoch). Candidates List \u00b6 The candidates list includes everyone who has deposited enough tokens to run a masternode as well as those who resigned running a masternode. A candidate is required to be one of the top 150 most voted masternode candidates on this list to become a masternode earning rewards. Voters can use this list to help choose which masternode candidate(s) they would like to stake their tokens for. Tip Voting for the top voted masternode candidate could lower your rewards as the rewards that go to voters per token is inversely proportional to the number of tokens staked for a specific masternode. Voting \u00b6 Voters who want to stake their tokens for a masternode or masternodes in order to earn rewards can vote through TomoMaster. Simply click \u2018Vote\u2019 and you will be taken to a page that allows you to vote through staking your tokens. Unvoting \u00b6 If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. Warning After unvoting, your TOMO will be locked in the smart contract for 48 hours before you are able to withdraw. Candidate \u00b6 General Information \u00b6 On the top of the page, you can find general information on a masternode candidate. Voters can use this information to better understand the masternode candidates they plan to vote for. Metrics \u00b6 The metrics area shows the performance of the masternode. This section is useful to see if the masternode candidate is strong or weak. Rewards \u00b6 The rewards section shows the estimated rewards the masternode has been receiving. If the masternode has been receiving less rewards than other masternodes, it might be a weak masternode. Voters \u00b6 Under the section for voters, you can see the list of TOMO stakers who voted for this candidate. Transactions \u00b6 In this section, you can see all transactions of this candidate. Voter \u00b6 General Information \u00b6 On this page you can find general information about specific voters. Tip As a voter, use this page to make sure you're earning your fair share of rewards. Candidates \u00b6 The candidates section shows all masternode candidates that have been voted by this voter. Rewards \u00b6 The rewards section shows the rewards the voter has been receiving. Tip If you voted an equal amount of TOMO for different masternodes and you see one is giving less rewards, you may have voted for a weak masternode and should consider changing your vote. Transactions \u00b6 This section shows all transactions by the voter. Settings \u00b6 Network Provider \u00b6 Use settings to select the network provider you are using for TomoMaster (e.g., Metamask, TomoChain Testnet, Custom Network). Account Infos \u00b6 This section will show you information about your public address and TOMO balance. Apply \u00b6 This web page is used by TOMO holders looking to apply to become a masternode candidate. Search \u00b6 On the top of the page, you can find a search bar. You can use this bar to search for a Candidate or Voter by its address. Tip The search will not work if your input is not an address.","title":"TomoMaster"},{"location":"products/tomomaster/features/#home","text":"","title":"Home"},{"location":"products/tomomaster/features/#network-status","text":"On TomoMaster, this area shows you what the current block is, the block time, how many blocks are in each epoch, and the next checkpoint (end of epoch).","title":"Network Status"},{"location":"products/tomomaster/features/#candidates-list","text":"The candidates list includes everyone who has deposited enough tokens to run a masternode as well as those who resigned running a masternode. A candidate is required to be one of the top 150 most voted masternode candidates on this list to become a masternode earning rewards. Voters can use this list to help choose which masternode candidate(s) they would like to stake their tokens for. Tip Voting for the top voted masternode candidate could lower your rewards as the rewards that go to voters per token is inversely proportional to the number of tokens staked for a specific masternode.","title":"Candidates List"},{"location":"products/tomomaster/features/#voting","text":"Voters who want to stake their tokens for a masternode or masternodes in order to earn rewards can vote through TomoMaster. Simply click \u2018Vote\u2019 and you will be taken to a page that allows you to vote through staking your tokens.","title":"Voting"},{"location":"products/tomomaster/features/#unvoting","text":"If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. Warning After unvoting, your TOMO will be locked in the smart contract for 48 hours before you are able to withdraw.","title":"Unvoting"},{"location":"products/tomomaster/features/#candidate","text":"","title":"Candidate"},{"location":"products/tomomaster/features/#general-information","text":"On the top of the page, you can find general information on a masternode candidate. Voters can use this information to better understand the masternode candidates they plan to vote for.","title":"General Information"},{"location":"products/tomomaster/features/#metrics","text":"The metrics area shows the performance of the masternode. This section is useful to see if the masternode candidate is strong or weak.","title":"Metrics"},{"location":"products/tomomaster/features/#rewards","text":"The rewards section shows the estimated rewards the masternode has been receiving. If the masternode has been receiving less rewards than other masternodes, it might be a weak masternode.","title":"Rewards"},{"location":"products/tomomaster/features/#voters","text":"Under the section for voters, you can see the list of TOMO stakers who voted for this candidate.","title":"Voters"},{"location":"products/tomomaster/features/#transactions","text":"In this section, you can see all transactions of this candidate.","title":"Transactions"},{"location":"products/tomomaster/features/#voter","text":"","title":"Voter"},{"location":"products/tomomaster/features/#general-information_1","text":"On this page you can find general information about specific voters. Tip As a voter, use this page to make sure you're earning your fair share of rewards.","title":"General Information"},{"location":"products/tomomaster/features/#candidates","text":"The candidates section shows all masternode candidates that have been voted by this voter.","title":"Candidates"},{"location":"products/tomomaster/features/#rewards_1","text":"The rewards section shows the rewards the voter has been receiving. Tip If you voted an equal amount of TOMO for different masternodes and you see one is giving less rewards, you may have voted for a weak masternode and should consider changing your vote.","title":"Rewards"},{"location":"products/tomomaster/features/#transactions_1","text":"This section shows all transactions by the voter.","title":"Transactions"},{"location":"products/tomomaster/features/#settings","text":"","title":"Settings"},{"location":"products/tomomaster/features/#network-provider","text":"Use settings to select the network provider you are using for TomoMaster (e.g., Metamask, TomoChain Testnet, Custom Network).","title":"Network Provider"},{"location":"products/tomomaster/features/#account-infos","text":"This section will show you information about your public address and TOMO balance.","title":"Account Infos"},{"location":"products/tomomaster/features/#apply","text":"This web page is used by TOMO holders looking to apply to become a masternode candidate.","title":"Apply"},{"location":"products/tomomaster/features/#search","text":"On the top of the page, you can find a search bar. You can use this bar to search for a Candidate or Voter by its address. Tip The search will not work if your input is not an address.","title":"Search"},{"location":"products/tomoscan/features/","text":"TomoScan \u00b6 TomoScan provides a block explorer to the TomoChain ecosystem with user friendly, detailed and professional user interface. TomoScan brings TomoChain\u2019s transparency to users. All blocks, transactions, smart contracts, tokens and basically everything happening on the chain are shown to the users. Furthermore, TomoScan also offers technical overview and expose useful metrics about the TomoChain. Home \u00b6 This is the home page of TomoScan. In the middle of the page you can find a search field that let you find anything by its address. Under it, some general stats gives you the total amount of accounts, tokens, contracts and blocks. Transactions \u00b6 All the transactions pages list the following informations: - The transaction's ID (Transaction Hash). - The block containing this transaction. - The transaction's age. - The sender's address. - The recipient's address. - The transaction's ammount in TOMO. - The gas fees. All transactions \u00b6 All the transactions that happened on the chain. Sign transactions \u00b6 Sign transactions emited by the masternodes. Pending transactions \u00b6 Transactions that are not yet confirmed. Other Transactions \u00b6 All the transactions minus the sign and pending ones. Transaction \u00b6 When consulting a single transaction, the page list the following informations: - The transaction's ID (Transaction Hash). - The transaction status. - The transaction containing block. - The transaction age. - The transaction sender address. - The transaction recipient address. - The transaction ammount in TOMO. - The transaction gas used. - The transaction gas price. - The transaction total gas cost. - The transaction data. Accounts \u00b6 List the accounts on TomoChain. All accounts \u00b6 All the accounts that exist on the chain. The page list the following informations: - The account rank (ordered by balance). - The account address. - The account balance in TOMO. - The account transactions count. All masternodes \u00b6 All the masternode accounts that exist on the chain. The page list these informations: - The account address. - The account linked to the masternode name. - The account linked to the masternode owner. - The account linked to the masternode status. - The account linked to the masternode latest signed block. Verified Contracts \u00b6 All the verified contracts that exist on the chain. A contracts has to be manually verified by it's owner to appear here. The page list the following informations: - The account address. - The account contract name. - The account balance in TOMO. - The account transactions count. - The account contract verification date. Account \u00b6 When clicking on an account, the following informations are displayed: - The account balance in TOMO. - The TOMO USD Value. - The account transactions count. - The transactions of this account. - The mined blocks. - The events of this account. - The rewards of the account for each epoch. Tokens \u00b6 List the tokens on TomoChain and their transfers. All Tokens \u00b6 All the tokens on the chain. The page list the following informations: - The token address (hash). - The token name. - The token symbol. - The token total supply. - The token decimals. - The token transactions count. Tokens transfers \u00b6 All the tokens transfers on the chain. The page list the following informations: - The transaction hash. - The transaction age. - The transaction sender address. - The transaction recipient address. - The transaction value in token. - The token name. Token \u00b6 When clicking on an token, the following informations are displayed: - The token name. - The number of token holders. - The number of transfers made with the token. - The link of the official site, please keep in mind that TomoScan is constantly updating. Some links might be missing. - The official contract adress. - Number of decimal. - Useful links. - \"Filtered by\": use it if you want to see a the transactions of an adress in particular. In this example, you can check all the transactions made of the BigBom tokens from an adress to another. Blocks \u00b6 List all the blocks on TomoChain. The page list the following informations: - The block height (index). - The block age. - The block number of transactions. - The block creator. - The block total gas used. - The block finality. Finality The percentage of the network who validated this block. When it reach 75%, the block reach it's finality state and is added permanently to the chain. Block \u00b6 When consulting a single block, the page list the following informations: - The block height (index). - The block age. - The block number of transactions. - The block hash. - The block parent hash. - The block creator adress. - The block finality. - The block total gas used. - The global pre block gas limit. - The block extra data. A tab \"Transactions\" contains the list of transactions in this block. A tab \"Signers\" contains the list of masternode who signed this block. Login and Register \u00b6 If you register, you will be able to keep a watchlist of some addresses you are interested into. You will receive an email notification when this address perform actions. Please keep in mind that TomoScan is subject to go through some changes. This is why your feedback is so much appreciated!","title":"TomoScan"},{"location":"products/tomoscan/features/#tomoscan","text":"TomoScan provides a block explorer to the TomoChain ecosystem with user friendly, detailed and professional user interface. TomoScan brings TomoChain\u2019s transparency to users. All blocks, transactions, smart contracts, tokens and basically everything happening on the chain are shown to the users. Furthermore, TomoScan also offers technical overview and expose useful metrics about the TomoChain.","title":"TomoScan"},{"location":"products/tomoscan/features/#home","text":"This is the home page of TomoScan. In the middle of the page you can find a search field that let you find anything by its address. Under it, some general stats gives you the total amount of accounts, tokens, contracts and blocks.","title":"Home"},{"location":"products/tomoscan/features/#transactions","text":"All the transactions pages list the following informations: - The transaction's ID (Transaction Hash). - The block containing this transaction. - The transaction's age. - The sender's address. - The recipient's address. - The transaction's ammount in TOMO. - The gas fees.","title":"Transactions"},{"location":"products/tomoscan/features/#all-transactions","text":"All the transactions that happened on the chain.","title":"All transactions"},{"location":"products/tomoscan/features/#sign-transactions","text":"Sign transactions emited by the masternodes.","title":"Sign transactions"},{"location":"products/tomoscan/features/#pending-transactions","text":"Transactions that are not yet confirmed.","title":"Pending transactions"},{"location":"products/tomoscan/features/#other-transactions","text":"All the transactions minus the sign and pending ones.","title":"Other Transactions"},{"location":"products/tomoscan/features/#transaction","text":"When consulting a single transaction, the page list the following informations: - The transaction's ID (Transaction Hash). - The transaction status. - The transaction containing block. - The transaction age. - The transaction sender address. - The transaction recipient address. - The transaction ammount in TOMO. - The transaction gas used. - The transaction gas price. - The transaction total gas cost. - The transaction data.","title":"Transaction"},{"location":"products/tomoscan/features/#accounts","text":"List the accounts on TomoChain.","title":"Accounts"},{"location":"products/tomoscan/features/#all-accounts","text":"All the accounts that exist on the chain. The page list the following informations: - The account rank (ordered by balance). - The account address. - The account balance in TOMO. - The account transactions count.","title":"All accounts"},{"location":"products/tomoscan/features/#all-masternodes","text":"All the masternode accounts that exist on the chain. The page list these informations: - The account address. - The account linked to the masternode name. - The account linked to the masternode owner. - The account linked to the masternode status. - The account linked to the masternode latest signed block.","title":"All masternodes"},{"location":"products/tomoscan/features/#verified-contracts","text":"All the verified contracts that exist on the chain. A contracts has to be manually verified by it's owner to appear here. The page list the following informations: - The account address. - The account contract name. - The account balance in TOMO. - The account transactions count. - The account contract verification date.","title":"Verified Contracts"},{"location":"products/tomoscan/features/#account","text":"When clicking on an account, the following informations are displayed: - The account balance in TOMO. - The TOMO USD Value. - The account transactions count. - The transactions of this account. - The mined blocks. - The events of this account. - The rewards of the account for each epoch.","title":"Account"},{"location":"products/tomoscan/features/#tokens","text":"List the tokens on TomoChain and their transfers.","title":"Tokens"},{"location":"products/tomoscan/features/#all-tokens","text":"All the tokens on the chain. The page list the following informations: - The token address (hash). - The token name. - The token symbol. - The token total supply. - The token decimals. - The token transactions count.","title":"All Tokens"},{"location":"products/tomoscan/features/#tokens-transfers","text":"All the tokens transfers on the chain. The page list the following informations: - The transaction hash. - The transaction age. - The transaction sender address. - The transaction recipient address. - The transaction value in token. - The token name.","title":"Tokens transfers"},{"location":"products/tomoscan/features/#token","text":"When clicking on an token, the following informations are displayed: - The token name. - The number of token holders. - The number of transfers made with the token. - The link of the official site, please keep in mind that TomoScan is constantly updating. Some links might be missing. - The official contract adress. - Number of decimal. - Useful links. - \"Filtered by\": use it if you want to see a the transactions of an adress in particular. In this example, you can check all the transactions made of the BigBom tokens from an adress to another.","title":"Token"},{"location":"products/tomoscan/features/#blocks","text":"List all the blocks on TomoChain. The page list the following informations: - The block height (index). - The block age. - The block number of transactions. - The block creator. - The block total gas used. - The block finality. Finality The percentage of the network who validated this block. When it reach 75%, the block reach it's finality state and is added permanently to the chain.","title":"Blocks"},{"location":"products/tomoscan/features/#block","text":"When consulting a single block, the page list the following informations: - The block height (index). - The block age. - The block number of transactions. - The block hash. - The block parent hash. - The block creator adress. - The block finality. - The block total gas used. - The global pre block gas limit. - The block extra data. A tab \"Transactions\" contains the list of transactions in this block. A tab \"Signers\" contains the list of masternode who signed this block.","title":"Block"},{"location":"products/tomoscan/features/#login-and-register","text":"If you register, you will be able to keep a watchlist of some addresses you are interested into. You will receive an email notification when this address perform actions. Please keep in mind that TomoScan is subject to go through some changes. This is why your feedback is so much appreciated!","title":"Login and Register"},{"location":"products/tomowallet/features/","text":"TomoWallet \u00b6 TomoWallet is available for Android, iOS and Web Application. Android Download \u00b6 iOS Download \u00b6 TomoWallet Web \u00b6 Create new wallet \u00b6 You can create a new wallet, if you click on \"CREATE NEW WALLET\" after launching the App. You will receive a recovery passphrase consisting of 12 words to restore your wallet in case you lose your password. To protect your wallet you should click on \"Settings\" > \"Create passcode\" so all transfers from your wallet will need to be confirmed with a passcode. Import wallet \u00b6 By clicking on \"IMPORT YOUR WALLET\" after launching the App, you can choose to import your wallet either with your private key or your recovery passphrase. There is also a \"view only\" mode, where you just have to enter your adress. You can monitor, but not send any transactions in this mode. Receive TOMO \u00b6 By clicking on \"Adress\" you can either receive TOMO by sharing your adress or your QR-code. It's also possible to create a QR-code that requests a certain amount. Send Tomo \u00b6 By clicking on \"Send\" you can either send TOMO by scanning a QR-code or entering a recipient adress manually. Vote for masternodes \u00b6 TomoWallet has an integrated voting function, that enables stakeholders to vote without having to login to the masternode platform. Token holders are recommended to read this Voting tutorial for how to vote for masterrnodes using TomoWallet. Track rewards \u00b6 Voters and masternodes can track their rewards from staking dicrectly in the App.","title":"Features"},{"location":"products/tomowallet/features/#tomowallet","text":"TomoWallet is available for Android, iOS and Web Application.","title":"TomoWallet"},{"location":"products/tomowallet/features/#android-download","text":"","title":"Android Download"},{"location":"products/tomowallet/features/#ios-download","text":"","title":"iOS Download"},{"location":"products/tomowallet/features/#tomowallet-web","text":"","title":"TomoWallet Web"},{"location":"products/tomowallet/features/#create-new-wallet","text":"You can create a new wallet, if you click on \"CREATE NEW WALLET\" after launching the App. You will receive a recovery passphrase consisting of 12 words to restore your wallet in case you lose your password. To protect your wallet you should click on \"Settings\" > \"Create passcode\" so all transfers from your wallet will need to be confirmed with a passcode.","title":"Create new wallet"},{"location":"products/tomowallet/features/#import-wallet","text":"By clicking on \"IMPORT YOUR WALLET\" after launching the App, you can choose to import your wallet either with your private key or your recovery passphrase. There is also a \"view only\" mode, where you just have to enter your adress. You can monitor, but not send any transactions in this mode.","title":"Import wallet"},{"location":"products/tomowallet/features/#receive-tomo","text":"By clicking on \"Adress\" you can either receive TOMO by sharing your adress or your QR-code. It's also possible to create a QR-code that requests a certain amount.","title":"Receive TOMO"},{"location":"products/tomowallet/features/#send-tomo","text":"By clicking on \"Send\" you can either send TOMO by scanning a QR-code or entering a recipient adress manually.","title":"Send Tomo"},{"location":"products/tomowallet/features/#vote-for-masternodes","text":"TomoWallet has an integrated voting function, that enables stakeholders to vote without having to login to the masternode platform. Token holders are recommended to read this Voting tutorial for how to vote for masterrnodes using TomoWallet.","title":"Vote for masternodes"},{"location":"products/tomowallet/features/#track-rewards","text":"Voters and masternodes can track their rewards from staking dicrectly in the App.","title":"Track rewards"},{"location":"products/tomowallet/terms/","text":"AGREEMENT \u00b6 This licence agreement (Licence) is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Website defined below (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using the TomoWallet (defined below) or any part of it, you accept and agree to be bound by the Terms and the Privacy & Data Protection Policy (accessible at: https://tomochain.com). Please read the Privacy & Data Protection Policy to find out how we collect, use, disclose, process and protect your personal data, in accordance with the Personal Data Protection Act 2012 (No. 26 of 2012) of Singapore. If you do not agree to these Terms, you should stop accessing or using the TomoWallet immediately. In these Terms, the \u201cTomoWallet\u201d means the application owned and operated by the Company and its subsidiaries, affiliates and related corporations. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason. ELIGIBILITY \u00b6 To be eligible to use TomoWallet, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using TomoWallet, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use TomoWallet, however, and we reserve the right to change our eligibility criteria at any time. DEFINITIONS \u00b6 \u201cApplicable Law\u201d means the laws of the Republic of Singapore. -\u201cCompany\u201d means Tomochain Pte.Ltd.(UEN:UEN201716924E), a company incorporated under the laws of Singapore and having its registered office at 10 Anson Road, #22-15, International Plaza, Singapore 079903. \u201cCryptocurrency(ies)\u201d means a digital currency, also referred to as a token, in which encryption techniques are used to regulate the generation of units of the currency and to verify the transfer of the currency and which operates independently of the central bank of a country. Such digital currency is not legal tender issued by any central bank nor does it confer any interest in the ownership of, or debt relating to, any asset or property. \u201cDigital Assets\u201d Similar to Cryptocurrencies, Digital Assets are not backed by governments or central banks. They are not protected by government deposit protection schemes. Digital Assets may be extremely volatile. Digital Assets technology is extremely nascent and unproven. Digital Assets software and providers are regularly subject to hacking attempts resulting in loss of funds. \u201cYou\u201d or \u201cYour\u201d or \u201cToken Holder\u201d means and shall refer to any person or entity (whether incorporated or not) who purchases the TOMO. THE BLOCKCHAIN SERVICES \u00b6 Wallet Address, Private Key, and Backup Capabilities. The private key is connected to the Wallet address and, together, they can be used to authorize the transfer of Cryptocurrencies to and from that Wallet address. You are solely responsible for maintaining the security of your private key and any mnemonic (backup) phrase associated with your Wallet. You must keep your Wallet address, mnemonic (backup) phrase, and private key access information secure. Failure to do so may result in the loss of control of Cryptocurrencies associated with the Wallet. TomoWallet Cannot Assist With Password Retrieval. TomoWallet stores your Wallet address but does not receive or store your Wallet password, encrypted private key, unencrypted private key, or mnemonic (backup) phrase associated with your Wallet. We cannot, therefore, assist you with Wallet password retrieval. We cannot generate a new password for your Wallet if you fail to remember your original password. If you have not safely stored a backup of any Wallet address and private key pairs maintained in your Wallet, you accept and acknowledge that any Cryptocurrencies you have associated with such a Wallet address will become inaccessible if you do not have your Wallet password. Cryptocurrencies Transactions. In order to be completed, all proposed Cryptocurrencies transactions must be confirmed and recorded in the Cryptocurrencies of associated public blockchain. By using TomoWallet, you acknowledge and agree that the transaction details you submit may not be completed, or may be substantially delayed, by the TomoChain Networks. Transactions. Once transaction details have been submitted via the Services, we cannot assist you to cancel or otherwise modify your transaction. You must ensure that you have an adequate balance in your Wallet and/or gas to complete transactions before initiating a transaction. You acknowledge and agree that we will not be liable for any failed transactions due to insufficient funds or gas associated with your TomoWallet account. RESTRICTIONS OF USING TomoWallet \u00b6 As a user of the Services, we grant you a limited, personal, non-commercial, non-exclusive, non-transferable, and revocable license to use TomoWallet. When using our Services, we ask that you follow some basic rules: Don\u2019t Use Our Services to Break the Law. You agree that you will not violate any laws when using our Services. This includes any local, provincial, state, federal, national, or international laws that may apply to you. You agree that you will not use our Services to pay for, support, or otherwise engage in any illegal activities including, but not limited to, illegal gambling, fraud, money laundering, or terrorist activities. If we discover that you have violated this Agreement or other regulatory requirements including, but not limited to, the Bank Secrecy Act, by participating in money laundering or by financing terrorist activities, we will take proportional disciplinary action. You further agree not to encourage or induce any third party to engage in any of the activities prohibited under this Section. Don\u2019t Interfere With Other\u2019s Use of the Services. You agree that you will not use or attempt to use another user\u2019s Wallet without authorization or use our Services in any manner that could interfere, disrupt, negatively affect, or inhibit other users from fully enjoying it. Don\u2019t Try to Harm Our System. You agree not to distribute any virus or other harmful computer code through TomoWallet. You also agree to not take any action that may impose an unreasonable or disproportionately large load on our or any of our third party providers\u2019 infrastructure. Don\u2019t Attempt to Circumvent Our Security. You agree not to bypass, circumvent, or attempt to bypass or circumvent any measures that we may use to prevent or restrict access to the Services including, without limitation, other accounts, computer systems, or networks connected to the Services. Any use of TomoWallet other than as specifically authorized in this Agreement, without our prior written permission, is strictly prohibited and will terminate your license to use TomoWallet. LIMITATION OF LIABILITY & DISCLAIMER OF WARRANTIES \u00b6 You understand and agree that we have no control over, and no duty to take any action regarding: Failures, disruptions, errors, or delays in processing Cryptocurrencies that you may experience while using the Services; The risk of failure of hardware, software, and Internet connections; The risk of malicious software being introduced or found in the software underlying TomoWallet; The risk that third parties may obtain unauthorized access to information stored within your Wallet, including, but not limited to your Wallet address, private key, and mnemonic (backup) phrase; and The risk of unknown vulnerabilities in or unanticipated changes to the TomoChain Networks. Disasters. Disasters may damage the Cryptocurrencies systems resulting in loss of Cryptocurrencies held by users.","title":"Terms & Privacy"},{"location":"products/tomowallet/terms/#agreement","text":"This licence agreement (Licence) is a legal agreement between you (Licensee or you) and TomoChain Pte. Ltd. (UEN: 201716924E), a company incorporated under the laws of Singapore, and its subsidiaries, affiliates and related corporations who own or operate the Website defined below (\u201cCompany\u201d, \u201cwe\u201d, \u201cus\u201d or \u201cour\u201d). By accessing or using the TomoWallet (defined below) or any part of it, you accept and agree to be bound by the Terms and the Privacy & Data Protection Policy (accessible at: https://tomochain.com). Please read the Privacy & Data Protection Policy to find out how we collect, use, disclose, process and protect your personal data, in accordance with the Personal Data Protection Act 2012 (No. 26 of 2012) of Singapore. If you do not agree to these Terms, you should stop accessing or using the TomoWallet immediately. In these Terms, the \u201cTomoWallet\u201d means the application owned and operated by the Company and its subsidiaries, affiliates and related corporations. The Company reserves the right to change, modify, add or remove any of terms contained in these Terms, at any time, for any reason.","title":"AGREEMENT"},{"location":"products/tomowallet/terms/#eligibility","text":"To be eligible to use TomoWallet, you must be at least eighteen (18) years old and be able to form legally binding contracts. If you are using our Services on behalf of a legal entity, you further represent and warrant that: (a) the legal entity is duly organized and validly existing under the applicable laws of the jurisdiction of its organization; and (b) you are duly authorized by such legal entity to act on its behalf. You can only use our Services if permitted under the laws of your jurisdiction. Please make sure that these Terms are in compliance with all laws, rules, and regulations that apply to you. By using TomoWallet, you represent and warrant that you meet all eligibility requirements that we outline in these Terms. We may still refuse to let certain people access or use TomoWallet, however, and we reserve the right to change our eligibility criteria at any time.","title":"ELIGIBILITY"},{"location":"products/tomowallet/terms/#definitions","text":"\u201cApplicable Law\u201d means the laws of the Republic of Singapore. -\u201cCompany\u201d means Tomochain Pte.Ltd.(UEN:UEN201716924E), a company incorporated under the laws of Singapore and having its registered office at 10 Anson Road, #22-15, International Plaza, Singapore 079903. \u201cCryptocurrency(ies)\u201d means a digital currency, also referred to as a token, in which encryption techniques are used to regulate the generation of units of the currency and to verify the transfer of the currency and which operates independently of the central bank of a country. Such digital currency is not legal tender issued by any central bank nor does it confer any interest in the ownership of, or debt relating to, any asset or property. \u201cDigital Assets\u201d Similar to Cryptocurrencies, Digital Assets are not backed by governments or central banks. They are not protected by government deposit protection schemes. Digital Assets may be extremely volatile. Digital Assets technology is extremely nascent and unproven. Digital Assets software and providers are regularly subject to hacking attempts resulting in loss of funds. \u201cYou\u201d or \u201cYour\u201d or \u201cToken Holder\u201d means and shall refer to any person or entity (whether incorporated or not) who purchases the TOMO.","title":"DEFINITIONS"},{"location":"products/tomowallet/terms/#the-blockchain-services","text":"Wallet Address, Private Key, and Backup Capabilities. The private key is connected to the Wallet address and, together, they can be used to authorize the transfer of Cryptocurrencies to and from that Wallet address. You are solely responsible for maintaining the security of your private key and any mnemonic (backup) phrase associated with your Wallet. You must keep your Wallet address, mnemonic (backup) phrase, and private key access information secure. Failure to do so may result in the loss of control of Cryptocurrencies associated with the Wallet. TomoWallet Cannot Assist With Password Retrieval. TomoWallet stores your Wallet address but does not receive or store your Wallet password, encrypted private key, unencrypted private key, or mnemonic (backup) phrase associated with your Wallet. We cannot, therefore, assist you with Wallet password retrieval. We cannot generate a new password for your Wallet if you fail to remember your original password. If you have not safely stored a backup of any Wallet address and private key pairs maintained in your Wallet, you accept and acknowledge that any Cryptocurrencies you have associated with such a Wallet address will become inaccessible if you do not have your Wallet password. Cryptocurrencies Transactions. In order to be completed, all proposed Cryptocurrencies transactions must be confirmed and recorded in the Cryptocurrencies of associated public blockchain. By using TomoWallet, you acknowledge and agree that the transaction details you submit may not be completed, or may be substantially delayed, by the TomoChain Networks. Transactions. Once transaction details have been submitted via the Services, we cannot assist you to cancel or otherwise modify your transaction. You must ensure that you have an adequate balance in your Wallet and/or gas to complete transactions before initiating a transaction. You acknowledge and agree that we will not be liable for any failed transactions due to insufficient funds or gas associated with your TomoWallet account.","title":"THE BLOCKCHAIN SERVICES"},{"location":"products/tomowallet/terms/#restrictions-of-using-tomowallet","text":"As a user of the Services, we grant you a limited, personal, non-commercial, non-exclusive, non-transferable, and revocable license to use TomoWallet. When using our Services, we ask that you follow some basic rules: Don\u2019t Use Our Services to Break the Law. You agree that you will not violate any laws when using our Services. This includes any local, provincial, state, federal, national, or international laws that may apply to you. You agree that you will not use our Services to pay for, support, or otherwise engage in any illegal activities including, but not limited to, illegal gambling, fraud, money laundering, or terrorist activities. If we discover that you have violated this Agreement or other regulatory requirements including, but not limited to, the Bank Secrecy Act, by participating in money laundering or by financing terrorist activities, we will take proportional disciplinary action. You further agree not to encourage or induce any third party to engage in any of the activities prohibited under this Section. Don\u2019t Interfere With Other\u2019s Use of the Services. You agree that you will not use or attempt to use another user\u2019s Wallet without authorization or use our Services in any manner that could interfere, disrupt, negatively affect, or inhibit other users from fully enjoying it. Don\u2019t Try to Harm Our System. You agree not to distribute any virus or other harmful computer code through TomoWallet. You also agree to not take any action that may impose an unreasonable or disproportionately large load on our or any of our third party providers\u2019 infrastructure. Don\u2019t Attempt to Circumvent Our Security. You agree not to bypass, circumvent, or attempt to bypass or circumvent any measures that we may use to prevent or restrict access to the Services including, without limitation, other accounts, computer systems, or networks connected to the Services. Any use of TomoWallet other than as specifically authorized in this Agreement, without our prior written permission, is strictly prohibited and will terminate your license to use TomoWallet.","title":"RESTRICTIONS OF USING TomoWallet"},{"location":"products/tomowallet/terms/#limitation-of-liability-disclaimer-of-warranties","text":"You understand and agree that we have no control over, and no duty to take any action regarding: Failures, disruptions, errors, or delays in processing Cryptocurrencies that you may experience while using the Services; The risk of failure of hardware, software, and Internet connections; The risk of malicious software being introduced or found in the software underlying TomoWallet; The risk that third parties may obtain unauthorized access to information stored within your Wallet, including, but not limited to your Wallet address, private key, and mnemonic (backup) phrase; and The risk of unknown vulnerabilities in or unanticipated changes to the TomoChain Networks. Disasters. Disasters may damage the Cryptocurrencies systems resulting in loss of Cryptocurrencies held by users.","title":"LIMITATION OF LIABILITY &amp; DISCLAIMER OF WARRANTIES"},{"location":"products/tomowallet/voting/","text":"How to vote for TomoChain masternodes using TomoWallet \u00b6 To vote for masternodes via the TomoWallet App you need two devices: 1 - A mobile device that runs the latest version of the TomoWallet App. Download the TomoWallet App here: Android Download \u00b6 iOS Download \u00b6 To import TomoChain Private Key into Tomo Mobile Wallet after downloading the app, open it and follow these below steps: Click Import your wallet Select \u201cRecovery Phrase or Private Key\u201d Enter your Private Key then click \u201cImport Wallet\u201d 2 - Another device from that you can access the TomoMaster platform. After you made sure that you have installed the latest version of TomoWallet on your mobile device and set up your wallet, switch to your other device and open the TomoMaster platform in your browser: https://master.tomochain.com Now click on Login in the upper right corner. You can now choose the Network Provider you want to use to access the platform. Make sure to choose TomoWallet. A QR-Code will appear. Now switch to your mobile device and touch the QR-scan icon in your TomoWallet App and scan the QR-Code. After scanning the QR-Code, the Account Information of you wallet will appear right under the QR-Code, including your wallet address and your balance: In your TomoWallet App, a confirmation message will appear: After confirming your Login via the App, you will have to switch back to your other device and click on TOMOMASTER in the upper left corner to go back to the home page. Under the Candidates title, you'll find a list of all the masternode candidates. Now you have to click on Vote in the right column next to the masternode you have chosen to vote for. To decide which masternodes to vote for, you can first click on the addresses of the masternodes to get more information regarding their performance, location, etc. After clicking Vote, your address, balance and the address of the masternode you voted for will appear. Now you can adjust the number TOMO you want to vote. Click Next to proceed and another QR-Code will appear. After scanning the QR-Code, a confirmation message will appear in the TomoWallet App on your mobile device: Before confirming your vote, make sure that the Voting Information above, including the address of the masternode and the amount you want to stake for the vote, are correct. After confirming your vote, this message will appear: You will now find a new transaction in the transaction history of your TomoWallet App with detailed information about your vote: You\u2019re done! Your vote has been counted and you can now monitor your rewards from the masternodes you voted for in your TomoWallet App:","title":"Voting with TomoWallet"},{"location":"products/tomowallet/voting/#how-to-vote-for-tomochain-masternodes-using-tomowallet","text":"To vote for masternodes via the TomoWallet App you need two devices: 1 - A mobile device that runs the latest version of the TomoWallet App. Download the TomoWallet App here:","title":"How to vote for TomoChain masternodes using TomoWallet"},{"location":"products/tomowallet/voting/#android-download","text":"","title":"Android Download"},{"location":"products/tomowallet/voting/#ios-download","text":"To import TomoChain Private Key into Tomo Mobile Wallet after downloading the app, open it and follow these below steps: Click Import your wallet Select \u201cRecovery Phrase or Private Key\u201d Enter your Private Key then click \u201cImport Wallet\u201d 2 - Another device from that you can access the TomoMaster platform. After you made sure that you have installed the latest version of TomoWallet on your mobile device and set up your wallet, switch to your other device and open the TomoMaster platform in your browser: https://master.tomochain.com Now click on Login in the upper right corner. You can now choose the Network Provider you want to use to access the platform. Make sure to choose TomoWallet. A QR-Code will appear. Now switch to your mobile device and touch the QR-scan icon in your TomoWallet App and scan the QR-Code. After scanning the QR-Code, the Account Information of you wallet will appear right under the QR-Code, including your wallet address and your balance: In your TomoWallet App, a confirmation message will appear: After confirming your Login via the App, you will have to switch back to your other device and click on TOMOMASTER in the upper left corner to go back to the home page. Under the Candidates title, you'll find a list of all the masternode candidates. Now you have to click on Vote in the right column next to the masternode you have chosen to vote for. To decide which masternodes to vote for, you can first click on the addresses of the masternodes to get more information regarding their performance, location, etc. After clicking Vote, your address, balance and the address of the masternode you voted for will appear. Now you can adjust the number TOMO you want to vote. Click Next to proceed and another QR-Code will appear. After scanning the QR-Code, a confirmation message will appear in the TomoWallet App on your mobile device: Before confirming your vote, make sure that the Voting Information above, including the address of the masternode and the amount you want to stake for the vote, are correct. After confirming your vote, this message will appear: You will now find a new transaction in the transaction history of your TomoWallet App with detailed information about your vote: You\u2019re done! Your vote has been counted and you can now monitor your rewards from the masternodes you voted for in your TomoWallet App:","title":"iOS Download"},{"location":"wp-and-research/economics-paper/","text":"TOMOCHAIN - The Most Efficient Blockchain for the Token Economy \u00b6 Preface \u00b6 TomoChain's vision and mission \u00b6 Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Scope \u00b6 This document describes TomoChain\u2019s initial draft for the TomoChain blockchain\u2019s economics system. Masternodes \u00b6 Masternodes are full-nodes that create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidate : Any account can deposit 50K TOMO using the official on-chain governance d-app to become a Masternode Candidate. 50K TOMO deposit can earn staking rewards. A Candidate can resign, but the tokens will be locked for the next 30 days (1,296,000 blocks) after the resignation. Becoming a Masternode : A Candidate becomes a Masternode when he/she belongs to top 150 most voted Candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Reward : The reward a Masternode receives in each epoch is proportional to the number of signatures he/she signs. Token Voting and Staking \u00b6 Token voting : Token holders can vote for Masternode Candidates by sending TOMO to each Candidate specific voting address using the official governance d-app. Top 150 most voted Candidates will become Masternodes. Token holders can un-vote a Candidate, but the tokens will be locked for the next 48 hours (86,400 blocks) after the un-voting. Staking : Masternode token deposits, and all tokens used to vote for Masternodes will enter staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for Candidates who do not become Masternodes will not earn staking reward. Token Emission Schedule \u00b6 Following the fundraising commitment : The total amount of tokens at the genesis block is 55 million TOMO tokens in circulation; 12 millions are reserved for the team vested over the next 4 years; 16 millions are reserved for strategic partners, and an ecosystem building fund which totals 83 millions tokens. Plus, 17 millions are reserved as block rewards for the next 8 years, the amount of tokens in circulation at the end of the 8th year after the genesis block is around 100 million TOMO. After the mainnet: the block reward for the first and second year is 4 million TOMO annually; the block reward for the 3rd, 4th, 5th year is 2 millions TOMO annually ; and the block reward for the 6th, 7th and 8th year is 1 million TOMO annually . Subsequently, the block reward will be halted, or activated at a number less than or equal to 1 million TOMO annually. Implementation : Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. 250 TOMO will be divided to all the Masternodes proportional to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. The first portion of 40% called \u201cInfrastructure Reward\u201d goes to the Masternode. The second portion of 50% called \u201cStaking Reward\u201d goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The last portion of 10% called \u201cFoundation Reward\u201d goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. Voting/Staking Consideration \u00b6 Candidate/Masternode incentives \u00b6 Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, Masternodes need to invest in TomoChain by depositing at least 50K Tomo, and stake them for a long term. Furthermore, after depositing 50K TOMO to become a Candidate, if the account cannot become a Masternode (has less votes than Top 150 most voted Candidates), he/she will receive no rewards. Therefore, Candidates have an incentive to do as much as they can such as signaling their capability to support TomoChain to get into top 150 most voted Candidates. Token voter incentives \u00b6 Token voters should vote for Candidates who signal a strong support for TomoChain because if the Candidate does not become a Masternode, voters will not receive any rewards. However, token voters should also vote for the less voted Candidates because the most voted Candidates will receive less reward per token stake comparatively. Long Term Platform Economics Consideration \u00b6 P/E theory of token value \u00b6 Equity price can often be a multiple of annual earnings a company generates. In the case of a blockchain platform, earnings could be considered as the total rewards and fees that the platform produces. The multiples for technology startups in the early days could exceed 200 which is where Ethereum network is approximately at the moment. Quantity theory of money for token value \u00b6 In this theory, the total amount of TOMO can be considered the money supply for the blockchain economy including all the d-apps and tokens on top of TomoChain. Assuming a constant price, and velocity of money, demand for money will raise proportionally to the total amount of activities of the whole blockchain network, which will raise the price of TOMO if the supply of Tomo is fixed, or the inflation rate is very small. TomoChain\u2019s advantages of minimal transaction fee, and very fast confirmation time could spur a massive amount of activities for Tomo tokens, and other tokens on top of TomoChain. Store of value theory of token value \u00b6 Blockchain native tokens can be considered as the means of fundraising, or the store of value within their own blockchain economy if the supply of the token is fixed, or the inflation rate is very small, and predictable. These conditions are applying to Ether and Bitcoin at the moment, and can be applying to TOMO token in the future as the Tomochain\u2019s economy grows. Built-in decentralized exchange \u00b6 TomoChain roadmap includes a built-in decentralized exchange, in which a portion of fees will be added to the pool of epoch rewards. These fees could be substantial if there are many valuable tokens on top of TomoChain. This extra feature can increase the future earnings of the network, and raise TOMO price based on the P/E theory. Decentralized Governance \u00b6 Become a Masternode \u00b6 Becoming a Masternode is an important signal of long-term support for TomoChain platform. We would welcome other entities to become a Masternode, to show their supports by helping the network, and gradually decentralize the platform governance. Masternode Council \u00b6 It is postulated that TomoChain platform would later be coordinated by non-profit body such as Masternode Council (or Foundation) amongst many other decentralized bodies which receive a steady amount of income from the network, and act solely in the interest of the network. Technical decision making \u00b6 The technical decisions should be considered, debated, and decided upon by qualified experts based on the long-term interest of the network. Economic decision making \u00b6 The economic decisions such as the amount of block rewards, inflation rate, the division of block rewards might be based on the consensus of majority of the Masternodes (with their voters). Masternode Council could be one of the coordinating bodies for these activities using the official governance d-app. Appendix A: History of the Project \u00b6 TomoChain PTE. LTD. raised funds to build TomoChain blockchain platform in early 2018. The ICO whitepaper is at https://goo.gl/avtnZ1. The terms of sale and other documents can be found at https://tomochain.com/exchanges TomoChain platform will be gradually decentralized in 2-8 years after the mainnet launch, and eventually become a secure public blockchain platform for everyone. Appendix B: Reward Calculation Formula and Details \u00b6 General notations \u00b6 N: the current number of masternodes, maximum of N = 1..150 M_1 , M_2 , .., M_N : the set of masternodes in the current epoch C_1 , C_2 , .., C_N : the number of signatures a masternode has made S_1 , S_2 , .., S_N : the total amount of staked (including deposited and voted) TOMO for a masternode D_1 , D_2 , .., D_N : the amount of deposited TOMO by a masternode X: the total reward per epoch for all masternodes Total reward per masternode = Infrastructure reward + staking reward MN: stand for masternode Reward divided to Masternode M_i : R_i = \\frac{C_i*X}{\\sum_{i=1}^{N}C_i} Reward per epoch: Masternode infrastructure reward: 0.4 R_i Voter with 1k voted TOMO: \\frac{0.5R_i*1000}{S_i} Masternode staking reward: \\frac{0.5R_i*D_i}{S_i} Reward per week (48 * 7 = 336 epochs): Masternode infrastructure reward: 336 * 0.4 R_i Voter with 1k voted TOMO: 336 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 336 * \\frac{0.5R_i*D_i}{S_i} Reward per year (48 * 365 = 17520 epochs): Masternode infrastructure: 17520 * 0.4 R_i Voter with 1k voted TOMO: 17520 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 17520 * \\frac{0.5R_i*D_i}{S_i} Total reward for a masternode: 17520 * 0.4 R_i + 17520 * \\frac{0.5R_i*D_i}{S_i} Applying the reward calculation formula to specific scenarios \u00b6 Note that, for simplification of illustration: The total amount of staked TOMO for all masternodes is equal The signatures for all masternodes in the scenarios are equal With these assumptions, all masternodes receive the same divided reward (R) and the same infrastructure reward. Furthermore, the reward for Voters with 1k voted TOMO is equal regardless of which the amount is voted for. Scenario 1: 50 Masternodes, 2.5 million token voting, a total of 5 million token locked. \u00b6 N = 50, X = 250, S_1 = S_2 = .. = S_{50} = 5 000 000 / 50 = 100k TOMO C_1 = C_2 = .. = C_{50} Therefore, R_1 = R_2 = .. = R_{50} = R = X/50 = 5 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 5 = 2 TOMO For Voter with 1k voted = (0.5 * 5 * 1000) / 100k = 0.025 TOMO MN staking reward with 50k TOMO deposited: 50 * 0.025 = 1.25 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 2 = 672 TOMO For Voter with 1k voted = 336 * 0.025 = 8.4 TOMO MN staking reward with D = 50k TOMO deposited: 336 * 1.25 = 420 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 2 = 35 040 TOMO For Voter with 1k voted = 17520 * 0.025 = 438 TOMO MN staking reward with 50k deposited: 17520 * 1.25 = 21900 TOMO Total reward per MN with D = 50k deposited: 35 040 + 21 900 = 56940 TOMO Scenario 2: 100 Masternodes, 3 million token voting, a total of 8 million token locked. \u00b6 N = 100, X = 250, S_1 = S_2 = .. = S_{100} = 8 000 000 / 100 = 80k TOMO C_1 = C_2 = .. = C_{100} Therefore, R_1 = R_2 = .. = R_{100} = R = X/100 = 2.5 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 2.5 = 1 TOMO For Voter with 1k voted = (0.5 * 2.5 * 1000) / 80k = 0.015625 MN staking reward with D = 50k deposited: 50 * 0.015625 = 0.78125 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 1 = 336 TOMO For Voter with 1k voted = 336 * 0.015625 = 5.25 TOMO MN staking reward with D = 50k deposited: 336 * 0.78125 = 262.5 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 1 = 17 520 TOMO For Voter with 1k voted = 17520 * 0.015625 = 273.75 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.78125 = 13687.5 TOMO Total reward per MN with D = 50k deposited: 17 520 + 13 687.5 = 31208 TOMO Scenario 3: 150 Masternodes, 12.5 million token voting, a total of 20 million token locked. \u00b6 N = 150, X = 250, S_1 = S_2 = .. = S_{150} = 20 000 000 / 150 = 133 333 TOMO C_1 = C_2 = .. = C_{150} Therefore, R_1 = R_2 = .. = R_{150} = R = X/150 = 1.6667 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 1.6667 = 0.6667 TOMO For Voter with 1k voted = (0.5 * 1.6667 * 1000) / 133 333 = 0.00625 TOMO MN staking reward with 50k deposited: 50 * 0.00625 = 0.3125 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 0.6667 = 224 TOMO For Voter with 1k voted = 336 * 0.00625 = 2.1 TOMO MN staking reward with D = 50k deposited: 336 * 0.3125 = 105 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 0.6667 = 11 680 TOMO For Voter with 1k voted = 17520 * 0.00625 = 109.5 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.3125 = 5475 TOMO Total reward per MN with D = 50k deposited: 11 680 + 5475 = 17155 TOMO","title":"Economics paper"},{"location":"wp-and-research/economics-paper/#tomochain-the-most-efficient-blockchain-for-the-token-economy","text":"","title":"TOMOCHAIN - The Most Efficient Blockchain for the Token Economy"},{"location":"wp-and-research/economics-paper/#preface","text":"","title":"Preface"},{"location":"wp-and-research/economics-paper/#tomochains-vision-and-mission","text":"Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses.","title":"TomoChain's vision and mission"},{"location":"wp-and-research/economics-paper/#scope","text":"This document describes TomoChain\u2019s initial draft for the TomoChain blockchain\u2019s economics system.","title":"Scope"},{"location":"wp-and-research/economics-paper/#masternodes","text":"Masternodes are full-nodes that create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidate : Any account can deposit 50K TOMO using the official on-chain governance d-app to become a Masternode Candidate. 50K TOMO deposit can earn staking rewards. A Candidate can resign, but the tokens will be locked for the next 30 days (1,296,000 blocks) after the resignation. Becoming a Masternode : A Candidate becomes a Masternode when he/she belongs to top 150 most voted Candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Reward : The reward a Masternode receives in each epoch is proportional to the number of signatures he/she signs.","title":"Masternodes"},{"location":"wp-and-research/economics-paper/#token-voting-and-staking","text":"Token voting : Token holders can vote for Masternode Candidates by sending TOMO to each Candidate specific voting address using the official governance d-app. Top 150 most voted Candidates will become Masternodes. Token holders can un-vote a Candidate, but the tokens will be locked for the next 48 hours (86,400 blocks) after the un-voting. Staking : Masternode token deposits, and all tokens used to vote for Masternodes will enter staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for Candidates who do not become Masternodes will not earn staking reward.","title":"Token Voting and Staking"},{"location":"wp-and-research/economics-paper/#token-emission-schedule","text":"Following the fundraising commitment : The total amount of tokens at the genesis block is 55 million TOMO tokens in circulation; 12 millions are reserved for the team vested over the next 4 years; 16 millions are reserved for strategic partners, and an ecosystem building fund which totals 83 millions tokens. Plus, 17 millions are reserved as block rewards for the next 8 years, the amount of tokens in circulation at the end of the 8th year after the genesis block is around 100 million TOMO. After the mainnet: the block reward for the first and second year is 4 million TOMO annually; the block reward for the 3rd, 4th, 5th year is 2 millions TOMO annually ; and the block reward for the 6th, 7th and 8th year is 1 million TOMO annually . Subsequently, the block reward will be halted, or activated at a number less than or equal to 1 million TOMO annually. Implementation : Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. 250 TOMO will be divided to all the Masternodes proportional to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. The first portion of 40% called \u201cInfrastructure Reward\u201d goes to the Masternode. The second portion of 50% called \u201cStaking Reward\u201d goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The last portion of 10% called \u201cFoundation Reward\u201d goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially.","title":"Token Emission Schedule"},{"location":"wp-and-research/economics-paper/#votingstaking-consideration","text":"","title":"Voting/Staking Consideration"},{"location":"wp-and-research/economics-paper/#candidatemasternode-incentives","text":"Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, Masternodes need to invest in TomoChain by depositing at least 50K Tomo, and stake them for a long term. Furthermore, after depositing 50K TOMO to become a Candidate, if the account cannot become a Masternode (has less votes than Top 150 most voted Candidates), he/she will receive no rewards. Therefore, Candidates have an incentive to do as much as they can such as signaling their capability to support TomoChain to get into top 150 most voted Candidates.","title":"Candidate/Masternode incentives"},{"location":"wp-and-research/economics-paper/#token-voter-incentives","text":"Token voters should vote for Candidates who signal a strong support for TomoChain because if the Candidate does not become a Masternode, voters will not receive any rewards. However, token voters should also vote for the less voted Candidates because the most voted Candidates will receive less reward per token stake comparatively.","title":"Token voter incentives"},{"location":"wp-and-research/economics-paper/#long-term-platform-economics-consideration","text":"","title":"Long Term Platform Economics Consideration"},{"location":"wp-and-research/economics-paper/#pe-theory-of-token-value","text":"Equity price can often be a multiple of annual earnings a company generates. In the case of a blockchain platform, earnings could be considered as the total rewards and fees that the platform produces. The multiples for technology startups in the early days could exceed 200 which is where Ethereum network is approximately at the moment.","title":"P/E theory of token value"},{"location":"wp-and-research/economics-paper/#quantity-theory-of-money-for-token-value","text":"In this theory, the total amount of TOMO can be considered the money supply for the blockchain economy including all the d-apps and tokens on top of TomoChain. Assuming a constant price, and velocity of money, demand for money will raise proportionally to the total amount of activities of the whole blockchain network, which will raise the price of TOMO if the supply of Tomo is fixed, or the inflation rate is very small. TomoChain\u2019s advantages of minimal transaction fee, and very fast confirmation time could spur a massive amount of activities for Tomo tokens, and other tokens on top of TomoChain.","title":"Quantity theory of money for token value"},{"location":"wp-and-research/economics-paper/#store-of-value-theory-of-token-value","text":"Blockchain native tokens can be considered as the means of fundraising, or the store of value within their own blockchain economy if the supply of the token is fixed, or the inflation rate is very small, and predictable. These conditions are applying to Ether and Bitcoin at the moment, and can be applying to TOMO token in the future as the Tomochain\u2019s economy grows.","title":"Store of value theory of token value"},{"location":"wp-and-research/economics-paper/#built-in-decentralized-exchange","text":"TomoChain roadmap includes a built-in decentralized exchange, in which a portion of fees will be added to the pool of epoch rewards. These fees could be substantial if there are many valuable tokens on top of TomoChain. This extra feature can increase the future earnings of the network, and raise TOMO price based on the P/E theory.","title":"Built-in decentralized exchange"},{"location":"wp-and-research/economics-paper/#decentralized-governance","text":"","title":"Decentralized Governance"},{"location":"wp-and-research/economics-paper/#become-a-masternode","text":"Becoming a Masternode is an important signal of long-term support for TomoChain platform. We would welcome other entities to become a Masternode, to show their supports by helping the network, and gradually decentralize the platform governance.","title":"Become a Masternode"},{"location":"wp-and-research/economics-paper/#masternode-council","text":"It is postulated that TomoChain platform would later be coordinated by non-profit body such as Masternode Council (or Foundation) amongst many other decentralized bodies which receive a steady amount of income from the network, and act solely in the interest of the network.","title":"Masternode Council"},{"location":"wp-and-research/economics-paper/#technical-decision-making","text":"The technical decisions should be considered, debated, and decided upon by qualified experts based on the long-term interest of the network.","title":"Technical decision making"},{"location":"wp-and-research/economics-paper/#economic-decision-making","text":"The economic decisions such as the amount of block rewards, inflation rate, the division of block rewards might be based on the consensus of majority of the Masternodes (with their voters). Masternode Council could be one of the coordinating bodies for these activities using the official governance d-app.","title":"Economic decision making"},{"location":"wp-and-research/economics-paper/#appendix-a-history-of-the-project","text":"TomoChain PTE. LTD. raised funds to build TomoChain blockchain platform in early 2018. The ICO whitepaper is at https://goo.gl/avtnZ1. The terms of sale and other documents can be found at https://tomochain.com/exchanges TomoChain platform will be gradually decentralized in 2-8 years after the mainnet launch, and eventually become a secure public blockchain platform for everyone.","title":"Appendix A: History of the Project"},{"location":"wp-and-research/economics-paper/#appendix-b-reward-calculation-formula-and-details","text":"","title":"Appendix B: Reward Calculation Formula and Details"},{"location":"wp-and-research/economics-paper/#general-notations","text":"N: the current number of masternodes, maximum of N = 1..150 M_1 , M_2 , .., M_N : the set of masternodes in the current epoch C_1 , C_2 , .., C_N : the number of signatures a masternode has made S_1 , S_2 , .., S_N : the total amount of staked (including deposited and voted) TOMO for a masternode D_1 , D_2 , .., D_N : the amount of deposited TOMO by a masternode X: the total reward per epoch for all masternodes Total reward per masternode = Infrastructure reward + staking reward MN: stand for masternode Reward divided to Masternode M_i : R_i = \\frac{C_i*X}{\\sum_{i=1}^{N}C_i} Reward per epoch: Masternode infrastructure reward: 0.4 R_i Voter with 1k voted TOMO: \\frac{0.5R_i*1000}{S_i} Masternode staking reward: \\frac{0.5R_i*D_i}{S_i} Reward per week (48 * 7 = 336 epochs): Masternode infrastructure reward: 336 * 0.4 R_i Voter with 1k voted TOMO: 336 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 336 * \\frac{0.5R_i*D_i}{S_i} Reward per year (48 * 365 = 17520 epochs): Masternode infrastructure: 17520 * 0.4 R_i Voter with 1k voted TOMO: 17520 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 17520 * \\frac{0.5R_i*D_i}{S_i} Total reward for a masternode: 17520 * 0.4 R_i + 17520 * \\frac{0.5R_i*D_i}{S_i}","title":"General notations"},{"location":"wp-and-research/economics-paper/#applying-the-reward-calculation-formula-to-specific-scenarios","text":"Note that, for simplification of illustration: The total amount of staked TOMO for all masternodes is equal The signatures for all masternodes in the scenarios are equal With these assumptions, all masternodes receive the same divided reward (R) and the same infrastructure reward. Furthermore, the reward for Voters with 1k voted TOMO is equal regardless of which the amount is voted for.","title":"Applying the reward calculation formula to specific scenarios"},{"location":"wp-and-research/economics-paper/#scenario-1-50-masternodes-25-million-token-voting-a-total-of-5-million-token-locked","text":"N = 50, X = 250, S_1 = S_2 = .. = S_{50} = 5 000 000 / 50 = 100k TOMO C_1 = C_2 = .. = C_{50} Therefore, R_1 = R_2 = .. = R_{50} = R = X/50 = 5 TOMO","title":"Scenario 1: 50 Masternodes, 2.5 million token voting, a total of 5 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch","text":"MN infrastructure reward = 0.4 * 5 = 2 TOMO For Voter with 1k voted = (0.5 * 5 * 1000) / 100k = 0.025 TOMO MN staking reward with 50k TOMO deposited: 50 * 0.025 = 1.25 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week","text":"MN infrastructure reward = 336 * 2 = 672 TOMO For Voter with 1k voted = 336 * 0.025 = 8.4 TOMO MN staking reward with D = 50k TOMO deposited: 336 * 1.25 = 420 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year","text":"MN infrastructure reward = 17520 * 2 = 35 040 TOMO For Voter with 1k voted = 17520 * 0.025 = 438 TOMO MN staking reward with 50k deposited: 17520 * 1.25 = 21900 TOMO Total reward per MN with D = 50k deposited: 35 040 + 21 900 = 56940 TOMO","title":"Reward per year:"},{"location":"wp-and-research/economics-paper/#scenario-2-100-masternodes-3-million-token-voting-a-total-of-8-million-token-locked","text":"N = 100, X = 250, S_1 = S_2 = .. = S_{100} = 8 000 000 / 100 = 80k TOMO C_1 = C_2 = .. = C_{100} Therefore, R_1 = R_2 = .. = R_{100} = R = X/100 = 2.5 TOMO","title":"Scenario 2: 100 Masternodes, 3 million token voting, a total of 8 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch_1","text":"MN infrastructure reward = 0.4 * 2.5 = 1 TOMO For Voter with 1k voted = (0.5 * 2.5 * 1000) / 80k = 0.015625 MN staking reward with D = 50k deposited: 50 * 0.015625 = 0.78125 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week_1","text":"MN infrastructure reward = 336 * 1 = 336 TOMO For Voter with 1k voted = 336 * 0.015625 = 5.25 TOMO MN staking reward with D = 50k deposited: 336 * 0.78125 = 262.5 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year_1","text":"MN infrastructure reward = 17520 * 1 = 17 520 TOMO For Voter with 1k voted = 17520 * 0.015625 = 273.75 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.78125 = 13687.5 TOMO Total reward per MN with D = 50k deposited: 17 520 + 13 687.5 = 31208 TOMO","title":"Reward per year:"},{"location":"wp-and-research/economics-paper/#scenario-3-150-masternodes-125-million-token-voting-a-total-of-20-million-token-locked","text":"N = 150, X = 250, S_1 = S_2 = .. = S_{150} = 20 000 000 / 150 = 133 333 TOMO C_1 = C_2 = .. = C_{150} Therefore, R_1 = R_2 = .. = R_{150} = R = X/150 = 1.6667 TOMO","title":"Scenario 3: 150 Masternodes, 12.5 million token voting, a total of 20 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch_2","text":"MN infrastructure reward = 0.4 * 1.6667 = 0.6667 TOMO For Voter with 1k voted = (0.5 * 1.6667 * 1000) / 133 333 = 0.00625 TOMO MN staking reward with 50k deposited: 50 * 0.00625 = 0.3125 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week_2","text":"MN infrastructure reward = 336 * 0.6667 = 224 TOMO For Voter with 1k voted = 336 * 0.00625 = 2.1 TOMO MN staking reward with D = 50k deposited: 336 * 0.3125 = 105 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year_2","text":"MN infrastructure reward = 17520 * 0.6667 = 11 680 TOMO For Voter with 1k voted = 17520 * 0.00625 = 109.5 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.3125 = 5475 TOMO Total reward per MN with D = 50k deposited: 11 680 + 5475 = 17155 TOMO","title":"Reward per year:"},{"location":"wp-and-research/privacy/","text":"TomoP - High Performance and Anonymous Transfer Protocol on TomoChain \u00b6 A tremendous amount of work and investment has been devoted to the development of blockchain technology to solve current problems, i.e. scalability and privacy, with the technology itself as well as to maximize the adoption of the technology in daily life. The majority of public blockchain technology/platforms have a built-in cryptocurrency in which every transaction shows the amount of tokens or native coins that the sender is transferring to the recipient. In this regard, blockchain provides transparency to all users, which is not always expected by the majority of businesses. A business would like to hide the transaction amount, instead of showing it to everyone. This paper presents TomoP - a protocol proposed by TomoChain for private transactions on the TomoChain public blockchain. The paper describes a protocol that allows creating anonymous transactions that hide the transaction value, sender, and receiver to preserve the financial privacy of holders of TOMO and tokens on TomoChain. TomoP is the first ever EVM-compatible private transaction protocol with very fast transaction speed that allows anonymizing the transaction sender in a transaction without requiring an intermediary. TomoP solves the following problems: Performance: Most (if not all) current privacy coins , i.e. Monero, ZCoin, ZCash, are slow because of high block time in the consensus protocol of those public chains. TomoP operates as a DApp on TomoChain, which provides transaction confirmation within 2-4 seconds. Transaction sender anonymity: most EVM smart contract-based private transactions require a relayer to sign a private transaction to pay the transaction gas that will eventually be refunded. This makes the privacy transaction system semi-decentralized. TomoP, on the other hand, uses TomoZ - the protocol to make gasless transactions without requiring a relayer between the transaction creator and the blockchain. Out-of-gas: Verifying cryptographic proofs in private transactions requires intensive computation, which could cause the out-of-gas problem in EVM environment. To reduce gas consumption and speed up transaction proof verification, TomoP implements a set of precompiled contracts integrated in the core EVM of TomoChain. TomoP allows creating a private token standard to make super fast token-based payment systems and DApps on TomoChain. TomoP relies on the following techniques: Cryptographic privacy building blocks include: Stealth address: This technique is used for obfuscating transaction recipients by generating a new one-time public key for every transaction recipient so that there is no way for a third party to find the relationships between 2 different transaction recipients. What this means is that, if Alice is sending 2 transactions to Bob , no one, except Alice and Bob could find out the fact that Bob is the recipient in both transactions. Ring Signature and Ring Confidential Transaction (RingCT): These are techniques used by Monero for obfuscating transaction senders and transaction amounts in a transaction. Bulletproofs: Zero-knowledge proofs that allow proving an encrypted number is within a range without revealing the number itself. Bulletproofs are used in TomoP transactions to prove that a transaction amount in a private transaction is positive in order to prevent double spending. TomoZ: TomoZ is the first decentralized gasless transaction protocol on TomoChain. TomoP relies on TomoZ to create a transaction fee vault for private transactions. This fee vault is stored in TomoIssuer contract on TomoChain to pay the network fee while the actual private transaction fee is paid internally in the private transaction. Precompiled contracts: A set of precompiled contracts for Ring Signature verification and Bulletproof range proof is integrated directly into the core EVM of TomoChain. This allows any smart contract (i.e. private token contract) to call those precompiled contracts to verify cryptographic proofs. Why privacy matters? \u00b6 Privacy is necessary for ensuring freedom on the internet. When your transactions are being watched \u2014 or when your transaction history is available to be known \u2014 a person isn't free to make their own decisions. With other digital currencies, bad actors are able to match people to their balances and details about parties involved, amounts and trends. Background \u00b6 Blockchain technology fundamentally relies on distributed system principles and cryptography techniques, especially digital signature algorithms. Elliptic Curve Digital Signature Algorithm (ECDSA) is widely used in most blockchain systems such as Bitcoin, Ethereum, and TomoChain to generate a signature in order to authenticate the sender of a transaction. The most widely used elliptic curve in blockchains is secp256k1. The 64-character string called private key is the most important information that any holder should keep private. A private key can be used for generating a public key, which is in turn used for deriving an Ethereum user address (40 hex characters) that every cryptocurrency holder is familiar with. Mathematically, an address X can be generated from a private key P as follows: Pk = P*G X = bytes20(SHA256(Pk)) Where Pk denotes the public key derived from the private key, SHA256 is the cryptographic hash, bytes20 takes the first 20 bytes of any data, and G is a common generator point in secp256k1 curve. Eventually, X is a 40-character string (20 bytes) derived from the private key. The multiplication P*G is called elliptic multiplication. It is easy to compute a public key from a private key but it is infeasible to compute a private key from a given public key (there is no division in the elliptic curve number space). Pederson commitment \u00b6 Pederson commitment is a cryptographic commitment scheme equivalent to secretly writing a secret message m in a sealed, tamper-evident, individually numbered (or/and countersigned) envelope kept by who wrote the message. The envelope's content can't be changed by any means, and the message does not leak any information. In TomoP, a Pederson commitment C to a number f is defined as follows: C = m*G + f*H Where m is 256-bit number called blinding factor/mask, and H is another generator point. If we consider f as an account\u2019s balance on TomoChain, the commitment C can be used for hiding the transaction amount of such account. In other words, C is the Pederson encrypted amount of such account. Pederson commitment is a form of additively homomorphic encryption, which has the following nice property: The sum of two Pederson commitments to f1 and f2 is equal to the Pederson commitment of f1 + f2. `C(m1, f1) + C(m2, f2) = C(m1 + m2, f1 + f2)` This is the key application of Pederson commitment to most privacy-focused blockchains. TomoP architecture \u00b6 TomoP supports both an anonymous TOMO transfer method and a private token standard on TomoChain. The following figure shows the overview of TomoP that is integrated both at the core and the smart contract layer of TomoChain. Figure 1: Overview of TomoP Instead of directly sending funds to the recipient, the sender will anonymize their TOMO by making a transaction to the Privacy smart contract. As long as send transactions are made to the privacy contract, the latter allows TOMO holders to send/receiver TOMO to/from others without showing the transaction amount within it. TomoP transactions are like Monero transactions but in a smart contract on the very fast blockchain TomoChain. Typically, funds flow as follows: A user anonymize her TOMO by making a deposit transaction to send TOMO to the privacy smart contract. This transaction is a normal transaction and does not hide the transaction amount. This transaction creates a Note in the privacy contract. A note is similar to the concept of Unspent Transaction Output (UTXO) on Bitcoin blockchain with additional information, i.e. a Pedersen commitment, that is used for creating cryptographic proofs when the user wants to make an anonymous send transaction. The user makes anonymous send transactions from the user to a recipient. The transaction amount is hidden. Funds are not moved out of the privacy contract. The user uses her own private key to create RingCT and Bulletproofs for the privacy contract to verify. Anonymous send obfuscates transaction sender and receiver, and hides transaction amounts. The user can decide to de-anonymize her private TOMO by withdrawing all or part of her funds from the privacy contract to the user\u2019s public wallet. The withdrawing amount is visible on the chain but the remaining funds of the user held in the privacy contract is always hidden. Transaction fee and TomoZ integration \u00b6 TomoP utilizes TomoZ - the core protocol of TomoChain allowing gasless transactions in a decentralized way to anonymize msg.sender in anonymous send transactions to the privacy smart contract. TomoZ integration is very important to TomoP because of the way that it does not require an account to hold TOMO to make a transaction. For example, when Alice wants to make an anonymous send transaction to the privacy contract, if Alice uses her private key to sign the transaction, every one would know that Alice is making a private transaction, which would destroy the anonymity property of the protocol. Having a third-party such as relayer to sign the transaction and pay the gas fee is promising but centralizing the protocol. Integrating with TomoZ allows to create a privacy fee vault that is initially deposited by the issuer/owner of the privacy contract. For every anonymous send transaction, Alice uses her private key to create cryptographic proofs: RingCT, Bulletproofs, a brand new account/private key without TOMO is used for signing as msg.sender . The actual network fee will be paid from the privacy vault fee to masternodes through TomoZ protocol. On the other hand, to compensate the privacy transaction fee paid for masternodes, Alice sends a 0.01 TOMO fee to the issuer/owner within the smart contract execution of the anonymous transaction. The transaction fee flow is as the following figure. Figure 2: Privacy transaction fee and TomoZ integration TomoP's privacy address \u00b6 TomoP uses a single private key to generate a dual-key system. The user private key s of the user's TOMO address is called private spend key and v = SHA256(s) is the private view key of the user. As the names imply: Private spend key s : This is used for making cryptographic proofs for spending funds in the privacy contract. Private view key v : This is used for viewing the information of all transactions belonging to the user. Having v only allows seeing the transaction history of the user, but does not allow spending funds. This could be used as a tool for authorized parties to check the transaction history of a user by requiring the user to register her private view key to the authorized parties for regulatory compliance purposes. Each private spend key s has an associated privacy address. The latter is Base58 encoding of the public spend ( S ) and public view ( V ) keys derived from s and v . When Alice wants to make an anonymous send transaction to Bob , Bob needs to send his privacy address to Alice . Ring Confidential Transaction and Bulletproofs \u00b6 Confidential transaction \u00b6 Confidential transaction was proposed for Bitcoin privacy integration by Greg Maxwell. It uses Pedersen commitment to encrypt transaction amounts using randomly generated masks. Cryptographically, confidential transaction states that the sum of Pedersen commitments of all input notes must be equal to the sum of all Pedersen commitments of all output notes . Users are recommended to check confidential transaction to better understand how it works. What confidential transaction does not support is transaction sender anonymity, which is supported by Ring Confidential Transaction (RingCT) implemented by Monero. RingCT is the combination of Ring Signature and Confidential Transaction. Ring Signature allows to obfuscate transaction sender in an anonymity set, whose size is 12 in TomoP. RingCT, however, requires the support of a zero-knowledge range proof in order to prove the transaction amount committed in a Pedersen commitment is positive to prevent from double spending. This is supported by Bulletproofs which supports short non-interactive proofs without a trusted setup for confidential transactions. Range proofs with Bulletproofs \u00b6 Range proofs is a type of zero-knowledge proof used for proving that a secret value is within a value range without revealing the precise value of the secret. Bulletproofs is a new non-interactive zero-knowledge proof protocol with very short proofs and without a trusted setup; the proof size is only logarithmic in the witness size. TomoP uses Bulletproofs range proof to prove the transaction amount commited in Pedersen commitments is positive. Both Bulletproofs and RingCT are implemented in our privacy SDK . Implementation \u00b6 Privacy precompiled contracts \u00b6 To reduce the gas consumption of RingCT and Bulletproof verification, we propose two precompiled contracts, RingCTVerifier and BulletproofVerifier , that are implemented in the core EVM of TomoChain, using Golang. These two precompiled contracts will be called by the privacy contract to verify the confidential transaction and Bulletproof range proof, respectively. The current addresses for those precompiled contracts are 0x000000000000000000000000000000000000001e and 0x0000000000000000000000000000000000000028. Anonymize TOMO \u00b6 Anonymizing TOMO is equal to making a deposit transaction to the privacy contract. The deposit transaction creates a new Note n in the privacy contract that has the following cryptographic elements: A transaction public key P tx A stealth, one-time public key P st A Pedersen commitment C of the deposit amount A deposit fee of 0.001 TOMO is applied to pay transaction fees for the person who deposits to the privacy transaction fee vault. Once deposited, the privacy smart contract records that the person that has the private key corresponding to the deposit stealth public key has the deposit amount in a note. Anonymous send \u00b6 Suppose Bob wants to receive x TOMO from Alice via an anonymous send transaction. Bob sends his privacy address to Alice Alice derives a stealth one-time public key Stealth b as follows: Alice decodes the Base58 privacy address of Bob to have the public spend S b and public view V b key of Bob . Alice generates a random 256-bit number transaction private key s tx and computes the corresponding transaction public key S tx = s tx *G . Alice computes the Elliptic Curve Diff Hellman (ECDH) E = s tx * V b Alice computes Stealth b = E * G + S b . Alice generates Pedersen commitment for the transaction amount x . Alice randomly generates a 256-bit number called mask m Alice creates a Pedersen commitment C = m*G + x*H Alice encrypts m and x using the Elliptic Curve Diff Hellman E with an Advanced Encryption Standard (AES) algorithm. Let's denote the cipher text produced by this encryption MX . Alice generates ring confidential transaction RingCT sig for the transaction (details are provided later). Alice generates a bulletproof range proof bp to prove that x is positive without revealing the value of x . Alice bundles ( S tx , Stealth b , C , MX , sig , bp ) into the data of a transaction, generates a random private key to sign the transaction (to anonymize msg.sender ), and sends the signed transaction to the privacy smart contract. The generation of RingCT and Bulletproofs will be posted in details in TomoChain's technical blog later. Note that RingCT is generated by taking into account the transaction fee of 0.01 TOMO. The algorithm to generate sig is similar to the one described in Monero RingCT . In Step 6, TomoZ empowers the anonymization of msg.sender through the privacy fee vault and the paying of transaction fee within the internal execution of the privacy smart contract. Anonymous send transaction verification on smart contracts \u00b6 The privacy smart contract basically verifies: The existence of all input notes in the transaction The validity of the ring confidential transaction (RingCT) sig by calling RingCTVerifier precompiled contract. The validity of Bulletproofs bp by calling BulletproofVerifier precompiled contract. Anonymous reception of TOMO \u00b6 Once the transaction is confirmed, Bob needs to scan all newly created notes on the privacy smart contract to recognize which one belongs to him. Bob uses his private view key to decode the encrypted transaction amount. A proof-of-concept code for the privacy contract can be found here . Due to the math complexity of RingCT and Bulletproofs, we omit the construction algorithms for those proofs here and will detail them in TomoChain's tech blog. Private token standard \u00b6 TomoP is designed to support private tokens issued on TomoChain. A new private token standard TRC21P will be supportec by extending the TRC21 token standard. Regulatory compliance \u00b6 By using a dual-key-like system, any user could register her/his private view key to an authorized authority. The latter will then be able to decode all transactions that involve the user but will not be able to create an anonymous send transaction. The authorized authority would be the goverment tax agency or any organization that allows to track user transactions for legal purposes. Even a bank could use TomoP to keep track of their user balance while leaving only authorized users with private spend keys to make transactions. References \u00b6 On-going development Github repositories for TomoP https://github.com/tomochain/privacy-sc - contains privacy and utility contract solidity code https://github.com/tomochain/tomop - contains source code for precompiled contracts https://github.com/tomochain/tomowallet-web-testnet - proof-of-concept web wallet https://github.com/tomochain/privacyjs - SDK for TomoP to make anonymous transactions","title":"TomoP whitepaper"},{"location":"wp-and-research/privacy/#tomop-high-performance-and-anonymous-transfer-protocol-on-tomochain","text":"A tremendous amount of work and investment has been devoted to the development of blockchain technology to solve current problems, i.e. scalability and privacy, with the technology itself as well as to maximize the adoption of the technology in daily life. The majority of public blockchain technology/platforms have a built-in cryptocurrency in which every transaction shows the amount of tokens or native coins that the sender is transferring to the recipient. In this regard, blockchain provides transparency to all users, which is not always expected by the majority of businesses. A business would like to hide the transaction amount, instead of showing it to everyone. This paper presents TomoP - a protocol proposed by TomoChain for private transactions on the TomoChain public blockchain. The paper describes a protocol that allows creating anonymous transactions that hide the transaction value, sender, and receiver to preserve the financial privacy of holders of TOMO and tokens on TomoChain. TomoP is the first ever EVM-compatible private transaction protocol with very fast transaction speed that allows anonymizing the transaction sender in a transaction without requiring an intermediary. TomoP solves the following problems: Performance: Most (if not all) current privacy coins , i.e. Monero, ZCoin, ZCash, are slow because of high block time in the consensus protocol of those public chains. TomoP operates as a DApp on TomoChain, which provides transaction confirmation within 2-4 seconds. Transaction sender anonymity: most EVM smart contract-based private transactions require a relayer to sign a private transaction to pay the transaction gas that will eventually be refunded. This makes the privacy transaction system semi-decentralized. TomoP, on the other hand, uses TomoZ - the protocol to make gasless transactions without requiring a relayer between the transaction creator and the blockchain. Out-of-gas: Verifying cryptographic proofs in private transactions requires intensive computation, which could cause the out-of-gas problem in EVM environment. To reduce gas consumption and speed up transaction proof verification, TomoP implements a set of precompiled contracts integrated in the core EVM of TomoChain. TomoP allows creating a private token standard to make super fast token-based payment systems and DApps on TomoChain. TomoP relies on the following techniques: Cryptographic privacy building blocks include: Stealth address: This technique is used for obfuscating transaction recipients by generating a new one-time public key for every transaction recipient so that there is no way for a third party to find the relationships between 2 different transaction recipients. What this means is that, if Alice is sending 2 transactions to Bob , no one, except Alice and Bob could find out the fact that Bob is the recipient in both transactions. Ring Signature and Ring Confidential Transaction (RingCT): These are techniques used by Monero for obfuscating transaction senders and transaction amounts in a transaction. Bulletproofs: Zero-knowledge proofs that allow proving an encrypted number is within a range without revealing the number itself. Bulletproofs are used in TomoP transactions to prove that a transaction amount in a private transaction is positive in order to prevent double spending. TomoZ: TomoZ is the first decentralized gasless transaction protocol on TomoChain. TomoP relies on TomoZ to create a transaction fee vault for private transactions. This fee vault is stored in TomoIssuer contract on TomoChain to pay the network fee while the actual private transaction fee is paid internally in the private transaction. Precompiled contracts: A set of precompiled contracts for Ring Signature verification and Bulletproof range proof is integrated directly into the core EVM of TomoChain. This allows any smart contract (i.e. private token contract) to call those precompiled contracts to verify cryptographic proofs.","title":"TomoP - High Performance and Anonymous Transfer Protocol on TomoChain"},{"location":"wp-and-research/privacy/#why-privacy-matters","text":"Privacy is necessary for ensuring freedom on the internet. When your transactions are being watched \u2014 or when your transaction history is available to be known \u2014 a person isn't free to make their own decisions. With other digital currencies, bad actors are able to match people to their balances and details about parties involved, amounts and trends.","title":"Why privacy matters?"},{"location":"wp-and-research/privacy/#background","text":"Blockchain technology fundamentally relies on distributed system principles and cryptography techniques, especially digital signature algorithms. Elliptic Curve Digital Signature Algorithm (ECDSA) is widely used in most blockchain systems such as Bitcoin, Ethereum, and TomoChain to generate a signature in order to authenticate the sender of a transaction. The most widely used elliptic curve in blockchains is secp256k1. The 64-character string called private key is the most important information that any holder should keep private. A private key can be used for generating a public key, which is in turn used for deriving an Ethereum user address (40 hex characters) that every cryptocurrency holder is familiar with. Mathematically, an address X can be generated from a private key P as follows: Pk = P*G X = bytes20(SHA256(Pk)) Where Pk denotes the public key derived from the private key, SHA256 is the cryptographic hash, bytes20 takes the first 20 bytes of any data, and G is a common generator point in secp256k1 curve. Eventually, X is a 40-character string (20 bytes) derived from the private key. The multiplication P*G is called elliptic multiplication. It is easy to compute a public key from a private key but it is infeasible to compute a private key from a given public key (there is no division in the elliptic curve number space).","title":"Background"},{"location":"wp-and-research/privacy/#pederson-commitment","text":"Pederson commitment is a cryptographic commitment scheme equivalent to secretly writing a secret message m in a sealed, tamper-evident, individually numbered (or/and countersigned) envelope kept by who wrote the message. The envelope's content can't be changed by any means, and the message does not leak any information. In TomoP, a Pederson commitment C to a number f is defined as follows: C = m*G + f*H Where m is 256-bit number called blinding factor/mask, and H is another generator point. If we consider f as an account\u2019s balance on TomoChain, the commitment C can be used for hiding the transaction amount of such account. In other words, C is the Pederson encrypted amount of such account. Pederson commitment is a form of additively homomorphic encryption, which has the following nice property: The sum of two Pederson commitments to f1 and f2 is equal to the Pederson commitment of f1 + f2. `C(m1, f1) + C(m2, f2) = C(m1 + m2, f1 + f2)` This is the key application of Pederson commitment to most privacy-focused blockchains.","title":"Pederson commitment"},{"location":"wp-and-research/privacy/#tomop-architecture","text":"TomoP supports both an anonymous TOMO transfer method and a private token standard on TomoChain. The following figure shows the overview of TomoP that is integrated both at the core and the smart contract layer of TomoChain. Figure 1: Overview of TomoP Instead of directly sending funds to the recipient, the sender will anonymize their TOMO by making a transaction to the Privacy smart contract. As long as send transactions are made to the privacy contract, the latter allows TOMO holders to send/receiver TOMO to/from others without showing the transaction amount within it. TomoP transactions are like Monero transactions but in a smart contract on the very fast blockchain TomoChain. Typically, funds flow as follows: A user anonymize her TOMO by making a deposit transaction to send TOMO to the privacy smart contract. This transaction is a normal transaction and does not hide the transaction amount. This transaction creates a Note in the privacy contract. A note is similar to the concept of Unspent Transaction Output (UTXO) on Bitcoin blockchain with additional information, i.e. a Pedersen commitment, that is used for creating cryptographic proofs when the user wants to make an anonymous send transaction. The user makes anonymous send transactions from the user to a recipient. The transaction amount is hidden. Funds are not moved out of the privacy contract. The user uses her own private key to create RingCT and Bulletproofs for the privacy contract to verify. Anonymous send obfuscates transaction sender and receiver, and hides transaction amounts. The user can decide to de-anonymize her private TOMO by withdrawing all or part of her funds from the privacy contract to the user\u2019s public wallet. The withdrawing amount is visible on the chain but the remaining funds of the user held in the privacy contract is always hidden.","title":"TomoP architecture"},{"location":"wp-and-research/privacy/#transaction-fee-and-tomoz-integration","text":"TomoP utilizes TomoZ - the core protocol of TomoChain allowing gasless transactions in a decentralized way to anonymize msg.sender in anonymous send transactions to the privacy smart contract. TomoZ integration is very important to TomoP because of the way that it does not require an account to hold TOMO to make a transaction. For example, when Alice wants to make an anonymous send transaction to the privacy contract, if Alice uses her private key to sign the transaction, every one would know that Alice is making a private transaction, which would destroy the anonymity property of the protocol. Having a third-party such as relayer to sign the transaction and pay the gas fee is promising but centralizing the protocol. Integrating with TomoZ allows to create a privacy fee vault that is initially deposited by the issuer/owner of the privacy contract. For every anonymous send transaction, Alice uses her private key to create cryptographic proofs: RingCT, Bulletproofs, a brand new account/private key without TOMO is used for signing as msg.sender . The actual network fee will be paid from the privacy vault fee to masternodes through TomoZ protocol. On the other hand, to compensate the privacy transaction fee paid for masternodes, Alice sends a 0.01 TOMO fee to the issuer/owner within the smart contract execution of the anonymous transaction. The transaction fee flow is as the following figure. Figure 2: Privacy transaction fee and TomoZ integration","title":"Transaction fee and TomoZ integration"},{"location":"wp-and-research/privacy/#tomops-privacy-address","text":"TomoP uses a single private key to generate a dual-key system. The user private key s of the user's TOMO address is called private spend key and v = SHA256(s) is the private view key of the user. As the names imply: Private spend key s : This is used for making cryptographic proofs for spending funds in the privacy contract. Private view key v : This is used for viewing the information of all transactions belonging to the user. Having v only allows seeing the transaction history of the user, but does not allow spending funds. This could be used as a tool for authorized parties to check the transaction history of a user by requiring the user to register her private view key to the authorized parties for regulatory compliance purposes. Each private spend key s has an associated privacy address. The latter is Base58 encoding of the public spend ( S ) and public view ( V ) keys derived from s and v . When Alice wants to make an anonymous send transaction to Bob , Bob needs to send his privacy address to Alice .","title":"TomoP's privacy address"},{"location":"wp-and-research/privacy/#ring-confidential-transaction-and-bulletproofs","text":"","title":"Ring Confidential Transaction and Bulletproofs"},{"location":"wp-and-research/privacy/#confidential-transaction","text":"Confidential transaction was proposed for Bitcoin privacy integration by Greg Maxwell. It uses Pedersen commitment to encrypt transaction amounts using randomly generated masks. Cryptographically, confidential transaction states that the sum of Pedersen commitments of all input notes must be equal to the sum of all Pedersen commitments of all output notes . Users are recommended to check confidential transaction to better understand how it works. What confidential transaction does not support is transaction sender anonymity, which is supported by Ring Confidential Transaction (RingCT) implemented by Monero. RingCT is the combination of Ring Signature and Confidential Transaction. Ring Signature allows to obfuscate transaction sender in an anonymity set, whose size is 12 in TomoP. RingCT, however, requires the support of a zero-knowledge range proof in order to prove the transaction amount committed in a Pedersen commitment is positive to prevent from double spending. This is supported by Bulletproofs which supports short non-interactive proofs without a trusted setup for confidential transactions.","title":"Confidential transaction"},{"location":"wp-and-research/privacy/#range-proofs-with-bulletproofs","text":"Range proofs is a type of zero-knowledge proof used for proving that a secret value is within a value range without revealing the precise value of the secret. Bulletproofs is a new non-interactive zero-knowledge proof protocol with very short proofs and without a trusted setup; the proof size is only logarithmic in the witness size. TomoP uses Bulletproofs range proof to prove the transaction amount commited in Pedersen commitments is positive. Both Bulletproofs and RingCT are implemented in our privacy SDK .","title":"Range proofs with Bulletproofs"},{"location":"wp-and-research/privacy/#implementation","text":"","title":"Implementation"},{"location":"wp-and-research/privacy/#privacy-precompiled-contracts","text":"To reduce the gas consumption of RingCT and Bulletproof verification, we propose two precompiled contracts, RingCTVerifier and BulletproofVerifier , that are implemented in the core EVM of TomoChain, using Golang. These two precompiled contracts will be called by the privacy contract to verify the confidential transaction and Bulletproof range proof, respectively. The current addresses for those precompiled contracts are 0x000000000000000000000000000000000000001e and 0x0000000000000000000000000000000000000028.","title":"Privacy precompiled contracts"},{"location":"wp-and-research/privacy/#anonymize-tomo","text":"Anonymizing TOMO is equal to making a deposit transaction to the privacy contract. The deposit transaction creates a new Note n in the privacy contract that has the following cryptographic elements: A transaction public key P tx A stealth, one-time public key P st A Pedersen commitment C of the deposit amount A deposit fee of 0.001 TOMO is applied to pay transaction fees for the person who deposits to the privacy transaction fee vault. Once deposited, the privacy smart contract records that the person that has the private key corresponding to the deposit stealth public key has the deposit amount in a note.","title":"Anonymize TOMO"},{"location":"wp-and-research/privacy/#anonymous-send","text":"Suppose Bob wants to receive x TOMO from Alice via an anonymous send transaction. Bob sends his privacy address to Alice Alice derives a stealth one-time public key Stealth b as follows: Alice decodes the Base58 privacy address of Bob to have the public spend S b and public view V b key of Bob . Alice generates a random 256-bit number transaction private key s tx and computes the corresponding transaction public key S tx = s tx *G . Alice computes the Elliptic Curve Diff Hellman (ECDH) E = s tx * V b Alice computes Stealth b = E * G + S b . Alice generates Pedersen commitment for the transaction amount x . Alice randomly generates a 256-bit number called mask m Alice creates a Pedersen commitment C = m*G + x*H Alice encrypts m and x using the Elliptic Curve Diff Hellman E with an Advanced Encryption Standard (AES) algorithm. Let's denote the cipher text produced by this encryption MX . Alice generates ring confidential transaction RingCT sig for the transaction (details are provided later). Alice generates a bulletproof range proof bp to prove that x is positive without revealing the value of x . Alice bundles ( S tx , Stealth b , C , MX , sig , bp ) into the data of a transaction, generates a random private key to sign the transaction (to anonymize msg.sender ), and sends the signed transaction to the privacy smart contract. The generation of RingCT and Bulletproofs will be posted in details in TomoChain's technical blog later. Note that RingCT is generated by taking into account the transaction fee of 0.01 TOMO. The algorithm to generate sig is similar to the one described in Monero RingCT . In Step 6, TomoZ empowers the anonymization of msg.sender through the privacy fee vault and the paying of transaction fee within the internal execution of the privacy smart contract.","title":"Anonymous send"},{"location":"wp-and-research/privacy/#anonymous-send-transaction-verification-on-smart-contracts","text":"The privacy smart contract basically verifies: The existence of all input notes in the transaction The validity of the ring confidential transaction (RingCT) sig by calling RingCTVerifier precompiled contract. The validity of Bulletproofs bp by calling BulletproofVerifier precompiled contract.","title":"Anonymous send transaction verification on smart contracts"},{"location":"wp-and-research/privacy/#anonymous-reception-of-tomo","text":"Once the transaction is confirmed, Bob needs to scan all newly created notes on the privacy smart contract to recognize which one belongs to him. Bob uses his private view key to decode the encrypted transaction amount. A proof-of-concept code for the privacy contract can be found here . Due to the math complexity of RingCT and Bulletproofs, we omit the construction algorithms for those proofs here and will detail them in TomoChain's tech blog.","title":"Anonymous reception of TOMO"},{"location":"wp-and-research/privacy/#private-token-standard","text":"TomoP is designed to support private tokens issued on TomoChain. A new private token standard TRC21P will be supportec by extending the TRC21 token standard.","title":"Private token standard"},{"location":"wp-and-research/privacy/#regulatory-compliance","text":"By using a dual-key-like system, any user could register her/his private view key to an authorized authority. The latter will then be able to decode all transactions that involve the user but will not be able to create an anonymous send transaction. The authorized authority would be the goverment tax agency or any organization that allows to track user transactions for legal purposes. Even a bank could use TomoP to keep track of their user balance while leaving only authorized users with private spend keys to make transactions.","title":"Regulatory compliance"},{"location":"wp-and-research/privacy/#references","text":"On-going development Github repositories for TomoP https://github.com/tomochain/privacy-sc - contains privacy and utility contract solidity code https://github.com/tomochain/tomop - contains source code for precompiled contracts https://github.com/tomochain/tomowallet-web-testnet - proof-of-concept web wallet https://github.com/tomochain/privacyjs - SDK for TomoP to make anonymous transactions","title":"References"},{"location":"wp-and-research/sharding-paper/","text":"TomoChain Proposal for Decentralized Applications-Oriented Proof-of-Stake Sharding Architecture \u00b6 Preface \u00b6 TomoChain's vision and mission \u00b6 Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Scope \u00b6 This document describes TomoChain\u2019s initial proposal for decentralized applications-oriented Proof-of-Stake Sharding Architecture. This preliminary draft is not our final design specification and it is subject to change. Comments are welcomed and appreciated. Abstract and Keywords \u00b6 Abstract \u00b6 This paper proposes a sharding architecture solution for the TomoChain public blockchain infrastructure. Besides the aims at significantly improving the transaction processing performance in the current TomoChain design with the Proof-of-Stake Voting (PoSV) consensus, the presented sharding is designed in order to support decentralized applications\u2019 performance. The solution uses PoSV for intra-shard consensus because PoSV provides two-second block-time and fast confirmation time. The paper identifies and solves cross-shard transactions for smart contract message calls chain and data availability problem in shard reshuffling. Specifically, we propose two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy that places dependent smart contracts onto the same shard. Moreover, we also address the data availability problem in state sharding when shard reshuffling takes place. In addition, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. Keywords \u00b6 Sharding, Blockchain, Smart contract, TomoChain, cross-shard transactions, randomization, data availability,security, PoSV, consensus. Introduction \u00b6 Blockchain has become one of the most disruptive technologies that enable many decentralized applications, including but not limited to cryptocurrencies, smart contract, voting and supply chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing these blockchain proponents: Bitcoin [1] and Ethereum [2] only can process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5000-6000 transactions per seconds. Several scaling solutions have been proposed by the proponents, including on-chain and layer 2 scaling solutions. Off-chain scaling solutions are Lightning [3] network for Bitcoin, State Chanel [4] and Plasma [5] for Ethereum, just to name a few. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. Sharding challenges : Sharding is a technique that is inspired by the concept of database sharding in which the whole database is divided into sub-databases which will then be deployed on different servers. The goal is to parallelize the transaction processing by dividing the blockchain network into sub-networks each of which stores a portion of the whole blockchain and processes a subset of non-overlapping transactions. The application of sharding to decentralized blockchain systems has the following technical challenges that will be addressed in this paper: Assignment of masternodes to specific shards : This process is critical to ensure that masternodes are assigned to shards in a randomized manner to avoid an adaptive attack. In the latter, malicious masternodes can all join the same shard in order to collude it. Cross-shard transaction : Cross-shard transactions enable every account to transact with any other accounts. The challenge is how to execute cross-shard transactions securely and safely knowing that a cross-shard transaction involves more than two shards. Furthermore, the problem is even more challenging if the receiver is a smart contract. Cross-shard smart contract message calls chaining *: The problem of cross-shard transaction becomes very difficult if a smart contract in one shard calls another smart contract in another shard, which in turn invokes another contract in another shard. This cross-shard smart contract call chaining if not properly processed will be easy to attack and violate security requirements and harmful to the performance of the whole system. Shard reshuffling through randomization and data availability : The problem with state sharding is when the network reshuffles the set of masternodes for each shard after a period of time (often called epoch), the masternodes that switch from one shard to a new shard need to synchronize the current data of the new shard in order to execute new transactions for that shard. If not carefully treated, the data synchronization takes a significant amount of time and decreases the performance of the system. Previous works on sharding : Sharding has its origin from permissioned or closed distributed databases in which a centralized database is partitioned into smaller databases that store information related to a subset of users. The smaller databases are then maintained by trusted infrastructures provided by infrastructure providers such as Google or Amazon. However, the sharding in these closed distributed databases cannot be applied to public/permissionless blockchains in which one masternode does not have to trust in other masternodes in the Internet. Several blockchain-related works have been trying to propose a sharding solution that can leverage the transaction processing performance. In [6], Elastico is proposed as the first sharding solution for public blockchains. Elastico partitions the blockchain network into smaller committees, each of which then processes a disjoint set of transactions, called a shard. However, Elastico offers horizontal scaling but with high failure probabilities [12]. Zilliqa [7] inherits the sharding architecture solution from Elastico. Both Elastico and Zilliqa support network sharding and utilizes Practical Byzantine Fault Tolerance [8] as intra-shard consensus. In these approaches, micro blocks, which are created by the shards, are then aggregated into a final block by another consensus round run among the final committee members. OmniLedger [9] using the Unspent Transaction Output (UTXO) provides atomic cross-shard transactions. A common missing feature of these aforementioned approaches is the lack of smart contract support. If two transactions from the senders in different shards, which execute the same smart contract, would cause concurrent conflict updates in the different shards to the state of the same smart contract. In this paper, we propose a sharding architecture for TomoChain but can be applied to any Proof-of-Stake-based blockchain systems to address the aforementioned issues. Furthermore, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. The remainder of this paper is structured as follows: Section II describes the sharding architecture and the consensus protocol of the solution addressing the previously mentioned problem. Section III provides our solutions to different cross-shard transaction schemes. Section IV presents an incentive-driven mutual game verification game for fast transaction confirmation time and fast detection and penalization of malicious behaviors of attacking maternodes for strengthening security and safety. Section V details the reshuffling and data availability problem and solution. Finally, we conclude the paper and show some perspectives in Section VI. Sharding Architecture \u00b6 This section describes the sharding architecture and the used consensus protocol. We assume readers of this paper have basic understanding of our Proof-of-Stake Voting (PoSV) consensus protocol previously released and presented in [10]. However, to better describe the sharding architecture, we summarize some important information about TomoChain\u2019s PoSV. Specifically, TomoChain features a voting-based system to elect 150 Masternodes that are responsible for creating, verifying and finalizing the blocks created within a period, called epoch, which lasts for 900 of two-second block-times. Each coin-holder must deposit at least 50 000 TOMO to a Voting smart contract and must satisfy a set of infrastructure requirements. The set of Masternodes is dynamically selected through votes made by coin-holders that send their tokens to the Voting smart contract. Sharding architecture overview \u00b6 Figure 1 shows the proposed sharding architecture. Without loss of generality, we suppose there are N masternodes that are selected among the candidates. The network of masternodes is assigned to specific shards using randomization sampling. This latter randomly divides the set of N masternodes into sub-groups of size c (either 10 or 15), namely the shard size, thus the total number of shards S in the network is N/c . This step is called network sharding. This step is repeated every epoch. Each shard also has an identifier numbered from 0 to ( S \u2013 1). Each shard/subgroup only stores a portion of the whole blockchain, instead of the whole blockchain as in existing blockchains such as Bitcoin and Ethereum. The processing of a transaction assigned to a specific shard is based on the address of the sender of the transaction. A transaction tx is assigned to shard id if and only if log_2(N) rightmost bits of the transaction sender\u2019s address is equal to id . That means, each external owned account is managed by a specific shard, based on its address. Therefore, simple double-spending attacks by sending transactions to different shards are avoided. For example, transactions from address 0xabc..def and 0xabc...ded are processed by shard 15 (16th shard) and 13 (14th shard), respectively, if the total number of shards N = 16. There is also a root chain that interacts with shard chains. The root chain is used for securing the transactions in the shard chains. The root chain does not store details of transactions assigned to shards, but block hashes and the smart contracts used for voting and block finalization. TomoChain features a Voting smart contract that is for masternode candidates and coin-holders to deposit and vote for masternodes, respectively. In the sharding architecture, this smart contract is deployed on the root chain. Coin-holders interact with the Voting smart contract in the current TomoChain as they interact with the root chain in the sharding architecture. Every vote and deposit are recorded in the root chain. The blocks in the root chain are created and verified by a larger number of masternodes than shard chains\u2019 for securing the whole system (see Consensus protocol for more detailed discussion). Ideally, all masternodes are responsible for the root chain, just as they are maintaining TomoChain in PoSV. An interesting point is that the set of masternodes for the root chain does not need to do computation for transactions of specific shards, but only for creating blocks containing transactions to the consensus smart contracts (see [11] for detailed discussion). That means, the computation throughput is much smaller than that of the current PoSV because most of transactions happen in the shard chains. All masternodes will be creating and verifying blocks in the root chain and a shard chain, but there is no slot of two-second within which a masternode must create blocks for both the root chain and a shard chain. This is because it is very hard for a masternode to create two blocks within 2s. It is worth noting that, in order for attackers to create another longer shard chain than an existing shard chain, the attackers need to successfully revert both the shard chain and the root chain, which are unlikely to happen since the root chain is secured by all masternodes. Shard assignment through randomization sampling \u00b6 As a reminder, masternodes in TomoChain in an epoch is selected at the end of the previous epoch and there is also a randomization process during the previous epoch in order to select block verifiers for double validation. The addresses of the set of masternodes for next epoch is recorded in the Voting smart contract in a decreasing order of total votes for them. Each masternode is identified by its deposit wallet address. The goal of the shard assignment is to divide the address-identified N masternodes into subsets of masternodes, each of which process a disjoint set of transactions. To do that, an additional randomization process is executed during the previous epoch for shard assignment. Figure 1: The proposed sharding architecture solution The shard assignment is realized through randomization sampling that executes a pseudo random number generator function with a random seed agreed between the masternodes. We utilize the decentralized randomization algorithm that was previously introduced in our TomoChain Proof-of-Stake Voting consensus. The shard assignment has the following steps: Randomization: This step follows our previously proposed decentralized lock-recovery randomization scheme to compute a random seed which is unpredictable and not biased by any masternode. Shard assignment computation: Based on a random seed, we generate N random numbers using a pseudo random number generator. The N numbers are used in a permutation algorithm for sampling S sets of c masternodes. Figure 1 shows an example of the result of the decentralized randomization sampling process. The shards are communicated with each other through a cross-shard communication scheme, which is presented in the next section. Each shard sends their created blocks, block hashes and block signatures to the root chain that stores them in the TomoChain block signer smart contract (see Section Consensus protocol for more information). Consensus protocol \u00b6 In PoSV, there are currently two consensus smart contracts deployed onto TomoChain: Voting smart contract: This contract allows coin-holders to deposit (to become a masternode candidate), to vote for masternodes, to resign from the candidates list, to un-vote for masternodes, and to withdraw voted and deposited tokens. Block signer smart contract: Once a masternode verifies a block, the masternode signs off the block and sends the signature to the block signer smart contract. In the sharding architecture, these two smart contracts are deployed onto the root chain. Since the latter is verified by many masternodes, the smart contracts are secured. Proof-of-Stake Voting (PoSV) consensus with double validation and randomization is run among the set of masternodes of a shard. As a reminder, PoSV provides fast block-time and confirmation time, and a double validation technique for security enhancement. A block in PoSV is verified by both block creator, which creates the block, and block verifier, which verifies the block before adding it to the blockchain (see [10] for more information about block creator and block verifier in double validation). Other masternodes will then check whether the block verifier signs off on the block. Each masternode verifies a block by sending its signature for the block to the block signer smart contract on the root chain. A block in a shard is confirmed if \u00be masternodes of that shard verifies and signs it off. The confirmation time for intra-shard transactions can be almost instant, just as what is provided by PoSV without sharding. The root chain does not need to do re-computation for verifying blocks created by shard chains. The root chain is secure since it is maintained by all masternodes in the network. A double-spending attack to a shard needs to revert both the shard chain and the root chain, which is unlikely to happen. There is a small probability that a shard is colluded, in which more than its \u00be masternodes are attackers that do an adaptive attack. These attackers can create invalid blocks to create, for example, money out of thin air. In order to deal with this issue, we provide a game theory incentive-driven approach that is similar to Plasma. This approach is presented in Section IV. Cross-shard Transaction Schemes \u00b6 Cross-shard transaction \u00b6 A cross-shard transaction involves sending some coins from a sender in one shard to a receiver in another shard. It enables any account in a shard to transact with any other account in other shards. Our Lock-Commit cross-shard transaction requires cross-shard communication and is processed in two steps as follows: Lock at sending shard: The transaction is first processed by the sender shard which decreases the balance of the sender account. At the end of this phase, a lock transaction receipt is generated which is signed by the masternode which produces the block containing the transaction. The receipt is only generated if the transaction has been finalized (A block is considered as \u201cfinalized\u201d meaning that it is irreversible and any attempt to modify it is refused by the network) by the shard (the block is verified and signed by \u00be the number of masternodes of the shard sending their signatures to the Block Signer smart contract on the root chain). It plays the role of a Proof-of-Acceptance which is then sent to the receiver shard for processing. The Proof-of-Acceptance consists of the transaction, the Merkle proof of the transaction in the block at the sender shard, and the finality proof of the block. Commitment at receiving shard: The leader of the receiver shard sends the Proof-of-Acceptance for the transaction at the lock phase to the receiver shard. This latter processes the proof as a transaction which might increase the balance of the receiver. An issue of this commitment phase is that the malicious masternodes in the receiver shard might ignore the commit transaction, thus leaving the whole transaction stuck (because the sender\u2019s balance is decreased while the receiver\u2019s balance is not increased). However, because masternodes take turns to create blocks in a round-robin manner following the PoSV consensus, the proof will eventually be added to a block created by an honest masternode, even though one or several malicious masternodes might ignore the proof transaction. This liveness property is discussed in details in our previous technical paper for PoSV consensus. Figure 2 shows an illustrative example of a smart contract call cross-shard transaction. One of the complications of this transaction scheme is how to refund the left gas after the execution of the smart contract at the receiver shard completes. The left gas should be returned back to the sender (User) of the transaction in the sender shard. With that being said, in order to completely confirm a smart contract call cross-shard transaction, one must wait until all these back-and-forth phases between these shards are confirmed one-by-one. Therefore, the transaction confirmation latency increases, which is not expected from user perspectives, despite the significant increase of transaction volume. To deal with this issue, we propose another cross-shard transaction scheme, namely transfer-first cross-shard transaction scheme (TFC). In this latter, instead of directly doing a smart contract call cross-shard transaction, the sender at one shard can: Send the expected amount to another external account that is managed by herself/himself at the receiver shard through a simple balance transfer. Note that, this latter still requires the Lock-Commit scheme to make simple balance transfer. However, Lock-Commit scheme for simple balance transfer does not involve the complexity of gas refund as for smart contracts. This is because the Lock-Commit scheme for cross-shard simple balance transfer will consume a fixed amount gas (the gas for two balance transfers or 2300*2 gas). Use the controlled external account to interact with all smart contracts in the receiver shard. All transactions started by this external account within the receiver shard will then be confirmed almost instantly as provided by the PoSV consensus. While this transfer-first cross-shard transaction scheme helps maintain the fast transaction confirmation property of PoSV, it raises another issue: a user must manage as many accounts as the number of shards in the system in order to be able to instantly interact with all smart contracts and decentralized applications deployed on all shards. In order to alleviate this complicated account management issue, we intend to integrate an account management layer into our TOMO wallet. This layer is to help users manage their accounts in different shards as a single account in the current TomoChain design. It brings transparency to users as they are interacting with a one-shard system. When a user wants to make a transaction, the wallet does as follows: The account management layer specifies the target shard ID, based on the address of the receiver of the transaction. If the receiver is an external owned account, a simple transfer transaction is created and broadcast to the masternodes network. If the receiver is a smart contract, the account management layer verifies whether the address A0 corresponding to the target shard has the expected amount of token for the transaction. If the balance is not sufficient, a transfer transaction from one of the accounts in other shards to the address A0. Then, the transaction to the smart contract is created and sent to the masternodes network. *Figure 2: Smart contract call cross-shard transaction * One issue with this cross-shard transaction scheme is that the transaction fee would be higher than the non-sharding blockchain system since any cross-shard transaction must pay an additional fee at the sender shard of the transaction for the Lock at sending shard phase. However, the issue can be alleviated if the scheme is implemented along with a near-zero fee transaction system such as TomoChain. Smart contract message calls chain \u00b6 A smart contract, executed within a shard, might call another smart contract managed by another shard in the middle of its execution. Many smart contracts can be involved in a smart contract message calls chain. This is a very challenging problem because the execution of a caller smart contract in a caller shard cannot suspend and wait for the completion and finality of the callee smart contract in a callee shard. If that is the case, both the caller and callee shards would be suspended, thus significantly decreasing the performance of the whole system. The problem might be more harmful if the smart contract message calls chain involves many shards. Let\u2019s illustrate this challenge by the example in Figure 3 with the corresponding solidity source code in Figure 4. Suppose a user sends a transaction to a smart contract SC1 in order to call method m1 of SC1. The execution of the latter in Shard1 executes the method m2 of Shard2, which in turn makes another message call to SC3 in Shard3. For simplification, we assume that the user\u2019s address is managed by Shard1. Otherwise, the user can use the TFC cross-shard transaction scheme presented previously. The TFC cross-shard transaction scheme previously presented in Cross-shard transaction is not applicable to the illustrative example. The reason is that, the method calls between smart contracts are not transactions, but message calls. Message calls are not directly written to the blockchain. Even if we can wisely consider message calls as transactions in this case, the message call m1 to m2 executed in Shard1 must wait for the message call in Shard2 to be confirmed, which in turns needs to wait for the message call in Shard3 to be confirmed. This wait-for-confirmation chain critically decreases the performance of the system since the operations of waiting shards are blocked. Figure 3: Smart contract message calls chain example Figure 4: Solidity example for smart contract message calls chain In order to deal with this problem, we propose to group all smart contracts in a message calls chain and deploy them onto the same shard. With that being said, for the illustrative example, the smart contracts SC1, SC2 and SC3 are all deployed onto the shard onto which SC3 is deployed. This is because SC3 is the first contract among the three to be deployed. By this way, any smart contract message calls chain transaction is always executed within one single shard. Therefore, the aforementioned problem is eliminated. There is one issue that this solution cannot deal with is when a contract A calls two independent contracts B and C, which are respectively previously placed onto different shards. We approach this issue by early detecting this problem through an off-chain smart contract analysis when the user wants to deploy this smart contract A to the network. Then, an exception is raised that does not allow to place A onto the network. Incentive-driven Mutual Verification Game for Safety and Security \u00b6 Sharding is usually considered when the system has many participating nodes. This is because higher number of nodes per shard decreases the probability that a shard is colluded meaning that invalid blocks created by a colluded shard can be finalized. In order to make sharding applicable to blockchain systems with smaller number of nodes per shard, i.e. 10 nodes per shard, while still maintaining its security, we propose to use a game theory incentive-driven mechanism which is currently utilized by Plasma. Concretely, a shard is monitored by one or multiple challengers. The latter can be either independent nodes or masternodes in the root chain. They act as full nodes and receive all transactions and blocks processed by the monitored shard and verify all of these blocks. If a processed transaction is detected as invalid, i.e. the transaction is mal-formed or creates money out of thin air, the challenger sends a proof-of-invalidation or fraud proof to the root chain. The incentive for the challenger is that if a transaction is successfully challenged, the challenger gets rewarded as the total deposited tokens of the masternodes that have validated the invalid block. In contrast, all of the masternodes that have verified the invalid block are penalized by losing all of their deposited tokens to the challenger. Note that, non-masternode challengers do not have to deposit any amount of tokens. There are two safety concerns about this incentive-driven approach: Motivation for challengers: Non-masternodes challengers are expected to actively monitor the network to get incentives for invalid blocks. However, in the long term, non-masternodes are only motivated for monitoring the network if there are occasional invalid blocks so that the non-masternodes challengers can compensate for the cost of operating and monitoring the network. If there are no invalid blocks for a long period, the challengers will eventually be discouraged for this monitoring task, thus leaving a safety issue for the attackers in a colluded shard to create invalid blocks. The latter then can be falsely finalized because all non-masternodes challengers turn off their monitoring task since they cannot pay operational costs for monitoring the network. Data availability: Data availability is a strict requirement for the challengers to be able to detect invalidity. Without data, it is impossible to claim fraud proofs. For example, when a new shard block is created, any challenger needs the shard block, the previous state of the shard chain, and the signatures of the attacker masternodes verifying the invalid block, in order to have enough evidence to penalize the attackers. Therefore, all attackers would choose to refuse to broadcast their created blocks to honest nodes. This is because if a shard is colluded, all of the attackers within that shard can finalize an invalid block without sending any block data to honest nodes. We tackle the two aforementioned concerns as follows: Masternode candidates can become challengers to monitor the network and get incentives if some masternodes verify an invalid block. These candidates have incentives to monitor the network to detect the malicious behavior since whether having monitored or not, they still have to pay operational and monitoring costs. Furthermore, monitoring the network is also one of the ways to show its performance for coin-holders to vote it to become a masternode. In addition, if a masternode candidate chooses to not receive shard blocks and later on it is elected as a masternode assigned to a shard, the elected masternode will not be able to verify or create any shard blocks, which in turn lowers its performance. Eventually, the elected masternode will be quickly voted out of the masternode list by the coin-holders. Shard blocks and masternodes\u2019 signatures produced by maternodes need to be propagated to the root chain in order to finalize the blocks. All masternodes then have chance of verifying the validity of the shard blocks to detect the malicious behavior and get incentives. We call this mechanism an incentive-driven mutual verification game. If one shard is colluded and an invalid block is produced by attackers, whether the attackers in the shard want to or not, they have to send the invalid block to the root chain to finalize. Exposing an invalid block to the root chain is extremely risky for the attackers to lose all of their deposits (note that, masternodes are not required to verify blocks submitted to the root chain (that makes computation throughput on the root chain significantly less than the shard chains\u2019). Masternodes can propagate the shard blocks submitted to the root chain to the masternode candidates or any challenger that will verify the validity of the shard blocks, which solves the data availability problem in this case). It is worth noting that, the attackers have no incentives to not propagate invalid blocks to the root chain. This is because, by doing so, the attackers have spent computation resources and operational costs for only locally postponing the transactions within one shard. Furthermore, the attackers will be voted out of the masternode list because of their low performance and these postponed transactions will then be processed by the same shard but with a different set of masternodes once network reshuffling has been executed. Fraud proofs : If a block with an invalid state transition is signed off and propagated throughout the network, any other participant who receives the block can submit a merkleized fraud proof to the Voting smart contract (note that, the Voting smart contract contains all deposits and voted tokens, therefore, the penalty for masternodes creating invalid blocks will be executed by a function within the contract. The penalty function is executed once a fraud proof for an invalid block is submitted by any nodes) on the root chain and the shard chain rejects the invalid block and is rolled back. Fraud proofs ensure that all state transitions are validated. Example fraud proofs are proof of transaction spendability (funds are available in the current shard), proof-of-state transition (including checking the signature for the ability a transaction can be validated and executed, proof of inclusion/exclusion across blocks, and deposit/withdrawal proofs). In order for this construction to have minimal proofs, though, all blocks must provide a commitment to a merkleized trie of the current state, a trie of outputs spent, a merkle tree of transactions, and a reference to the prior state being modified. The fraud proofs and the incentive-driven mutual verification game combined with double validation ensure that a coalition of participants is not able to create invalid blocks that can be finalized without getting penalized. This ensures that the challengers always have access to shard blocks, thus are able to prove (and therefore discourage) invalid state transitions in shard blocks. Compared to TrueBit and Plasma: TrueBit [11] and Plasma [5] both use an incentive-driven verification game approach to provide scalable and secure solutions. Similar to our argument on the incentives for challengers to observe the network, the authors of TrueBit argue that, if there is no chance of finding a bug in the blocks, challengers will likely refuse to continue the monitoring task. In order to motivate the challengers to actively observe the network, TrueBit proposes to provide \u201cforced errors\u201d. These errors are produced at random and unpredictable time. The main objective of blocks with forced errors is to incentivize the challengers and keep them motivated to secure the network. These blocks are special and the creators and validators of these blocks are not penalized. Plasma provides an \u201cexit\u201d mechanism that aims at resolving the data availability problem. Specifically, in Plasma, when a participant cannot access block data of a Plasma chain, the participant can move her asset/token from the Plasma chain to the root chain (or the parent Plasma chain) by executing the \u201cexit\u201d mechanism. The participant then needs to wait for an amount of time, i.e. 1 week, in order for other participants to submit a fraud proof if the exit execution is falsified. In order to maintain fast confirmation time as in the current TomoChain PoSV design and to have the shards\u2019 liveness, our approach is driven by an incentive and mutual verification game. The latter aims at providing both fast confirmation and detection of Byzantiness of a block. By utilizing the very strong incentivizing-penalizing incentive-driven mutual verification game, challengers are strongly encouraged to work hard in order to keep the system safe and secure and shard masternodes are discouraged to act maliciously. Reshuffling and Data Availability \u00b6 To enhance further the security of shards, it is very important that shards should be dynamic for resilience against attacks and failures of nodes in a shard. For example, one shard might be stuck in a situation where blocks are valid but cannot be finalized because attacking masternodes do not validate these blocks. A technique for dealing with this problem is to reshuffle the masternodes assigned to the shards. This means the set of masternodes for each shard is changed dynamically every epoch. At the end of each epoch, the randomization sampling is repeated for a different set of masternodes elected to participate into shards. Reshuffling enhances the security and resilience of the system. However, it introduces a new challenge: the data availability problem. In the latter, every masternode joining to a new shard must synchronize the blockchain portion of this new shard in order to be able to verify transactions belonging to it. If the portion is too large and the synchronization time is too short, the entire shard cannot verify any transaction, thus renders the shard useless for the whole synchronization time. This problem can be tackled by the following strategies:: Shard masternodes storing all states of other shards: It requires that all masternodes, even non-shard member nodes, must receive and store all of the portions of state in all shards. This solution allows for any masternodes to smoothly switch from one shard to or join any other shard without needing a data synchronization time. Gradual reshuffling: Instead of resampling the whole set of masternodes assigned to each shard at the end of each epoch, the reshuffling might only pull a subset of masternodes out of a shard while leaving the remainder intact, i.e. 1/10 of the masternodes are kicked out from a shard while the other masternodes still stay in the shard and the resampling takes c/10 (c is the shard size) masternodes randomly from the set of masternode candidates. Since the latter have been synchronizing all blocks (see Section IV for more information), the system can smoothly continue the operations without interrupting time for data synchronization. Randomization sampling in advance: Still using the strategy of giving masternodes joining new shards some amount of time to download the blockchain data of a shard, this approach lets the network execute the randomization sampling in the middle of an epoch. Therefore, assigned masternodes will know ahead of time to which shard they will contribute in the next epoch. In this fashion, these in-advance assigned masternodes will have enough time to download the blockchain data of the assigned shard to prepare for the next epoch. Currently, we have been leaning towards the first and second strategy because these solutions are more implementable and analyzable for security. These strategies will be rigorously analyzed before making a final decision since both have its own advantages and limitations. While the first strategy has advantage of simplicity and masternodes and candidates can switch from one shard to any other shard smoothly, the storage and network bandwidth of masternodes might be more needed. On the other hand, the second strategy can save more storage and network bandwidth, it raises a question: which masternodes should be kicked out of a shard if the performance of all masternodes in that shard is efficiently equal to each other\u2019s. Conclusion \u00b6 The paper has presented a new solution to sharding architecture for public blockchains. It aims at being transparent to users and significantly improving the transaction processing performance, while still maintaining basic security requirements of the system. The paper uniquely identified and solved cross-shard transactions for smart contract call chaining and data availability problem in shard reshuffling. The proposed solution uses the Proof-of-Stake Voting (PoSV) efficient consensus protocol proposed by Tomochain for intra-shard consensus. Specifically, we relied on our decentralized randomization algorithm for randomized shard assignment of masternodes and proposed two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy. The latter places dependent smart contracts onto the same shard, which eliminates smart contract message calls chain problem involving multiple shards. In order to ensure safety and security of shards, we proposed an incentive-driven mutual verification game. In this latter, masternodes that create and/or verify an invalid block are penalized by losing all of their deposits to any participant that detects the invalidity by providing fraud proofs. Moreover, we also discuss the data availability problem in state sharding when shard reshuffling takes place and propose several possible solutions. We are currently analyzing rigorously the safety and security properties of the proposed architecture to show its soundness. In future, once the analysis will have been done, we will implement the proposed architecture on top of the TomoChain blockchain. References \u00b6 [1] S. Nakamoto, \u201cBitcoin: A Peer-to-Peer Electronic Cash System,\u201d p. 9. [2] G. Wood, \u201cEthereum: a secure decentralised generalised transaction ledger,\u201d Ethereum Project Yellow Paper, pp. 1\u201332, 2014. [3] J. Poon and T. Dryja, \u201cThe Bitcoin Lightning Network:,\u201d p. 59. [4] P. Mccorry, S. Bakshi, I. Bentov, S. Meiklejohn, and A. Miller, \u201cPisa: Arbitration Outsourcing for State Channels.\u201d [5] J. Poon and V. Buterin, \u201cPlasma: Scalable Autonomous Smart Contracts,\u201d 2017. [6] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, \u201cA Secure Sharding Protocol For Open Blockchains,\u201d in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS\u201916, 2016, pp. 17\u201330. [7] P. Barrett, \u201cZilliqa Technical Whitepaper,\u201d Zilliqa, pp. 1\u20138, 2017. [8] M. Castro, M. Castro, B. Liskov, and B. Liskov, \u201cPractical Byzantine fault tolerance,\u201d OSDI {\u2019}99: Proceedings of the third symposium on Operating systems design and implementation, no. February, pp. 173\u2013186, 1999. [9] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and E. Syta, \u201cOmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding,\u201d IEEE Symposium on Security & Privacy, 2018. [10] Tomochain R&D Team, \u201cTomochain: Masternodes Design Technical White Paper Version 1.0,\u201d Technical White Paper, 2018. [11] J. Teutsch and C. Reitwie\u00dfner, \u201cA scalable veri\ufb01cation solution for blockchains,\u201d p. 50, 2017. [12] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., & Ford, B. (2018, May). Omniledger: A secure, scale-out, decentralized ledger via sharding. In 2018 IEEE Symposium on Security and Privacy (SP) (pp. 583-598). IEEE.","title":"Sharding design paper"},{"location":"wp-and-research/sharding-paper/#tomochain-proposal-for-decentralized-applications-oriented-proof-of-stake-sharding-architecture","text":"","title":"TomoChain Proposal for Decentralized Applications-Oriented Proof-of-Stake Sharding Architecture"},{"location":"wp-and-research/sharding-paper/#preface","text":"","title":"Preface"},{"location":"wp-and-research/sharding-paper/#tomochains-vision-and-mission","text":"Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses.","title":"TomoChain's vision and mission"},{"location":"wp-and-research/sharding-paper/#scope","text":"This document describes TomoChain\u2019s initial proposal for decentralized applications-oriented Proof-of-Stake Sharding Architecture. This preliminary draft is not our final design specification and it is subject to change. Comments are welcomed and appreciated.","title":"Scope"},{"location":"wp-and-research/sharding-paper/#abstract-and-keywords","text":"","title":"Abstract and Keywords"},{"location":"wp-and-research/sharding-paper/#abstract","text":"This paper proposes a sharding architecture solution for the TomoChain public blockchain infrastructure. Besides the aims at significantly improving the transaction processing performance in the current TomoChain design with the Proof-of-Stake Voting (PoSV) consensus, the presented sharding is designed in order to support decentralized applications\u2019 performance. The solution uses PoSV for intra-shard consensus because PoSV provides two-second block-time and fast confirmation time. The paper identifies and solves cross-shard transactions for smart contract message calls chain and data availability problem in shard reshuffling. Specifically, we propose two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy that places dependent smart contracts onto the same shard. Moreover, we also address the data availability problem in state sharding when shard reshuffling takes place. In addition, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block.","title":"Abstract"},{"location":"wp-and-research/sharding-paper/#keywords","text":"Sharding, Blockchain, Smart contract, TomoChain, cross-shard transactions, randomization, data availability,security, PoSV, consensus.","title":"Keywords"},{"location":"wp-and-research/sharding-paper/#introduction","text":"Blockchain has become one of the most disruptive technologies that enable many decentralized applications, including but not limited to cryptocurrencies, smart contract, voting and supply chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing these blockchain proponents: Bitcoin [1] and Ethereum [2] only can process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5000-6000 transactions per seconds. Several scaling solutions have been proposed by the proponents, including on-chain and layer 2 scaling solutions. Off-chain scaling solutions are Lightning [3] network for Bitcoin, State Chanel [4] and Plasma [5] for Ethereum, just to name a few. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. Sharding challenges : Sharding is a technique that is inspired by the concept of database sharding in which the whole database is divided into sub-databases which will then be deployed on different servers. The goal is to parallelize the transaction processing by dividing the blockchain network into sub-networks each of which stores a portion of the whole blockchain and processes a subset of non-overlapping transactions. The application of sharding to decentralized blockchain systems has the following technical challenges that will be addressed in this paper: Assignment of masternodes to specific shards : This process is critical to ensure that masternodes are assigned to shards in a randomized manner to avoid an adaptive attack. In the latter, malicious masternodes can all join the same shard in order to collude it. Cross-shard transaction : Cross-shard transactions enable every account to transact with any other accounts. The challenge is how to execute cross-shard transactions securely and safely knowing that a cross-shard transaction involves more than two shards. Furthermore, the problem is even more challenging if the receiver is a smart contract. Cross-shard smart contract message calls chaining *: The problem of cross-shard transaction becomes very difficult if a smart contract in one shard calls another smart contract in another shard, which in turn invokes another contract in another shard. This cross-shard smart contract call chaining if not properly processed will be easy to attack and violate security requirements and harmful to the performance of the whole system. Shard reshuffling through randomization and data availability : The problem with state sharding is when the network reshuffles the set of masternodes for each shard after a period of time (often called epoch), the masternodes that switch from one shard to a new shard need to synchronize the current data of the new shard in order to execute new transactions for that shard. If not carefully treated, the data synchronization takes a significant amount of time and decreases the performance of the system. Previous works on sharding : Sharding has its origin from permissioned or closed distributed databases in which a centralized database is partitioned into smaller databases that store information related to a subset of users. The smaller databases are then maintained by trusted infrastructures provided by infrastructure providers such as Google or Amazon. However, the sharding in these closed distributed databases cannot be applied to public/permissionless blockchains in which one masternode does not have to trust in other masternodes in the Internet. Several blockchain-related works have been trying to propose a sharding solution that can leverage the transaction processing performance. In [6], Elastico is proposed as the first sharding solution for public blockchains. Elastico partitions the blockchain network into smaller committees, each of which then processes a disjoint set of transactions, called a shard. However, Elastico offers horizontal scaling but with high failure probabilities [12]. Zilliqa [7] inherits the sharding architecture solution from Elastico. Both Elastico and Zilliqa support network sharding and utilizes Practical Byzantine Fault Tolerance [8] as intra-shard consensus. In these approaches, micro blocks, which are created by the shards, are then aggregated into a final block by another consensus round run among the final committee members. OmniLedger [9] using the Unspent Transaction Output (UTXO) provides atomic cross-shard transactions. A common missing feature of these aforementioned approaches is the lack of smart contract support. If two transactions from the senders in different shards, which execute the same smart contract, would cause concurrent conflict updates in the different shards to the state of the same smart contract. In this paper, we propose a sharding architecture for TomoChain but can be applied to any Proof-of-Stake-based blockchain systems to address the aforementioned issues. Furthermore, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. The remainder of this paper is structured as follows: Section II describes the sharding architecture and the consensus protocol of the solution addressing the previously mentioned problem. Section III provides our solutions to different cross-shard transaction schemes. Section IV presents an incentive-driven mutual game verification game for fast transaction confirmation time and fast detection and penalization of malicious behaviors of attacking maternodes for strengthening security and safety. Section V details the reshuffling and data availability problem and solution. Finally, we conclude the paper and show some perspectives in Section VI.","title":"Introduction"},{"location":"wp-and-research/sharding-paper/#sharding-architecture","text":"This section describes the sharding architecture and the used consensus protocol. We assume readers of this paper have basic understanding of our Proof-of-Stake Voting (PoSV) consensus protocol previously released and presented in [10]. However, to better describe the sharding architecture, we summarize some important information about TomoChain\u2019s PoSV. Specifically, TomoChain features a voting-based system to elect 150 Masternodes that are responsible for creating, verifying and finalizing the blocks created within a period, called epoch, which lasts for 900 of two-second block-times. Each coin-holder must deposit at least 50 000 TOMO to a Voting smart contract and must satisfy a set of infrastructure requirements. The set of Masternodes is dynamically selected through votes made by coin-holders that send their tokens to the Voting smart contract.","title":"Sharding Architecture"},{"location":"wp-and-research/sharding-paper/#sharding-architecture-overview","text":"Figure 1 shows the proposed sharding architecture. Without loss of generality, we suppose there are N masternodes that are selected among the candidates. The network of masternodes is assigned to specific shards using randomization sampling. This latter randomly divides the set of N masternodes into sub-groups of size c (either 10 or 15), namely the shard size, thus the total number of shards S in the network is N/c . This step is called network sharding. This step is repeated every epoch. Each shard also has an identifier numbered from 0 to ( S \u2013 1). Each shard/subgroup only stores a portion of the whole blockchain, instead of the whole blockchain as in existing blockchains such as Bitcoin and Ethereum. The processing of a transaction assigned to a specific shard is based on the address of the sender of the transaction. A transaction tx is assigned to shard id if and only if log_2(N) rightmost bits of the transaction sender\u2019s address is equal to id . That means, each external owned account is managed by a specific shard, based on its address. Therefore, simple double-spending attacks by sending transactions to different shards are avoided. For example, transactions from address 0xabc..def and 0xabc...ded are processed by shard 15 (16th shard) and 13 (14th shard), respectively, if the total number of shards N = 16. There is also a root chain that interacts with shard chains. The root chain is used for securing the transactions in the shard chains. The root chain does not store details of transactions assigned to shards, but block hashes and the smart contracts used for voting and block finalization. TomoChain features a Voting smart contract that is for masternode candidates and coin-holders to deposit and vote for masternodes, respectively. In the sharding architecture, this smart contract is deployed on the root chain. Coin-holders interact with the Voting smart contract in the current TomoChain as they interact with the root chain in the sharding architecture. Every vote and deposit are recorded in the root chain. The blocks in the root chain are created and verified by a larger number of masternodes than shard chains\u2019 for securing the whole system (see Consensus protocol for more detailed discussion). Ideally, all masternodes are responsible for the root chain, just as they are maintaining TomoChain in PoSV. An interesting point is that the set of masternodes for the root chain does not need to do computation for transactions of specific shards, but only for creating blocks containing transactions to the consensus smart contracts (see [11] for detailed discussion). That means, the computation throughput is much smaller than that of the current PoSV because most of transactions happen in the shard chains. All masternodes will be creating and verifying blocks in the root chain and a shard chain, but there is no slot of two-second within which a masternode must create blocks for both the root chain and a shard chain. This is because it is very hard for a masternode to create two blocks within 2s. It is worth noting that, in order for attackers to create another longer shard chain than an existing shard chain, the attackers need to successfully revert both the shard chain and the root chain, which are unlikely to happen since the root chain is secured by all masternodes.","title":"Sharding architecture overview"},{"location":"wp-and-research/sharding-paper/#shard-assignment-through-randomization-sampling","text":"As a reminder, masternodes in TomoChain in an epoch is selected at the end of the previous epoch and there is also a randomization process during the previous epoch in order to select block verifiers for double validation. The addresses of the set of masternodes for next epoch is recorded in the Voting smart contract in a decreasing order of total votes for them. Each masternode is identified by its deposit wallet address. The goal of the shard assignment is to divide the address-identified N masternodes into subsets of masternodes, each of which process a disjoint set of transactions. To do that, an additional randomization process is executed during the previous epoch for shard assignment. Figure 1: The proposed sharding architecture solution The shard assignment is realized through randomization sampling that executes a pseudo random number generator function with a random seed agreed between the masternodes. We utilize the decentralized randomization algorithm that was previously introduced in our TomoChain Proof-of-Stake Voting consensus. The shard assignment has the following steps: Randomization: This step follows our previously proposed decentralized lock-recovery randomization scheme to compute a random seed which is unpredictable and not biased by any masternode. Shard assignment computation: Based on a random seed, we generate N random numbers using a pseudo random number generator. The N numbers are used in a permutation algorithm for sampling S sets of c masternodes. Figure 1 shows an example of the result of the decentralized randomization sampling process. The shards are communicated with each other through a cross-shard communication scheme, which is presented in the next section. Each shard sends their created blocks, block hashes and block signatures to the root chain that stores them in the TomoChain block signer smart contract (see Section Consensus protocol for more information).","title":"Shard assignment through randomization sampling"},{"location":"wp-and-research/sharding-paper/#consensus-protocol","text":"In PoSV, there are currently two consensus smart contracts deployed onto TomoChain: Voting smart contract: This contract allows coin-holders to deposit (to become a masternode candidate), to vote for masternodes, to resign from the candidates list, to un-vote for masternodes, and to withdraw voted and deposited tokens. Block signer smart contract: Once a masternode verifies a block, the masternode signs off the block and sends the signature to the block signer smart contract. In the sharding architecture, these two smart contracts are deployed onto the root chain. Since the latter is verified by many masternodes, the smart contracts are secured. Proof-of-Stake Voting (PoSV) consensus with double validation and randomization is run among the set of masternodes of a shard. As a reminder, PoSV provides fast block-time and confirmation time, and a double validation technique for security enhancement. A block in PoSV is verified by both block creator, which creates the block, and block verifier, which verifies the block before adding it to the blockchain (see [10] for more information about block creator and block verifier in double validation). Other masternodes will then check whether the block verifier signs off on the block. Each masternode verifies a block by sending its signature for the block to the block signer smart contract on the root chain. A block in a shard is confirmed if \u00be masternodes of that shard verifies and signs it off. The confirmation time for intra-shard transactions can be almost instant, just as what is provided by PoSV without sharding. The root chain does not need to do re-computation for verifying blocks created by shard chains. The root chain is secure since it is maintained by all masternodes in the network. A double-spending attack to a shard needs to revert both the shard chain and the root chain, which is unlikely to happen. There is a small probability that a shard is colluded, in which more than its \u00be masternodes are attackers that do an adaptive attack. These attackers can create invalid blocks to create, for example, money out of thin air. In order to deal with this issue, we provide a game theory incentive-driven approach that is similar to Plasma. This approach is presented in Section IV.","title":"Consensus protocol"},{"location":"wp-and-research/sharding-paper/#cross-shard-transaction-schemes","text":"","title":"Cross-shard Transaction Schemes"},{"location":"wp-and-research/sharding-paper/#cross-shard-transaction","text":"A cross-shard transaction involves sending some coins from a sender in one shard to a receiver in another shard. It enables any account in a shard to transact with any other account in other shards. Our Lock-Commit cross-shard transaction requires cross-shard communication and is processed in two steps as follows: Lock at sending shard: The transaction is first processed by the sender shard which decreases the balance of the sender account. At the end of this phase, a lock transaction receipt is generated which is signed by the masternode which produces the block containing the transaction. The receipt is only generated if the transaction has been finalized (A block is considered as \u201cfinalized\u201d meaning that it is irreversible and any attempt to modify it is refused by the network) by the shard (the block is verified and signed by \u00be the number of masternodes of the shard sending their signatures to the Block Signer smart contract on the root chain). It plays the role of a Proof-of-Acceptance which is then sent to the receiver shard for processing. The Proof-of-Acceptance consists of the transaction, the Merkle proof of the transaction in the block at the sender shard, and the finality proof of the block. Commitment at receiving shard: The leader of the receiver shard sends the Proof-of-Acceptance for the transaction at the lock phase to the receiver shard. This latter processes the proof as a transaction which might increase the balance of the receiver. An issue of this commitment phase is that the malicious masternodes in the receiver shard might ignore the commit transaction, thus leaving the whole transaction stuck (because the sender\u2019s balance is decreased while the receiver\u2019s balance is not increased). However, because masternodes take turns to create blocks in a round-robin manner following the PoSV consensus, the proof will eventually be added to a block created by an honest masternode, even though one or several malicious masternodes might ignore the proof transaction. This liveness property is discussed in details in our previous technical paper for PoSV consensus. Figure 2 shows an illustrative example of a smart contract call cross-shard transaction. One of the complications of this transaction scheme is how to refund the left gas after the execution of the smart contract at the receiver shard completes. The left gas should be returned back to the sender (User) of the transaction in the sender shard. With that being said, in order to completely confirm a smart contract call cross-shard transaction, one must wait until all these back-and-forth phases between these shards are confirmed one-by-one. Therefore, the transaction confirmation latency increases, which is not expected from user perspectives, despite the significant increase of transaction volume. To deal with this issue, we propose another cross-shard transaction scheme, namely transfer-first cross-shard transaction scheme (TFC). In this latter, instead of directly doing a smart contract call cross-shard transaction, the sender at one shard can: Send the expected amount to another external account that is managed by herself/himself at the receiver shard through a simple balance transfer. Note that, this latter still requires the Lock-Commit scheme to make simple balance transfer. However, Lock-Commit scheme for simple balance transfer does not involve the complexity of gas refund as for smart contracts. This is because the Lock-Commit scheme for cross-shard simple balance transfer will consume a fixed amount gas (the gas for two balance transfers or 2300*2 gas). Use the controlled external account to interact with all smart contracts in the receiver shard. All transactions started by this external account within the receiver shard will then be confirmed almost instantly as provided by the PoSV consensus. While this transfer-first cross-shard transaction scheme helps maintain the fast transaction confirmation property of PoSV, it raises another issue: a user must manage as many accounts as the number of shards in the system in order to be able to instantly interact with all smart contracts and decentralized applications deployed on all shards. In order to alleviate this complicated account management issue, we intend to integrate an account management layer into our TOMO wallet. This layer is to help users manage their accounts in different shards as a single account in the current TomoChain design. It brings transparency to users as they are interacting with a one-shard system. When a user wants to make a transaction, the wallet does as follows: The account management layer specifies the target shard ID, based on the address of the receiver of the transaction. If the receiver is an external owned account, a simple transfer transaction is created and broadcast to the masternodes network. If the receiver is a smart contract, the account management layer verifies whether the address A0 corresponding to the target shard has the expected amount of token for the transaction. If the balance is not sufficient, a transfer transaction from one of the accounts in other shards to the address A0. Then, the transaction to the smart contract is created and sent to the masternodes network. *Figure 2: Smart contract call cross-shard transaction * One issue with this cross-shard transaction scheme is that the transaction fee would be higher than the non-sharding blockchain system since any cross-shard transaction must pay an additional fee at the sender shard of the transaction for the Lock at sending shard phase. However, the issue can be alleviated if the scheme is implemented along with a near-zero fee transaction system such as TomoChain.","title":"Cross-shard transaction"},{"location":"wp-and-research/sharding-paper/#smart-contract-message-calls-chain","text":"A smart contract, executed within a shard, might call another smart contract managed by another shard in the middle of its execution. Many smart contracts can be involved in a smart contract message calls chain. This is a very challenging problem because the execution of a caller smart contract in a caller shard cannot suspend and wait for the completion and finality of the callee smart contract in a callee shard. If that is the case, both the caller and callee shards would be suspended, thus significantly decreasing the performance of the whole system. The problem might be more harmful if the smart contract message calls chain involves many shards. Let\u2019s illustrate this challenge by the example in Figure 3 with the corresponding solidity source code in Figure 4. Suppose a user sends a transaction to a smart contract SC1 in order to call method m1 of SC1. The execution of the latter in Shard1 executes the method m2 of Shard2, which in turn makes another message call to SC3 in Shard3. For simplification, we assume that the user\u2019s address is managed by Shard1. Otherwise, the user can use the TFC cross-shard transaction scheme presented previously. The TFC cross-shard transaction scheme previously presented in Cross-shard transaction is not applicable to the illustrative example. The reason is that, the method calls between smart contracts are not transactions, but message calls. Message calls are not directly written to the blockchain. Even if we can wisely consider message calls as transactions in this case, the message call m1 to m2 executed in Shard1 must wait for the message call in Shard2 to be confirmed, which in turns needs to wait for the message call in Shard3 to be confirmed. This wait-for-confirmation chain critically decreases the performance of the system since the operations of waiting shards are blocked. Figure 3: Smart contract message calls chain example Figure 4: Solidity example for smart contract message calls chain In order to deal with this problem, we propose to group all smart contracts in a message calls chain and deploy them onto the same shard. With that being said, for the illustrative example, the smart contracts SC1, SC2 and SC3 are all deployed onto the shard onto which SC3 is deployed. This is because SC3 is the first contract among the three to be deployed. By this way, any smart contract message calls chain transaction is always executed within one single shard. Therefore, the aforementioned problem is eliminated. There is one issue that this solution cannot deal with is when a contract A calls two independent contracts B and C, which are respectively previously placed onto different shards. We approach this issue by early detecting this problem through an off-chain smart contract analysis when the user wants to deploy this smart contract A to the network. Then, an exception is raised that does not allow to place A onto the network.","title":"Smart contract message calls chain"},{"location":"wp-and-research/sharding-paper/#incentive-driven-mutual-verification-game-for-safety-and-security","text":"Sharding is usually considered when the system has many participating nodes. This is because higher number of nodes per shard decreases the probability that a shard is colluded meaning that invalid blocks created by a colluded shard can be finalized. In order to make sharding applicable to blockchain systems with smaller number of nodes per shard, i.e. 10 nodes per shard, while still maintaining its security, we propose to use a game theory incentive-driven mechanism which is currently utilized by Plasma. Concretely, a shard is monitored by one or multiple challengers. The latter can be either independent nodes or masternodes in the root chain. They act as full nodes and receive all transactions and blocks processed by the monitored shard and verify all of these blocks. If a processed transaction is detected as invalid, i.e. the transaction is mal-formed or creates money out of thin air, the challenger sends a proof-of-invalidation or fraud proof to the root chain. The incentive for the challenger is that if a transaction is successfully challenged, the challenger gets rewarded as the total deposited tokens of the masternodes that have validated the invalid block. In contrast, all of the masternodes that have verified the invalid block are penalized by losing all of their deposited tokens to the challenger. Note that, non-masternode challengers do not have to deposit any amount of tokens. There are two safety concerns about this incentive-driven approach: Motivation for challengers: Non-masternodes challengers are expected to actively monitor the network to get incentives for invalid blocks. However, in the long term, non-masternodes are only motivated for monitoring the network if there are occasional invalid blocks so that the non-masternodes challengers can compensate for the cost of operating and monitoring the network. If there are no invalid blocks for a long period, the challengers will eventually be discouraged for this monitoring task, thus leaving a safety issue for the attackers in a colluded shard to create invalid blocks. The latter then can be falsely finalized because all non-masternodes challengers turn off their monitoring task since they cannot pay operational costs for monitoring the network. Data availability: Data availability is a strict requirement for the challengers to be able to detect invalidity. Without data, it is impossible to claim fraud proofs. For example, when a new shard block is created, any challenger needs the shard block, the previous state of the shard chain, and the signatures of the attacker masternodes verifying the invalid block, in order to have enough evidence to penalize the attackers. Therefore, all attackers would choose to refuse to broadcast their created blocks to honest nodes. This is because if a shard is colluded, all of the attackers within that shard can finalize an invalid block without sending any block data to honest nodes. We tackle the two aforementioned concerns as follows: Masternode candidates can become challengers to monitor the network and get incentives if some masternodes verify an invalid block. These candidates have incentives to monitor the network to detect the malicious behavior since whether having monitored or not, they still have to pay operational and monitoring costs. Furthermore, monitoring the network is also one of the ways to show its performance for coin-holders to vote it to become a masternode. In addition, if a masternode candidate chooses to not receive shard blocks and later on it is elected as a masternode assigned to a shard, the elected masternode will not be able to verify or create any shard blocks, which in turn lowers its performance. Eventually, the elected masternode will be quickly voted out of the masternode list by the coin-holders. Shard blocks and masternodes\u2019 signatures produced by maternodes need to be propagated to the root chain in order to finalize the blocks. All masternodes then have chance of verifying the validity of the shard blocks to detect the malicious behavior and get incentives. We call this mechanism an incentive-driven mutual verification game. If one shard is colluded and an invalid block is produced by attackers, whether the attackers in the shard want to or not, they have to send the invalid block to the root chain to finalize. Exposing an invalid block to the root chain is extremely risky for the attackers to lose all of their deposits (note that, masternodes are not required to verify blocks submitted to the root chain (that makes computation throughput on the root chain significantly less than the shard chains\u2019). Masternodes can propagate the shard blocks submitted to the root chain to the masternode candidates or any challenger that will verify the validity of the shard blocks, which solves the data availability problem in this case). It is worth noting that, the attackers have no incentives to not propagate invalid blocks to the root chain. This is because, by doing so, the attackers have spent computation resources and operational costs for only locally postponing the transactions within one shard. Furthermore, the attackers will be voted out of the masternode list because of their low performance and these postponed transactions will then be processed by the same shard but with a different set of masternodes once network reshuffling has been executed. Fraud proofs : If a block with an invalid state transition is signed off and propagated throughout the network, any other participant who receives the block can submit a merkleized fraud proof to the Voting smart contract (note that, the Voting smart contract contains all deposits and voted tokens, therefore, the penalty for masternodes creating invalid blocks will be executed by a function within the contract. The penalty function is executed once a fraud proof for an invalid block is submitted by any nodes) on the root chain and the shard chain rejects the invalid block and is rolled back. Fraud proofs ensure that all state transitions are validated. Example fraud proofs are proof of transaction spendability (funds are available in the current shard), proof-of-state transition (including checking the signature for the ability a transaction can be validated and executed, proof of inclusion/exclusion across blocks, and deposit/withdrawal proofs). In order for this construction to have minimal proofs, though, all blocks must provide a commitment to a merkleized trie of the current state, a trie of outputs spent, a merkle tree of transactions, and a reference to the prior state being modified. The fraud proofs and the incentive-driven mutual verification game combined with double validation ensure that a coalition of participants is not able to create invalid blocks that can be finalized without getting penalized. This ensures that the challengers always have access to shard blocks, thus are able to prove (and therefore discourage) invalid state transitions in shard blocks. Compared to TrueBit and Plasma: TrueBit [11] and Plasma [5] both use an incentive-driven verification game approach to provide scalable and secure solutions. Similar to our argument on the incentives for challengers to observe the network, the authors of TrueBit argue that, if there is no chance of finding a bug in the blocks, challengers will likely refuse to continue the monitoring task. In order to motivate the challengers to actively observe the network, TrueBit proposes to provide \u201cforced errors\u201d. These errors are produced at random and unpredictable time. The main objective of blocks with forced errors is to incentivize the challengers and keep them motivated to secure the network. These blocks are special and the creators and validators of these blocks are not penalized. Plasma provides an \u201cexit\u201d mechanism that aims at resolving the data availability problem. Specifically, in Plasma, when a participant cannot access block data of a Plasma chain, the participant can move her asset/token from the Plasma chain to the root chain (or the parent Plasma chain) by executing the \u201cexit\u201d mechanism. The participant then needs to wait for an amount of time, i.e. 1 week, in order for other participants to submit a fraud proof if the exit execution is falsified. In order to maintain fast confirmation time as in the current TomoChain PoSV design and to have the shards\u2019 liveness, our approach is driven by an incentive and mutual verification game. The latter aims at providing both fast confirmation and detection of Byzantiness of a block. By utilizing the very strong incentivizing-penalizing incentive-driven mutual verification game, challengers are strongly encouraged to work hard in order to keep the system safe and secure and shard masternodes are discouraged to act maliciously.","title":"Incentive-driven Mutual Verification Game for Safety and Security"},{"location":"wp-and-research/sharding-paper/#reshuffling-and-data-availability","text":"To enhance further the security of shards, it is very important that shards should be dynamic for resilience against attacks and failures of nodes in a shard. For example, one shard might be stuck in a situation where blocks are valid but cannot be finalized because attacking masternodes do not validate these blocks. A technique for dealing with this problem is to reshuffle the masternodes assigned to the shards. This means the set of masternodes for each shard is changed dynamically every epoch. At the end of each epoch, the randomization sampling is repeated for a different set of masternodes elected to participate into shards. Reshuffling enhances the security and resilience of the system. However, it introduces a new challenge: the data availability problem. In the latter, every masternode joining to a new shard must synchronize the blockchain portion of this new shard in order to be able to verify transactions belonging to it. If the portion is too large and the synchronization time is too short, the entire shard cannot verify any transaction, thus renders the shard useless for the whole synchronization time. This problem can be tackled by the following strategies:: Shard masternodes storing all states of other shards: It requires that all masternodes, even non-shard member nodes, must receive and store all of the portions of state in all shards. This solution allows for any masternodes to smoothly switch from one shard to or join any other shard without needing a data synchronization time. Gradual reshuffling: Instead of resampling the whole set of masternodes assigned to each shard at the end of each epoch, the reshuffling might only pull a subset of masternodes out of a shard while leaving the remainder intact, i.e. 1/10 of the masternodes are kicked out from a shard while the other masternodes still stay in the shard and the resampling takes c/10 (c is the shard size) masternodes randomly from the set of masternode candidates. Since the latter have been synchronizing all blocks (see Section IV for more information), the system can smoothly continue the operations without interrupting time for data synchronization. Randomization sampling in advance: Still using the strategy of giving masternodes joining new shards some amount of time to download the blockchain data of a shard, this approach lets the network execute the randomization sampling in the middle of an epoch. Therefore, assigned masternodes will know ahead of time to which shard they will contribute in the next epoch. In this fashion, these in-advance assigned masternodes will have enough time to download the blockchain data of the assigned shard to prepare for the next epoch. Currently, we have been leaning towards the first and second strategy because these solutions are more implementable and analyzable for security. These strategies will be rigorously analyzed before making a final decision since both have its own advantages and limitations. While the first strategy has advantage of simplicity and masternodes and candidates can switch from one shard to any other shard smoothly, the storage and network bandwidth of masternodes might be more needed. On the other hand, the second strategy can save more storage and network bandwidth, it raises a question: which masternodes should be kicked out of a shard if the performance of all masternodes in that shard is efficiently equal to each other\u2019s.","title":"Reshuffling and Data Availability"},{"location":"wp-and-research/sharding-paper/#conclusion","text":"The paper has presented a new solution to sharding architecture for public blockchains. It aims at being transparent to users and significantly improving the transaction processing performance, while still maintaining basic security requirements of the system. The paper uniquely identified and solved cross-shard transactions for smart contract call chaining and data availability problem in shard reshuffling. The proposed solution uses the Proof-of-Stake Voting (PoSV) efficient consensus protocol proposed by Tomochain for intra-shard consensus. Specifically, we relied on our decentralized randomization algorithm for randomized shard assignment of masternodes and proposed two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy. The latter places dependent smart contracts onto the same shard, which eliminates smart contract message calls chain problem involving multiple shards. In order to ensure safety and security of shards, we proposed an incentive-driven mutual verification game. In this latter, masternodes that create and/or verify an invalid block are penalized by losing all of their deposits to any participant that detects the invalidity by providing fraud proofs. Moreover, we also discuss the data availability problem in state sharding when shard reshuffling takes place and propose several possible solutions. We are currently analyzing rigorously the safety and security properties of the proposed architecture to show its soundness. In future, once the analysis will have been done, we will implement the proposed architecture on top of the TomoChain blockchain.","title":"Conclusion"},{"location":"wp-and-research/sharding-paper/#references","text":"[1] S. Nakamoto, \u201cBitcoin: A Peer-to-Peer Electronic Cash System,\u201d p. 9. [2] G. Wood, \u201cEthereum: a secure decentralised generalised transaction ledger,\u201d Ethereum Project Yellow Paper, pp. 1\u201332, 2014. [3] J. Poon and T. Dryja, \u201cThe Bitcoin Lightning Network:,\u201d p. 59. [4] P. Mccorry, S. Bakshi, I. Bentov, S. Meiklejohn, and A. Miller, \u201cPisa: Arbitration Outsourcing for State Channels.\u201d [5] J. Poon and V. Buterin, \u201cPlasma: Scalable Autonomous Smart Contracts,\u201d 2017. [6] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, \u201cA Secure Sharding Protocol For Open Blockchains,\u201d in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS\u201916, 2016, pp. 17\u201330. [7] P. Barrett, \u201cZilliqa Technical Whitepaper,\u201d Zilliqa, pp. 1\u20138, 2017. [8] M. Castro, M. Castro, B. Liskov, and B. Liskov, \u201cPractical Byzantine fault tolerance,\u201d OSDI {\u2019}99: Proceedings of the third symposium on Operating systems design and implementation, no. February, pp. 173\u2013186, 1999. [9] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and E. Syta, \u201cOmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding,\u201d IEEE Symposium on Security & Privacy, 2018. [10] Tomochain R&D Team, \u201cTomochain: Masternodes Design Technical White Paper Version 1.0,\u201d Technical White Paper, 2018. [11] J. Teutsch and C. Reitwie\u00dfner, \u201cA scalable veri\ufb01cation solution for blockchains,\u201d p. 50, 2017. [12] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., & Ford, B. (2018, May). Omniledger: A secure, scale-out, decentralized ledger via sharding. In 2018 IEEE Symposium on Security and Privacy (SP) (pp. 583-598). IEEE.","title":"References"},{"location":"wp-and-research/technical-whitepaper/","text":"Introduction \u00b6 version 1.0 ( pdf version ) The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201890s, with pioneers and dreamers coming together to build a new future. TomoChain can be a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture allowing for a fast, secure, frictionless payment and trusted store of value. Distributed systems have been researched in a \u201c permissioned setting \u201d where the number of participants in the system and their identities are common knowledge. In 2008, Satoshi Nakamoto - \u201cproposed his celebrated \u201cblockchain protocol\u201d which attempts to achieve consensus in a permissionless setting: anyone can join (or leave) the protocol execution (without getting permission from a centralized or distributed authority), and the protocol instructions do not depend on the identities of the players\u201d (see here ). Later on, Ethereum with its Ethereum Virtual Machine (EVM) proposed several significant enhancements compared to Bitcoin, including Smart Contracts. Both Bitcoin and Ethereum have some issues, especially with transaction processing performance. In order to construct an efficient and secured consensus protocol for TomoChain , we tackle the following main bottlenecks of classic blockchains: Efficiency: Existing blockchains as employed by major crypto-currencies(e.g., Bitcoin or Ethereum) do not scale well to handle a large transaction volume, e.g. Bitcoin and Ethereum can handle around 10 transactions/second. This small throughput severely hinders a wide-spread adoption of such crypto-currencies. Confirmation times: The 10 minutes Bitcoin block-time is significantly larger than network latency. Furthermore, a Bitcoin block requires 5 subsequent blocks following it so that it can be confirmed; thus it takes on average one hour for a transaction to be confirmed (with low confidence). While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes Cardano . These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. With the motivation as mentioned above, our persistent and ultimate goal of research is to propose the consensus protocol focusing on the following key strategies: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase To start dealing with these problems, in this paper, we present an overview architectural design of TomoChain \u2019s master nodes. In particular, we propose (PoSV) consensus, a Proof-of-Stake (PoS)-based blockchain protocol with a fair voting mechanism, rigorous security guarantees and fast finality. We also present a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of forks, fast confirmation times, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually. Structure of the remainder of the paper \u00b6 Section TomoChain Overview : explains the intuition ideas and overview architectural design of masternodes, framework and background protocols that help mass readers (e.g., investors, traders, others) who may not have technical knowledge understand our mechanism easily. Section Stakeholders & Voting presents TomoChain stakeholder policy, masternode committee voting systems, and reward mechanism. Section TomoChain consensus protocol explains the motivation and double validation process as well as finality checkpoint of the protocol. In Section Protocol formalizations , we present the formalization of our model in a mathematical way to show the soundness of our model and protocol. Section Security Analysis discusses the security analysis and resistant strain of potential attacks. We discuss and compare TomoChain with several existing blockchains in Section related work . Finally, we conclude the paper in Section Conclusion . TomoChain Masternode Design \u00b6 The TomoChain architecture \u00b6 The TomoChain blockchain is produced and maintained by a set of masternodes in a consistent manner through the TomoChain consensus protocol as shown in Fig. architecture . These masternodes are full nodes that hold TOMO. For a token holder to become a masternode, two requirements must be satisfied: The token holder must hold at least a minimum required amount of tokens (see next section for more details). The token holder must be one of the most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism . In addition to the voting system which is an improvement over the current Bitcoin and Ethereum blockchain, TomoChain also provides a new technique, namely Double Validation complemented with a Randomization mechanism. This new technique significantly decreases the probability of having invalid blocks in the blockchain. These enhancements and the components of TomoChain are step-by-step detailed in the followings. Stakeholders & Voting \u00b6 Token holders, Masternodes \u00b6 Token holder is as simple as its name: users who join the network, who own and transfer TOMO. Masternodes are full-nodes which maintain a copy of the blockchain, produce blocks and keep the chain consistent. It is worth noting that, TomoChain does not have miners as in the current Proof-of-Work-based blockchain systems such as Bitcoin and Ethereum. Only masternodes can produce and validate blocks. Masternodes are selected via a voting system. The first requirement of being masternodes is to deposit 50 000 TOMO to the Voting Smart Contract. Then, these depositors are listed as masternode candidates in the Voting DApp, which allows token holders to vote for them by sending TOMO to the smart contract. Masternodes which work hard in the system to create and verify blocks will be incentivized with TOMO. Furthermore, token holders who vote for these incentivized masternodes will also receive TOMO in proportion to the amount of TOMO they have invested via ballots. TomoChain engineers take responsibility to design that fair, explicit, automated and accountable reward mechanism. The list of masternode candidates is dynamically sorted based on voted tokens. The performance of the masternodes will be tracked and reported back to the token holders in terms of three main metrics: CPU/Memory charts which ensure the workload of the masternodes, the number of signed blocks which indicates their work performance and the last signed block which figures out their last activity. Token holders, at any time, can unvote masternodes, who have low performance, and give their votes to the other masternodes who have beter performance. Token holders have incentives to do that because their voted tokens are seen as investment to their supported masternodes, thus they should choose a voting strategy in order to maximize their profit from the investment. This simple trick keeps the system healthy since masternodes always have to race for their position so that all weak masternodes will eventually be eliminated. Therefore, only the strongest masternodes are voted and can flourish. Voting & Masternode Committee \u00b6 There are maximum one hundred fifty masternodes elected in the masternode committee. The required amount of deposit for masternode role is set at 50 000 TOMO. This amount is locked in a voting smart contract . Once a masternode is demoted (by not remaining in the top one hundred fifty voted masternodes) or intentionally quits the masternode candidates list/masternode committee, the deposit will have been locked for a month. Token holders can vote at any time, by any number of votes (which is actually counted by the amount of TOMO they bet on some masternode candidates). They can use masternode\u2019s performance statistics in the governance Voting DApp as reference information to give votes. The set of masternodes is dynamically sorted by the amount of TOMO and counted up to one hundred fifty, upon reception of votes. Reward Mechanism \u00b6 For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. The reward mechanism is designed following the policy as follows: the higher number of signatures one masternode has made, the more reward he earns. For instance, within an epoch, masternode A who has sealed twice the blocks than masternode B earns double amount of TOMO than masternode B does. Furthermore, there is also a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. Specifically, each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. - Infrastructure Reward : The first portion of 40% called Infrastructure Reward goes to the Masternode. Staking Reward : The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. Foundation Reward : The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. It is worth noting that coin-holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion. TomoChain Consensus Protocol \u00b6 Double Validation Process \u00b6 In TomoChain, masternodes share equal responsibility to run the system and keep it stable. Full nodes should run on powerful hardware configuration and high-speed network connectivity in order to ensure the required block time (target to two seconds). Only masternodes can produce and seal blocks. In order for that, the TomoChain consensus relies on the concept of Double Validation that improves some existing consensus mechanisms, namely Single Validation . In the followings, we first describe the Double Validation , then analyze the differences and improvements of Double Validation compared to Single Validation . Double Validation (DV) \u00b6 Similar to some existing PoS-based blockchains such as Cardano , each block is created by a block producer, namely masternode, that takes its block creation permission turn following a pre-determined and circular sequence of masternodes for each epoch. However, differently from these existing blockchains, DV in TomoChain requires the signatures of two masternodes on a block to be able to push the block to the blockchain. One of the masternodes is the block creator while the other one, namely block verifier is randomly selected among the set of voted masternodes that validates the block and signs it. In the followings, for more convenience, block creator and block verifier are used interchangeably for the masternode 1 (block producer) and the randomly selected masternode 2 for a block, respectively. The process of randomly selecting the block verifiers is detailed in the next paragraphs. Note that, there is no mining in the block creation as in Proof-of-Work-based blockchains (e.g. Ethereum and Bitcoin). It means that a created block is valid if and only if it is sealed by enough two signatures from a block creator and a corresponding block verifier to confirm the correctness of it. We believe this DV technique enhances the stability of the blockchain by diminishing the probability of producing \u201cgarbage\u201d blocks while still maintaining the system security and consistency. Randomization of block verifiers in DV is the key factor of reducing risks coming from paired masternodes trying to commit malicious blocks. Furthermore, comparing to some current public blockchains in the market, by utilizing the DV technique, TomoChain brings significant improvements in the block time by only requiring two signatures per block. For the purpose of showing our enhancement over existing PoS-based blockchains, we analyze the differences between DV and the Single Validation mechanism in some existing blockchains as follows. Improvements of Double Validation over Single Validation \u00b6 Let\u2019s show the improvements of DV compared to Single Validation through analyzing some attacking scenarios as shown in Fig. Single Validation example and Fig. Double Validation example . Single Validation In Single Validation, in an epoch, each masternode, e.g. M1, sequentially takes its turn to create a block, e.g. block100. The next masternode, e.g. M2, in the sequence then validates the created block100. If block100 is invalid (that potentially means that M1 is an attacker) and contains a transaction that invalidly benefits M1, if M2 is honest (see Fig. SV a ), it rejects block100 and creates another block100 next to block99. But, if M2 is an attacker (see Fig. SV b ) that corporates with M1, M2 ignores the invalidation of block100, signs it and creates next block, namely block101 that is valid. Then, the next masternode M3 verifies that block101 is valid, M3 signs block101 and creates a block102. By this way, Single Validation potentially leaves the blockchain with \u201cgarbage\u201d or invalid blocks which require a \u201crebase\u201d to restore the validity of the blockchain. Single Validation (SV): (a) SV with block creation masternode as an attacker and (b) SV with two consecutive block creation masternodes as attackers Double Validation We claim that our DV technique significantly reduces the probability of having garbage blocks in the blockchain. Assuming that M1 and M2 are the block creator and block verifier, respectively, for block100 in our DV. If block100 is invalid and M2 is honest (see Fig. DV a ), M2 will not seal this block. Therefore, the next block creator M3 for creating block101 will see that block100 does not have enough 2 signatures, thus reject block100 and create another block100 next to block99. On the other hand, if M2 is also an attacker pairing/handshaking with M1 (see Fig. DV b ), M2 signs block100 despite its invalidity (remember that the block verifier M2 is randomly selected, there has little chance of successfully pairing M1 and M2). Next, even though M3 will verify that block100 has two valid signatures, M3 still rejects it because block100 is invalidated by M3 that will create another valid block100. In order to break the stability and consistency of the blockchain in this case, M3 should be an attacker together with M1 and M2, which, however, has a very low probability. In other words, DV strengthens the consistency of the blockchain and makes it hard to break. Double Validation (DV): (a) DV with block creator as an attacker and (b) DV with both block creator and block verifier as attackers Randomization for Block Verifiers for Double Validation \u00b6 The First Masternode/Block Creator \u00b6 The first masternode/block creator in a given epoch e can be selected by a round-turn game and can be formal defined as an array: \\begin{bmatrix} \\nu_1 \\end{bmatrix} = \\begin{bmatrix} V_{1.1}^e \\\\ V_{1.2}^e\\\\ \\cdot\\\\ \\cdot\\\\ \\cdot\\\\ V_{1.n-1}^e\\\\ V_{1.n}^e\\\\ \\end{bmatrix} Random Matrix and Smart Contract \u00b6 Let m be the number of masternodes, n be the number of slots in an epoch. In order to randomly generate the block verifiers for the next epoch e+1 , the process is performed by the following steps. Step 1: Random Numbers Generation and Commitment Phase: First, at the beginning of epoch e , each masternode V_i will securely create an array of n+1 special random numbers Recommend_i= [ r_{i.1}, r_{i.2}, ..., r_{i.n}, \\theta_i] , where r_{i.k}\\in [1, ..., m] indicating the recommendation of ordered list of block verifiers for the next epoch of V_i , and \\theta_i \\in \\{-1, 0, 1\\} is used for increasing the unpredictability of the random numbers. Second, each masternode V_i has to encrypt the array Recommend_i using a secret key SK_i , say Secret_i = Encrypt (Recommend_i, SK_i) . Next, each masternode forms a \" lock \u201d message that contains encrypted secret array Secret_i ; signs off this message with its blockchain\u2019s private key through the Elliptic Curve Digital Signature Algorithm (ECDSA) scheme currently used in Ethereum and Bitcoin along with the corresponding epoch index and its public key generated from its private key. By doing this, every masternode can check who created this lock message through ECDSA verification scheme and which epoch it relates to. Then, each node V_i sends their lock message with its signature and public key to a Smart contract stored in the blockchain, so that eventually each masternode collects and knows the lock s from all other masternodes. Step 2: Discovery and Recovery Phase: The recovery phase is for every node to reveal its previous lock message so that other nodes can get to know the secret array it has sent before. A masternode only starts revealing its lock message if all masternodes have sent their lock messages to the smart contract or a certain timeout event occurs. Each masternode then opens its lock message by sending an \u201d unlock \u201d message to the smart contract for other masternodes to open the corresponding lock. Imagine a commitment-like scheme in this case where a lock message is a commitment message locking its contained recommendation array Recommend_i (so that no one can open or guess the contained array), and the unlock message gives the key for other masternodes to decrypt the box and retrieve the values of Recommend_i . Eventually, a masternode has both locks and unlocks of others. If some elector is an adversary which might publish its lock but not intend to send the corresponding unlock, other masternodes can ignore the adversary\u2019s lock and set all its random values be 1 as default. The idea is simple: the network can keep working successfully even if some masternodes are adversaries. Step 3: Assembled Matrix and Computation Phase: At the point of the slot n^{th} of the epoch e , the secret arrays Secret_I in the smart contract will be decrypted by each masternode and return the plain version of Recommend_i . Each tuple of the first n numbers of each V_i will be assembled as the i^{th} column of an n \\times m matrix. All the last number \\theta_i forms a m\\times 1 matrix. Then each nodes will compute the block verifiers ordered list by some mathematical operations as explained below. The resulting output is a matrix n \\times 1 indicating the order of block verifiers for the next epoch e+1 . The Second Masternode/Block Verifier \u00b6 Then, each node soon compute the common array \\nu_2 for the order of the block verifiers by the following steps as in the upper equation as belows. Then, \\nu_2 is obtained by modulo operation of element values of \\nu'_2 as in the lower equation in the followings: \\label{eq:matrix} \\begin{bmatrix} \\nu'_2 \\end{bmatrix} = \\begin{bmatrix} v_{2.1}^{e+1} \\\\ v_{2.2}^{e+1} \\\\ \\vdots \\\\ v_{2.n}^{e+1} \\end{bmatrix} = \\begin{bmatrix} r_{1.1} & r_{2.1} & \\cdots & r_{m.1} \\\\ r_{1.2} & r_{2.2} & \\ddots & \\vdots \\\\ r_{1.3} & \\ddots & \\ddots & r_{m.3} \\\\ \\vdots & & r_{m-1.n-1} & r_{m.n-1} \\\\ r_{1.n} & \\cdots & r_{m-1.n} & r_{m.n} \\end{bmatrix} \\begin{bmatrix} \\theta_1 \\\\ \\theta_2 \\\\ \\theta_3 \\\\ \\vdots \\\\ \\theta_m \\end{bmatrix} \\label{eq:eq2} \\begin{bmatrix} \\nu_2 \\end{bmatrix} = \\begin{bmatrix} \\nu'_2 & mod & m \\end{bmatrix} = \\begin{bmatrix} \\left| v_{2.1}^{e+1}\\right| & mod & m \\\\ \\left| v_{2.2}^{e+1} \\right| & mod & m\\\\ \\vdots \\\\ \\left| v_{2.n}^{e+1} \\right| & mod & m \\end{bmatrix} Finality Analysis \u00b6 \"There is a standard definition of \u201ctotal economic finality\u201d: it takes place when \\frac{3}{4} of all masternodes make maximum-odds bets that a given block or state will be finalized. This condition offers very strong incentives for masternodes to never try colluding revert the block: once masternodes make such maximum-odds bets, in any blockchain where that block or state is not present, the masternodes lose their entire deposit\" (see here . TomoChain keeps that standardization in the design so that one block is considered as irreversible if it collects at least \\frac{3}{4} signatures of all masternodes committee. The time-line of blockchain creation process, checking finality and mark the block as immutable is described as in Figure: ChainMaking below. Consensus Protocol: Formalization \u00b6 Basic Concepts & Protocol Description \u00b6 In order to have a solid foundation for us to prove that our blockchain can achieve what are claimed, we first present our preliminary formalizations of the concepts that will be used in our yellow paper later. To start, as we are dealing with proof of stake consensus algorithm, we follow the way of formalization in the recent works in the literature like Cardano and here and here here . In particular, we recall the following concepts and definitions that were presented in Cardano and adapt them to the context of TomoChain. Time, Slots, Epoch \u00b6 As previously described, ideally, each epoch is divided into 900 block time, that is called block slot. Only one block can be created in a slot. We assume that there is a roughly synchronized clock that allows for masternodes to learn the current slot. This simplification will effectively permit masternodes to execute the signing and validation process of the PoSV consensus, where each masternode must collectively create a block to the current slot. For more simplification, each slot sl_r is accessed by an integer r \\in \\{1, 2, ...900\\} , and suppose that the real time window that corresponds to each slot has the following properties, which are similar to what are specified in Cardano . Every masternode can determine the index of the current slot based on the current time and \u201dany discrepancies between parties\u2019 local time are insignificant in comparison with the length of time represented by a slot\u201d Cardano The amount of a slot time is sufficient to guarantee that any message transmitted by an honest party at the beginning of the time window will be received by any other honest party by the end of that time window. While this assumption similar to Cardano , TomoChain requires it in order for a block creator to propagate its created block to the corresponding block verifier to ensure that the block is signed by both the masternodes before the next block creator builds another block on top of it. As mentioned in Section TomochainOverview , in our setting, we assume that the fixed collection of m (150) masternodes V_1, V_2, ...., V_m interact throughout the protocol. For each V_i a public/private key pair ( pk_i , sk_i ) for a prescribed signature scheme, ideally ECDSA, is generated. Furthermore, we assume that the public keys pk_1 ,.., pk_m of the masternodes are distributed and known by all of them (that means a masternode knows all public keys of other nodes). Some notable definitions of the blockchain concepts are defined following the notation in here . State A state (defined as in here ) is an encoded string st \\in \\{0,1\\}^\\lambda . Block A block (defined as in here ) B generated at a slot sl_i \\in \\{sl_1,...,sl_R\\} contains the current state st \\in \\{0, 1\\}^{\\lambda} , data d \\in \\{0, 1\\}^{*} , the slot number sl_i and a signature \\Sigma = Sign_{ski} (st, d, sl_i) computed under sk_i corresponding to the masternode V_i generating the block. Blockchain A blockchain (defined as in here ) C is a sequence of blocks B_1,..., B_n associated with a strictly increasing sequence of slots for which the state sti of B_i is equal to H(B_{i\u22121}) , where H is a collision-resistant cryptography hash function. A blockchain has a number of properties, including the length of a chain len(C) = n , which is its number of blocks, and the block B_n is the head of the chain, denoted head(C) . As mentioned earlier, in our TomoChain model, we set each time slot sl_i as 2 seconds; an epoch is a set R of 900 slots \\{ sl_1, sl_2, ..., sl_{900}\\} (an epoch time duration equals to 1800 seconds). In summary, the consensus protocol of TomoChain can be formalized in Algorithm ValidatorGeneration. The Algorithm ValidatorGeneration is simulated and explained as a process shown in Fig. EpochProcess . Security Analysis \u00b6 Nothing-at-stake \u00b6 Nothing-at-stake is a well-known problem in PoS-based blockchain, just like 51% attack in PoW algorithm. PoW-based miners require CapEx (capital expenditures) for buying mining equipment such as ASICs and OpEx (operation expenditures) such as electricity to solve mathematical puzzles securing the network (see here ). That means, there is always an intrinsic cost for miners in mining regardless of its success. In case of a fork, miners therefore always allocate their resource (equipment) to the chain that they believe is correct in order to get incentives for compensating the intrinsic costs in mining. In the contrary, in PoS-based systems without mining, during an ideal execution, for creating a fork only costs, masternodes actually do not incur intrinsic costs, other than roughly some block validation and signing cost. As a result, there\u2019s an inherent problem of the masternode having no downside to staking both forks. Therefore, there are actually two issues in the original design of PoS. On one hand, for any masternode, the optimal strategy is to validate every chain/fork, so that the masternode gets their rewards no matter which fork wins. On the other hand, for attackers/malicious masternodes, they can easily create a fork for double spending. Let\u2019s look back how TomoChain handles these two problems. As a reminder, TomoChain maintains a certain order of masternodes in creating and sealing blocks, in each epoch. For the first issue, random/arbitrary forks are hardly happened because the order of block creation masternodes is pre-determined for each epoch. Furthermore, the Double Validation mechanism eliminates the second issue because even one malicious masternode creates two blocks at his turn, only one block then can be validated by the second randomly selected masternode. Long-range attack \u00b6 In TomoChain , block is valid only if it collects double validation and finalized once \\frac{3}{4} of masternodes verify. Therefore, as long as the number of attackers or malicious nodes and/or fail-stop nodes is less equal than \\frac{1}{4} the number of masternodes, the number of masternodes signing a block is at least \\frac{3}{4} the total number of masternodes, which makes the block finalized. Thus, there is no chance for one malicious masternode to create longer valid chain because other masternodes will refuse it. Censorship Attack \u00b6 If there are more than \\frac{3}{4} malicious masternodes in TomoChain , censorship attack might happen. For example, these masternodes refuse valid blocks or simply become inactive. In this case, chain is stuck. In fact, masternodes are paid for their effort of correctly working so that the chain is actively updated in a consistent manner. More importantly, becoming masternode means a certain amount of tokens is locked, 50 000 TOMO in particular. As a result, in order to control more than \\frac{3}{4} masternodes, attackers must hold a considerable amount of TOMO and gain huge support from token holders. And because of this, the attackers do not have incentives to do any malicious action to harm the chain. However, in worst case, TomoChain has to do a soft fork in order to reduce number of masternodes to keep the chain running and figure out slasher mechanisms for those malicious masternodes. Relay Attack \u00b6 TomoChain supports EIP155 Transactions in TomoChain are included CHAIN\\_ID specified for different public chains. Table table:chainid shows recognized CHAIN\\_ID s. CHAIN_ID Chain(s) 1 Ethereum mainnet 2 Morden (disused), Expanse mainnet 3 Ropsten 4 Rinkeby 30 Rootstock mainnet 31 Rockstock testnet 42 Kovan 61 Ethereum Classic mainnet 62 Ethereum Classic testnet 1337 Geth private chains (default) 77 Sokol, the public POA Network testnet 99 Core, the public POA Network main network 88 Mainnet 89 Testnet Safety and liveness \u00b6 Safety implies having a single agreed upon chain where there are not two or more competing chains with valid transactions in either (see here . A consensus protocol can be safe when blocks have settlement finality, or else probabilistic finality. This last sentence reveals that can provide safety because it has a settlement finality. A consensus protocol is considered live if it can eventually propagate and make valid transactions onto the blockchain (see here . An occurrence of a liveness fault is when transaction omission, information withholding, or message reordering, among a number of violations are observed. This type of fault is unlikely to happen in TomoChain because the block creation masternodes list is ordered in a pre-determined way for each epoch, thus if even an attacking masternode omits some transactions, the latter will be processed and validated by the next honest masternode in the next block. DDOS Attack \u00b6 Masternodes are encouraged to run in well-known public cloud providers such as AWS, Google Cloud or Microsoft Azure which provides multiple DDOS prevention mechanisms. Even in case that some nodes are attacked or fail-stop, the network still works correctly as long as the number of failing and/or attacked nodes is less than 1/4 of the number of masternodes. Spam Attack \u00b6 TomoChain keeps the same transaction fee mechanism as Ethereum which is indicated via gasPrice. However, TomoChain supports minimum transaction fee (at 1 wei), which somehow enables spamming that attacker tries to broadcast a huge amount of low fee transactions to the system. However, TomoChain masternodes always sort transactions and pick up only high fee transactions into the proposing block. Thus, spammers have little chance to harm the system. Related work \u00b6 Consensus plays an important role to guarantee the success of distributed and decentralized systems. Bitcoin\u2019s core consensus protocol, often referred to as Nakamoto consensus Bitcoin , realizes a \u201creplicated state machine\u201d abstraction, where nodes in a permissionless network reach agreement about a set of transactions committed as well as their ordering (see here . However, known permissionless consensus protocols such as Bitcoin\u2019s Nakamoto consensus come at a cost. Bitcoin and Ethereum rely on PoW to roughly enforce the idea of \u201cone vote per hashpower\u201d and to defend against Sybil attacks. Unfortunately, PoW-based Bitcoin and Ethereum are known to have terrible performance (Bitcoin\u2019s transaction processing performance is at peak of around 7 transactions per second as previously mentioned). Moreover, PoW is much criticized because it costs a lot of electricity energy. In order to design an efficient and cost-effective consensus protocol in the permissionless model, PoS has been discussed extensively in the Bitcoin and Ethereum forum . A PoS blockchain can substitute the costly PoW in Nakamoto\u2019s blockchain while still providing similar guarantees in terms of transaction processing in the presence of a dishonest minority of users, where this \u201cminority\u201d is to be understood here in the context of stake rather than computational power Cardano . The Ethereum design Casper , published by Buterin & Griffith, provides as its initial version a PoW/PoS hybrid consensus protocol, which might eventually switch to a pure PoS system. As in TomoChain , Ethereum Casper requires that validators (term similar to block creators) have to deposit an amount. In fact, some concepts used in TomoChain such as checkpoint blocks are borrowed from Casper. Our (PoSV) consensus protocol proposed in this paper can be seen as a hybrid model. In particular, first, we apply with voting and Double Validation to create, verify and vote for blocks smoothly and efficiently. Whenever potentials of fork branches are detected, we employ the idea in PoW to select the longest branch with the most votes and discard the other branches. This hybrid approach not only increases the performance and security of blockchain, but also reduces the fork situation in an efficient and practical manner. Recently, there are several consensus protocol research works that are closely related to TomoChain such as EOS and Ouroboros of Cardano . The mechanism of voting for masternodes for reaching consensus is utilized by Bitshares and EOS , whose consensus protocol is termed Delegated Proof-of-Stake (DPoS). DPoS is similar to the Proof-of-Stake Voting consensus of TomoChain in the sense that masternodes (block creators or witnesses in DPoS) are elected through a voting system. However, TomoChain requires that masternodes need to deposit a required minimum amount of TOMO to become a masternode candidate, which puts more pressure on the masternodes to work honestly. Furthermore, the Double Validation mechanism of TomoChain lowers the probability of handshaking attacks and having invalid blocks, as previously analyzed. EOS also has a maximum of 21 block producers for each epoch, which is less decentralized than TomoChain with a maximum of 150 masternodes elected (and this number of masternodes can be changed following the decentralized governance through voting). The research-backed Cardano blockchain solution, namely Ouroboros, with the ADA coin, which is purely based on Proof-of-Stake, promisingly claims to provide rigorous security guarantees. Similarly to TomoChain , Ouroboros has a set of block producers for each epoch for creating blocks and each block producer candidate needs to deposit a minimum amount of stake (an amount of ADA). However, note that, Ouroboros only provides Single Validation , while Double Validation of TomoChain provides several advantages over Single Validation, as previously analyzed. In Ouroboros, the order of block producers, selected among stakers, is based on a biased randomization while the TomoChain \u2019s randomization for block verifiers is potentially uniform and based on smart contracts. Furthermore, the use of voting as in TomoChain and DPoS enables a more incentive equality between stakers: In Ouroboros, stakers with very little stake have a very small probability of becoming block creators, while, in TomoChain , these stakers can choose an optimal strategy to vote for potential masternodes to get incentives. Conclusion and perspectives \u00b6 In this paper, we proposed PoSV, a PoS Voting-based blockchain protocol with heuristic and fair voting mechanism, rigorous security guarantees, and fast finality. We also presented a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of having forks, fast confirmation time, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually. Perspectives \u00b6 Future work The TomoChain team is currently working on the implementation of the Proof-of-Stake Voting, which will be released on schedule as stated in our roadmap. Furthermore, in parallel with our novel consensus protocol, we will investigate the Sharding mechanism in order to provide even better transaction processing performance. We believe that, the Sharding technique with the stable number of masternodes will provide better stability and efficiency to the blockchain. At the same time, we commit to keep EVM-compatible smart contracts within our masternode sharding framework. Economic sustainability is also an important concept for a blockchain based decentralized network. That means to maintain the network in a sustainable condition, an equilibrium needs to be achieved, in which the cost of running the network infrastructure could be offset by the revenues generated. In this context, the cost of network infrastructure consists of two parts: the physical cost of having hardware such as servers, memories that passes the network technical requirements; and the capital cost of having TOMO locked into smart-contracts. The revenues for Masternodes would primarily come from Reward Engine emission, and later on from service revenues such as token exchange fees provided by applications running on top of TomoChain. We will publish a TomoChain economic analysis and proposal, separate from this technical paper in a later date. References \u00b6 Satoshi Nakamoto. Bitcoin: A peer-to-peer electronics cash system. 2008. pdf Ethereum Foundation. Ethereum\u2019s White Paper. , 2014. Online available 25/05/2018. link . D. Larimer. Delegated Proof-of-Stake (DPOS). BitShare White Paper 2014. link . S. King and S. Nadal. PPCoin: Peer-to-peer crypto-currency with proof-of-stake. Self-Published, 2012. pdf V. Buterin. On public and private blockchains. Ethereum Blog, 2015. link . A. Kiayias, A. Russell, B. David, and R. Oliynykov: Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. IACR-CRYPTO-2017. pdf D. Mingxiao, et al. A Review on Consensus Algorithms of Blockchain. 2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC) Banff Center, Banff, Canada, October 5-8, 2017 link R. Pass and E. Shi. Rethinking Large-Scale Consensus. In the Proceedings of the IEEE 30th Computer Security Foundations Symposium, 2017. Thunder Token Foundation: Thunder Consensus White Paper, Janurary, 2018 pdf . R. Pass, L. Seeman, and A. Shelat. Analysis of the Blockchain Protocol in Asynchronous Networks. In EUROCRYPTO 2017 pdf . Juan A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone protocol: Analysis and applications. In Elisabeth Oswald and Marc Fischlin, editors, Advances in Cryptology - EUROCRYPT 2015, Volume 9057 of Lecture Notes in Computer Science, pages 281\u2013310. Springer, 2015 pdf . Tendermint Team. Understanding the Basics of a Proof-of-Stake Security Model. link . V. Buterin. On Settlement Finality. link . EOS Team. EOS.IO Technical White Paper v2. https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md . Online available 25/05/2018. link Bitshares Team. Delegated Proof-of-Stake Consensus. https://bitshares.org/technology/delegated-proof-of-stake-consensus/. Online available 25/05/2018. link R. Pass, and E. Shi. (2017). Hybrid consensus: Efficient consensus in the permissionless model. In LIPIcs-Leibniz International Proceedings in Informatics (Vol. 91). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik pdf . V. Buterin, and V. Griffith. (2017). Casper the Friendly Finality Gadget. arXiv preprint arXiv:1710.09437. link H. McCook. Under the Microscope: Economic and Environmental Costs of Bitcoin Mining. link","title":"Technical whitepaper"},{"location":"wp-and-research/technical-whitepaper/#introduction","text":"version 1.0 ( pdf version ) The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201890s, with pioneers and dreamers coming together to build a new future. TomoChain can be a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture allowing for a fast, secure, frictionless payment and trusted store of value. Distributed systems have been researched in a \u201c permissioned setting \u201d where the number of participants in the system and their identities are common knowledge. In 2008, Satoshi Nakamoto - \u201cproposed his celebrated \u201cblockchain protocol\u201d which attempts to achieve consensus in a permissionless setting: anyone can join (or leave) the protocol execution (without getting permission from a centralized or distributed authority), and the protocol instructions do not depend on the identities of the players\u201d (see here ). Later on, Ethereum with its Ethereum Virtual Machine (EVM) proposed several significant enhancements compared to Bitcoin, including Smart Contracts. Both Bitcoin and Ethereum have some issues, especially with transaction processing performance. In order to construct an efficient and secured consensus protocol for TomoChain , we tackle the following main bottlenecks of classic blockchains: Efficiency: Existing blockchains as employed by major crypto-currencies(e.g., Bitcoin or Ethereum) do not scale well to handle a large transaction volume, e.g. Bitcoin and Ethereum can handle around 10 transactions/second. This small throughput severely hinders a wide-spread adoption of such crypto-currencies. Confirmation times: The 10 minutes Bitcoin block-time is significantly larger than network latency. Furthermore, a Bitcoin block requires 5 subsequent blocks following it so that it can be confirmed; thus it takes on average one hour for a transaction to be confirmed (with low confidence). While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes Cardano . These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. With the motivation as mentioned above, our persistent and ultimate goal of research is to propose the consensus protocol focusing on the following key strategies: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase To start dealing with these problems, in this paper, we present an overview architectural design of TomoChain \u2019s master nodes. In particular, we propose (PoSV) consensus, a Proof-of-Stake (PoS)-based blockchain protocol with a fair voting mechanism, rigorous security guarantees and fast finality. We also present a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of forks, fast confirmation times, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually.","title":"Introduction"},{"location":"wp-and-research/technical-whitepaper/#structure-of-the-remainder-of-the-paper","text":"Section TomoChain Overview : explains the intuition ideas and overview architectural design of masternodes, framework and background protocols that help mass readers (e.g., investors, traders, others) who may not have technical knowledge understand our mechanism easily. Section Stakeholders & Voting presents TomoChain stakeholder policy, masternode committee voting systems, and reward mechanism. Section TomoChain consensus protocol explains the motivation and double validation process as well as finality checkpoint of the protocol. In Section Protocol formalizations , we present the formalization of our model in a mathematical way to show the soundness of our model and protocol. Section Security Analysis discusses the security analysis and resistant strain of potential attacks. We discuss and compare TomoChain with several existing blockchains in Section related work . Finally, we conclude the paper in Section Conclusion .","title":"Structure of the remainder of the paper"},{"location":"wp-and-research/technical-whitepaper/#Sec:MasternodeDesign","text":"","title":"TomoChain Masternode Design"},{"location":"wp-and-research/technical-whitepaper/#Sec:TomochainOverview","text":"The TomoChain blockchain is produced and maintained by a set of masternodes in a consistent manner through the TomoChain consensus protocol as shown in Fig. architecture . These masternodes are full nodes that hold TOMO. For a token holder to become a masternode, two requirements must be satisfied: The token holder must hold at least a minimum required amount of tokens (see next section for more details). The token holder must be one of the most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism . In addition to the voting system which is an improvement over the current Bitcoin and Ethereum blockchain, TomoChain also provides a new technique, namely Double Validation complemented with a Randomization mechanism. This new technique significantly decreases the probability of having invalid blocks in the blockchain. These enhancements and the components of TomoChain are step-by-step detailed in the followings.","title":"The TomoChain architecture"},{"location":"wp-and-research/technical-whitepaper/#Sec:StakeVoting","text":"","title":"Stakeholders &amp; Voting"},{"location":"wp-and-research/technical-whitepaper/#coin-holders-masternodes","text":"Token holder is as simple as its name: users who join the network, who own and transfer TOMO. Masternodes are full-nodes which maintain a copy of the blockchain, produce blocks and keep the chain consistent. It is worth noting that, TomoChain does not have miners as in the current Proof-of-Work-based blockchain systems such as Bitcoin and Ethereum. Only masternodes can produce and validate blocks. Masternodes are selected via a voting system. The first requirement of being masternodes is to deposit 50 000 TOMO to the Voting Smart Contract. Then, these depositors are listed as masternode candidates in the Voting DApp, which allows token holders to vote for them by sending TOMO to the smart contract. Masternodes which work hard in the system to create and verify blocks will be incentivized with TOMO. Furthermore, token holders who vote for these incentivized masternodes will also receive TOMO in proportion to the amount of TOMO they have invested via ballots. TomoChain engineers take responsibility to design that fair, explicit, automated and accountable reward mechanism. The list of masternode candidates is dynamically sorted based on voted tokens. The performance of the masternodes will be tracked and reported back to the token holders in terms of three main metrics: CPU/Memory charts which ensure the workload of the masternodes, the number of signed blocks which indicates their work performance and the last signed block which figures out their last activity. Token holders, at any time, can unvote masternodes, who have low performance, and give their votes to the other masternodes who have beter performance. Token holders have incentives to do that because their voted tokens are seen as investment to their supported masternodes, thus they should choose a voting strategy in order to maximize their profit from the investment. This simple trick keeps the system healthy since masternodes always have to race for their position so that all weak masternodes will eventually be eliminated. Therefore, only the strongest masternodes are voted and can flourish.","title":"Token holders, Masternodes"},{"location":"wp-and-research/technical-whitepaper/#voting-masternode-committee","text":"There are maximum one hundred fifty masternodes elected in the masternode committee. The required amount of deposit for masternode role is set at 50 000 TOMO. This amount is locked in a voting smart contract . Once a masternode is demoted (by not remaining in the top one hundred fifty voted masternodes) or intentionally quits the masternode candidates list/masternode committee, the deposit will have been locked for a month. Token holders can vote at any time, by any number of votes (which is actually counted by the amount of TOMO they bet on some masternode candidates). They can use masternode\u2019s performance statistics in the governance Voting DApp as reference information to give votes. The set of masternodes is dynamically sorted by the amount of TOMO and counted up to one hundred fifty, upon reception of votes.","title":"Voting &amp; Masternode Committee"},{"location":"wp-and-research/technical-whitepaper/#reward-mechanism","text":"For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. The reward mechanism is designed following the policy as follows: the higher number of signatures one masternode has made, the more reward he earns. For instance, within an epoch, masternode A who has sealed twice the blocks than masternode B earns double amount of TOMO than masternode B does. Furthermore, there is also a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. Specifically, each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. - Infrastructure Reward : The first portion of 40% called Infrastructure Reward goes to the Masternode. Staking Reward : The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. Foundation Reward : The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. It is worth noting that coin-holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion.","title":"Reward Mechanism"},{"location":"wp-and-research/technical-whitepaper/#Sec:ProtocolOverview","text":"","title":"TomoChain Consensus Protocol"},{"location":"wp-and-research/technical-whitepaper/#double-validation-process","text":"In TomoChain, masternodes share equal responsibility to run the system and keep it stable. Full nodes should run on powerful hardware configuration and high-speed network connectivity in order to ensure the required block time (target to two seconds). Only masternodes can produce and seal blocks. In order for that, the TomoChain consensus relies on the concept of Double Validation that improves some existing consensus mechanisms, namely Single Validation . In the followings, we first describe the Double Validation , then analyze the differences and improvements of Double Validation compared to Single Validation .","title":"Double Validation Process"},{"location":"wp-and-research/technical-whitepaper/#double-validation-dv","text":"Similar to some existing PoS-based blockchains such as Cardano , each block is created by a block producer, namely masternode, that takes its block creation permission turn following a pre-determined and circular sequence of masternodes for each epoch. However, differently from these existing blockchains, DV in TomoChain requires the signatures of two masternodes on a block to be able to push the block to the blockchain. One of the masternodes is the block creator while the other one, namely block verifier is randomly selected among the set of voted masternodes that validates the block and signs it. In the followings, for more convenience, block creator and block verifier are used interchangeably for the masternode 1 (block producer) and the randomly selected masternode 2 for a block, respectively. The process of randomly selecting the block verifiers is detailed in the next paragraphs. Note that, there is no mining in the block creation as in Proof-of-Work-based blockchains (e.g. Ethereum and Bitcoin). It means that a created block is valid if and only if it is sealed by enough two signatures from a block creator and a corresponding block verifier to confirm the correctness of it. We believe this DV technique enhances the stability of the blockchain by diminishing the probability of producing \u201cgarbage\u201d blocks while still maintaining the system security and consistency. Randomization of block verifiers in DV is the key factor of reducing risks coming from paired masternodes trying to commit malicious blocks. Furthermore, comparing to some current public blockchains in the market, by utilizing the DV technique, TomoChain brings significant improvements in the block time by only requiring two signatures per block. For the purpose of showing our enhancement over existing PoS-based blockchains, we analyze the differences between DV and the Single Validation mechanism in some existing blockchains as follows.","title":"Double Validation (DV)"},{"location":"wp-and-research/technical-whitepaper/#improvements-of-double-validation-over-single-validation","text":"Let\u2019s show the improvements of DV compared to Single Validation through analyzing some attacking scenarios as shown in Fig. Single Validation example and Fig. Double Validation example . Single Validation In Single Validation, in an epoch, each masternode, e.g. M1, sequentially takes its turn to create a block, e.g. block100. The next masternode, e.g. M2, in the sequence then validates the created block100. If block100 is invalid (that potentially means that M1 is an attacker) and contains a transaction that invalidly benefits M1, if M2 is honest (see Fig. SV a ), it rejects block100 and creates another block100 next to block99. But, if M2 is an attacker (see Fig. SV b ) that corporates with M1, M2 ignores the invalidation of block100, signs it and creates next block, namely block101 that is valid. Then, the next masternode M3 verifies that block101 is valid, M3 signs block101 and creates a block102. By this way, Single Validation potentially leaves the blockchain with \u201cgarbage\u201d or invalid blocks which require a \u201crebase\u201d to restore the validity of the blockchain. Single Validation (SV): (a) SV with block creation masternode as an attacker and (b) SV with two consecutive block creation masternodes as attackers Double Validation We claim that our DV technique significantly reduces the probability of having garbage blocks in the blockchain. Assuming that M1 and M2 are the block creator and block verifier, respectively, for block100 in our DV. If block100 is invalid and M2 is honest (see Fig. DV a ), M2 will not seal this block. Therefore, the next block creator M3 for creating block101 will see that block100 does not have enough 2 signatures, thus reject block100 and create another block100 next to block99. On the other hand, if M2 is also an attacker pairing/handshaking with M1 (see Fig. DV b ), M2 signs block100 despite its invalidity (remember that the block verifier M2 is randomly selected, there has little chance of successfully pairing M1 and M2). Next, even though M3 will verify that block100 has two valid signatures, M3 still rejects it because block100 is invalidated by M3 that will create another valid block100. In order to break the stability and consistency of the blockchain in this case, M3 should be an attacker together with M1 and M2, which, however, has a very low probability. In other words, DV strengthens the consistency of the blockchain and makes it hard to break. Double Validation (DV): (a) DV with block creator as an attacker and (b) DV with both block creator and block verifier as attackers","title":"Improvements of Double Validation over Single Validation"},{"location":"wp-and-research/technical-whitepaper/#randomization-for-block-verifiers-for-double-validation","text":"","title":"Randomization for Block Verifiers for Double Validation"},{"location":"wp-and-research/technical-whitepaper/#the-first-masternodeblock-creator","text":"The first masternode/block creator in a given epoch e can be selected by a round-turn game and can be formal defined as an array: \\begin{bmatrix} \\nu_1 \\end{bmatrix} = \\begin{bmatrix} V_{1.1}^e \\\\ V_{1.2}^e\\\\ \\cdot\\\\ \\cdot\\\\ \\cdot\\\\ V_{1.n-1}^e\\\\ V_{1.n}^e\\\\ \\end{bmatrix}","title":"The First Masternode/Block Creator"},{"location":"wp-and-research/technical-whitepaper/#random-matrix-and-smart-contract","text":"Let m be the number of masternodes, n be the number of slots in an epoch. In order to randomly generate the block verifiers for the next epoch e+1 , the process is performed by the following steps. Step 1: Random Numbers Generation and Commitment Phase: First, at the beginning of epoch e , each masternode V_i will securely create an array of n+1 special random numbers Recommend_i= [ r_{i.1}, r_{i.2}, ..., r_{i.n}, \\theta_i] , where r_{i.k}\\in [1, ..., m] indicating the recommendation of ordered list of block verifiers for the next epoch of V_i , and \\theta_i \\in \\{-1, 0, 1\\} is used for increasing the unpredictability of the random numbers. Second, each masternode V_i has to encrypt the array Recommend_i using a secret key SK_i , say Secret_i = Encrypt (Recommend_i, SK_i) . Next, each masternode forms a \" lock \u201d message that contains encrypted secret array Secret_i ; signs off this message with its blockchain\u2019s private key through the Elliptic Curve Digital Signature Algorithm (ECDSA) scheme currently used in Ethereum and Bitcoin along with the corresponding epoch index and its public key generated from its private key. By doing this, every masternode can check who created this lock message through ECDSA verification scheme and which epoch it relates to. Then, each node V_i sends their lock message with its signature and public key to a Smart contract stored in the blockchain, so that eventually each masternode collects and knows the lock s from all other masternodes. Step 2: Discovery and Recovery Phase: The recovery phase is for every node to reveal its previous lock message so that other nodes can get to know the secret array it has sent before. A masternode only starts revealing its lock message if all masternodes have sent their lock messages to the smart contract or a certain timeout event occurs. Each masternode then opens its lock message by sending an \u201d unlock \u201d message to the smart contract for other masternodes to open the corresponding lock. Imagine a commitment-like scheme in this case where a lock message is a commitment message locking its contained recommendation array Recommend_i (so that no one can open or guess the contained array), and the unlock message gives the key for other masternodes to decrypt the box and retrieve the values of Recommend_i . Eventually, a masternode has both locks and unlocks of others. If some elector is an adversary which might publish its lock but not intend to send the corresponding unlock, other masternodes can ignore the adversary\u2019s lock and set all its random values be 1 as default. The idea is simple: the network can keep working successfully even if some masternodes are adversaries. Step 3: Assembled Matrix and Computation Phase: At the point of the slot n^{th} of the epoch e , the secret arrays Secret_I in the smart contract will be decrypted by each masternode and return the plain version of Recommend_i . Each tuple of the first n numbers of each V_i will be assembled as the i^{th} column of an n \\times m matrix. All the last number \\theta_i forms a m\\times 1 matrix. Then each nodes will compute the block verifiers ordered list by some mathematical operations as explained below. The resulting output is a matrix n \\times 1 indicating the order of block verifiers for the next epoch e+1 .","title":"Random Matrix and Smart Contract"},{"location":"wp-and-research/technical-whitepaper/#the-second-masternodeblock-verifier","text":"Then, each node soon compute the common array \\nu_2 for the order of the block verifiers by the following steps as in the upper equation as belows. Then, \\nu_2 is obtained by modulo operation of element values of \\nu'_2 as in the lower equation in the followings: \\label{eq:matrix} \\begin{bmatrix} \\nu'_2 \\end{bmatrix} = \\begin{bmatrix} v_{2.1}^{e+1} \\\\ v_{2.2}^{e+1} \\\\ \\vdots \\\\ v_{2.n}^{e+1} \\end{bmatrix} = \\begin{bmatrix} r_{1.1} & r_{2.1} & \\cdots & r_{m.1} \\\\ r_{1.2} & r_{2.2} & \\ddots & \\vdots \\\\ r_{1.3} & \\ddots & \\ddots & r_{m.3} \\\\ \\vdots & & r_{m-1.n-1} & r_{m.n-1} \\\\ r_{1.n} & \\cdots & r_{m-1.n} & r_{m.n} \\end{bmatrix} \\begin{bmatrix} \\theta_1 \\\\ \\theta_2 \\\\ \\theta_3 \\\\ \\vdots \\\\ \\theta_m \\end{bmatrix} \\label{eq:eq2} \\begin{bmatrix} \\nu_2 \\end{bmatrix} = \\begin{bmatrix} \\nu'_2 & mod & m \\end{bmatrix} = \\begin{bmatrix} \\left| v_{2.1}^{e+1}\\right| & mod & m \\\\ \\left| v_{2.2}^{e+1} \\right| & mod & m\\\\ \\vdots \\\\ \\left| v_{2.n}^{e+1} \\right| & mod & m \\end{bmatrix}","title":"The Second Masternode/Block Verifier"},{"location":"wp-and-research/technical-whitepaper/#finality-analysis","text":"\"There is a standard definition of \u201ctotal economic finality\u201d: it takes place when \\frac{3}{4} of all masternodes make maximum-odds bets that a given block or state will be finalized. This condition offers very strong incentives for masternodes to never try colluding revert the block: once masternodes make such maximum-odds bets, in any blockchain where that block or state is not present, the masternodes lose their entire deposit\" (see here . TomoChain keeps that standardization in the design so that one block is considered as irreversible if it collects at least \\frac{3}{4} signatures of all masternodes committee. The time-line of blockchain creation process, checking finality and mark the block as immutable is described as in Figure: ChainMaking below.","title":"Finality Analysis"},{"location":"wp-and-research/technical-whitepaper/#Sec:ProtocolFormalization","text":"","title":"Consensus Protocol: Formalization"},{"location":"wp-and-research/technical-whitepaper/#basic-concepts-protocol-description","text":"In order to have a solid foundation for us to prove that our blockchain can achieve what are claimed, we first present our preliminary formalizations of the concepts that will be used in our yellow paper later. To start, as we are dealing with proof of stake consensus algorithm, we follow the way of formalization in the recent works in the literature like Cardano and here and here here . In particular, we recall the following concepts and definitions that were presented in Cardano and adapt them to the context of TomoChain.","title":"Basic Concepts &amp; Protocol Description"},{"location":"wp-and-research/technical-whitepaper/#time-slots-epoch","text":"As previously described, ideally, each epoch is divided into 900 block time, that is called block slot. Only one block can be created in a slot. We assume that there is a roughly synchronized clock that allows for masternodes to learn the current slot. This simplification will effectively permit masternodes to execute the signing and validation process of the PoSV consensus, where each masternode must collectively create a block to the current slot. For more simplification, each slot sl_r is accessed by an integer r \\in \\{1, 2, ...900\\} , and suppose that the real time window that corresponds to each slot has the following properties, which are similar to what are specified in Cardano . Every masternode can determine the index of the current slot based on the current time and \u201dany discrepancies between parties\u2019 local time are insignificant in comparison with the length of time represented by a slot\u201d Cardano The amount of a slot time is sufficient to guarantee that any message transmitted by an honest party at the beginning of the time window will be received by any other honest party by the end of that time window. While this assumption similar to Cardano , TomoChain requires it in order for a block creator to propagate its created block to the corresponding block verifier to ensure that the block is signed by both the masternodes before the next block creator builds another block on top of it. As mentioned in Section TomochainOverview , in our setting, we assume that the fixed collection of m (150) masternodes V_1, V_2, ...., V_m interact throughout the protocol. For each V_i a public/private key pair ( pk_i , sk_i ) for a prescribed signature scheme, ideally ECDSA, is generated. Furthermore, we assume that the public keys pk_1 ,.., pk_m of the masternodes are distributed and known by all of them (that means a masternode knows all public keys of other nodes). Some notable definitions of the blockchain concepts are defined following the notation in here . State A state (defined as in here ) is an encoded string st \\in \\{0,1\\}^\\lambda . Block A block (defined as in here ) B generated at a slot sl_i \\in \\{sl_1,...,sl_R\\} contains the current state st \\in \\{0, 1\\}^{\\lambda} , data d \\in \\{0, 1\\}^{*} , the slot number sl_i and a signature \\Sigma = Sign_{ski} (st, d, sl_i) computed under sk_i corresponding to the masternode V_i generating the block. Blockchain A blockchain (defined as in here ) C is a sequence of blocks B_1,..., B_n associated with a strictly increasing sequence of slots for which the state sti of B_i is equal to H(B_{i\u22121}) , where H is a collision-resistant cryptography hash function. A blockchain has a number of properties, including the length of a chain len(C) = n , which is its number of blocks, and the block B_n is the head of the chain, denoted head(C) . As mentioned earlier, in our TomoChain model, we set each time slot sl_i as 2 seconds; an epoch is a set R of 900 slots \\{ sl_1, sl_2, ..., sl_{900}\\} (an epoch time duration equals to 1800 seconds). In summary, the consensus protocol of TomoChain can be formalized in Algorithm ValidatorGeneration. The Algorithm ValidatorGeneration is simulated and explained as a process shown in Fig. EpochProcess .","title":"Time, Slots, Epoch"},{"location":"wp-and-research/technical-whitepaper/#Sec:SecurityAnalysis","text":"","title":"Security Analysis"},{"location":"wp-and-research/technical-whitepaper/#nothing-at-stake","text":"Nothing-at-stake is a well-known problem in PoS-based blockchain, just like 51% attack in PoW algorithm. PoW-based miners require CapEx (capital expenditures) for buying mining equipment such as ASICs and OpEx (operation expenditures) such as electricity to solve mathematical puzzles securing the network (see here ). That means, there is always an intrinsic cost for miners in mining regardless of its success. In case of a fork, miners therefore always allocate their resource (equipment) to the chain that they believe is correct in order to get incentives for compensating the intrinsic costs in mining. In the contrary, in PoS-based systems without mining, during an ideal execution, for creating a fork only costs, masternodes actually do not incur intrinsic costs, other than roughly some block validation and signing cost. As a result, there\u2019s an inherent problem of the masternode having no downside to staking both forks. Therefore, there are actually two issues in the original design of PoS. On one hand, for any masternode, the optimal strategy is to validate every chain/fork, so that the masternode gets their rewards no matter which fork wins. On the other hand, for attackers/malicious masternodes, they can easily create a fork for double spending. Let\u2019s look back how TomoChain handles these two problems. As a reminder, TomoChain maintains a certain order of masternodes in creating and sealing blocks, in each epoch. For the first issue, random/arbitrary forks are hardly happened because the order of block creation masternodes is pre-determined for each epoch. Furthermore, the Double Validation mechanism eliminates the second issue because even one malicious masternode creates two blocks at his turn, only one block then can be validated by the second randomly selected masternode.","title":"Nothing-at-stake"},{"location":"wp-and-research/technical-whitepaper/#long-range-attack","text":"In TomoChain , block is valid only if it collects double validation and finalized once \\frac{3}{4} of masternodes verify. Therefore, as long as the number of attackers or malicious nodes and/or fail-stop nodes is less equal than \\frac{1}{4} the number of masternodes, the number of masternodes signing a block is at least \\frac{3}{4} the total number of masternodes, which makes the block finalized. Thus, there is no chance for one malicious masternode to create longer valid chain because other masternodes will refuse it.","title":"Long-range attack"},{"location":"wp-and-research/technical-whitepaper/#censorship-attack","text":"If there are more than \\frac{3}{4} malicious masternodes in TomoChain , censorship attack might happen. For example, these masternodes refuse valid blocks or simply become inactive. In this case, chain is stuck. In fact, masternodes are paid for their effort of correctly working so that the chain is actively updated in a consistent manner. More importantly, becoming masternode means a certain amount of tokens is locked, 50 000 TOMO in particular. As a result, in order to control more than \\frac{3}{4} masternodes, attackers must hold a considerable amount of TOMO and gain huge support from token holders. And because of this, the attackers do not have incentives to do any malicious action to harm the chain. However, in worst case, TomoChain has to do a soft fork in order to reduce number of masternodes to keep the chain running and figure out slasher mechanisms for those malicious masternodes.","title":"Censorship Attack"},{"location":"wp-and-research/technical-whitepaper/#relay-attack","text":"TomoChain supports EIP155 Transactions in TomoChain are included CHAIN\\_ID specified for different public chains. Table table:chainid shows recognized CHAIN\\_ID s. CHAIN_ID Chain(s) 1 Ethereum mainnet 2 Morden (disused), Expanse mainnet 3 Ropsten 4 Rinkeby 30 Rootstock mainnet 31 Rockstock testnet 42 Kovan 61 Ethereum Classic mainnet 62 Ethereum Classic testnet 1337 Geth private chains (default) 77 Sokol, the public POA Network testnet 99 Core, the public POA Network main network 88 Mainnet 89 Testnet","title":"Relay Attack"},{"location":"wp-and-research/technical-whitepaper/#safety-and-liveness","text":"Safety implies having a single agreed upon chain where there are not two or more competing chains with valid transactions in either (see here . A consensus protocol can be safe when blocks have settlement finality, or else probabilistic finality. This last sentence reveals that can provide safety because it has a settlement finality. A consensus protocol is considered live if it can eventually propagate and make valid transactions onto the blockchain (see here . An occurrence of a liveness fault is when transaction omission, information withholding, or message reordering, among a number of violations are observed. This type of fault is unlikely to happen in TomoChain because the block creation masternodes list is ordered in a pre-determined way for each epoch, thus if even an attacking masternode omits some transactions, the latter will be processed and validated by the next honest masternode in the next block.","title":"Safety and liveness"},{"location":"wp-and-research/technical-whitepaper/#ddos-attack","text":"Masternodes are encouraged to run in well-known public cloud providers such as AWS, Google Cloud or Microsoft Azure which provides multiple DDOS prevention mechanisms. Even in case that some nodes are attacked or fail-stop, the network still works correctly as long as the number of failing and/or attacked nodes is less than 1/4 of the number of masternodes.","title":"DDOS Attack"},{"location":"wp-and-research/technical-whitepaper/#spam-attack","text":"TomoChain keeps the same transaction fee mechanism as Ethereum which is indicated via gasPrice. However, TomoChain supports minimum transaction fee (at 1 wei), which somehow enables spamming that attacker tries to broadcast a huge amount of low fee transactions to the system. However, TomoChain masternodes always sort transactions and pick up only high fee transactions into the proposing block. Thus, spammers have little chance to harm the system.","title":"Spam Attack"},{"location":"wp-and-research/technical-whitepaper/#Sec:relatedwork","text":"Consensus plays an important role to guarantee the success of distributed and decentralized systems. Bitcoin\u2019s core consensus protocol, often referred to as Nakamoto consensus Bitcoin , realizes a \u201creplicated state machine\u201d abstraction, where nodes in a permissionless network reach agreement about a set of transactions committed as well as their ordering (see here . However, known permissionless consensus protocols such as Bitcoin\u2019s Nakamoto consensus come at a cost. Bitcoin and Ethereum rely on PoW to roughly enforce the idea of \u201cone vote per hashpower\u201d and to defend against Sybil attacks. Unfortunately, PoW-based Bitcoin and Ethereum are known to have terrible performance (Bitcoin\u2019s transaction processing performance is at peak of around 7 transactions per second as previously mentioned). Moreover, PoW is much criticized because it costs a lot of electricity energy. In order to design an efficient and cost-effective consensus protocol in the permissionless model, PoS has been discussed extensively in the Bitcoin and Ethereum forum . A PoS blockchain can substitute the costly PoW in Nakamoto\u2019s blockchain while still providing similar guarantees in terms of transaction processing in the presence of a dishonest minority of users, where this \u201cminority\u201d is to be understood here in the context of stake rather than computational power Cardano . The Ethereum design Casper , published by Buterin & Griffith, provides as its initial version a PoW/PoS hybrid consensus protocol, which might eventually switch to a pure PoS system. As in TomoChain , Ethereum Casper requires that validators (term similar to block creators) have to deposit an amount. In fact, some concepts used in TomoChain such as checkpoint blocks are borrowed from Casper. Our (PoSV) consensus protocol proposed in this paper can be seen as a hybrid model. In particular, first, we apply with voting and Double Validation to create, verify and vote for blocks smoothly and efficiently. Whenever potentials of fork branches are detected, we employ the idea in PoW to select the longest branch with the most votes and discard the other branches. This hybrid approach not only increases the performance and security of blockchain, but also reduces the fork situation in an efficient and practical manner. Recently, there are several consensus protocol research works that are closely related to TomoChain such as EOS and Ouroboros of Cardano . The mechanism of voting for masternodes for reaching consensus is utilized by Bitshares and EOS , whose consensus protocol is termed Delegated Proof-of-Stake (DPoS). DPoS is similar to the Proof-of-Stake Voting consensus of TomoChain in the sense that masternodes (block creators or witnesses in DPoS) are elected through a voting system. However, TomoChain requires that masternodes need to deposit a required minimum amount of TOMO to become a masternode candidate, which puts more pressure on the masternodes to work honestly. Furthermore, the Double Validation mechanism of TomoChain lowers the probability of handshaking attacks and having invalid blocks, as previously analyzed. EOS also has a maximum of 21 block producers for each epoch, which is less decentralized than TomoChain with a maximum of 150 masternodes elected (and this number of masternodes can be changed following the decentralized governance through voting). The research-backed Cardano blockchain solution, namely Ouroboros, with the ADA coin, which is purely based on Proof-of-Stake, promisingly claims to provide rigorous security guarantees. Similarly to TomoChain , Ouroboros has a set of block producers for each epoch for creating blocks and each block producer candidate needs to deposit a minimum amount of stake (an amount of ADA). However, note that, Ouroboros only provides Single Validation , while Double Validation of TomoChain provides several advantages over Single Validation, as previously analyzed. In Ouroboros, the order of block producers, selected among stakers, is based on a biased randomization while the TomoChain \u2019s randomization for block verifiers is potentially uniform and based on smart contracts. Furthermore, the use of voting as in TomoChain and DPoS enables a more incentive equality between stakers: In Ouroboros, stakers with very little stake have a very small probability of becoming block creators, while, in TomoChain , these stakers can choose an optimal strategy to vote for potential masternodes to get incentives.","title":"Related work"},{"location":"wp-and-research/technical-whitepaper/#Sec:Conclusion","text":"In this paper, we proposed PoSV, a PoS Voting-based blockchain protocol with heuristic and fair voting mechanism, rigorous security guarantees, and fast finality. We also presented a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of having forks, fast confirmation time, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually.","title":"Conclusion and perspectives"},{"location":"wp-and-research/technical-whitepaper/#perspectives","text":"Future work The TomoChain team is currently working on the implementation of the Proof-of-Stake Voting, which will be released on schedule as stated in our roadmap. Furthermore, in parallel with our novel consensus protocol, we will investigate the Sharding mechanism in order to provide even better transaction processing performance. We believe that, the Sharding technique with the stable number of masternodes will provide better stability and efficiency to the blockchain. At the same time, we commit to keep EVM-compatible smart contracts within our masternode sharding framework. Economic sustainability is also an important concept for a blockchain based decentralized network. That means to maintain the network in a sustainable condition, an equilibrium needs to be achieved, in which the cost of running the network infrastructure could be offset by the revenues generated. In this context, the cost of network infrastructure consists of two parts: the physical cost of having hardware such as servers, memories that passes the network technical requirements; and the capital cost of having TOMO locked into smart-contracts. The revenues for Masternodes would primarily come from Reward Engine emission, and later on from service revenues such as token exchange fees provided by applications running on top of TomoChain. We will publish a TomoChain economic analysis and proposal, separate from this technical paper in a later date.","title":"Perspectives"},{"location":"wp-and-research/technical-whitepaper/#Sec:References","text":"Satoshi Nakamoto. Bitcoin: A peer-to-peer electronics cash system. 2008. pdf Ethereum Foundation. Ethereum\u2019s White Paper. , 2014. Online available 25/05/2018. link . D. Larimer. Delegated Proof-of-Stake (DPOS). BitShare White Paper 2014. link . S. King and S. Nadal. PPCoin: Peer-to-peer crypto-currency with proof-of-stake. Self-Published, 2012. pdf V. Buterin. On public and private blockchains. Ethereum Blog, 2015. link . A. Kiayias, A. Russell, B. David, and R. Oliynykov: Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. IACR-CRYPTO-2017. pdf D. Mingxiao, et al. A Review on Consensus Algorithms of Blockchain. 2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC) Banff Center, Banff, Canada, October 5-8, 2017 link R. Pass and E. Shi. Rethinking Large-Scale Consensus. In the Proceedings of the IEEE 30th Computer Security Foundations Symposium, 2017. Thunder Token Foundation: Thunder Consensus White Paper, Janurary, 2018 pdf . R. Pass, L. Seeman, and A. Shelat. Analysis of the Blockchain Protocol in Asynchronous Networks. In EUROCRYPTO 2017 pdf . Juan A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone protocol: Analysis and applications. In Elisabeth Oswald and Marc Fischlin, editors, Advances in Cryptology - EUROCRYPT 2015, Volume 9057 of Lecture Notes in Computer Science, pages 281\u2013310. Springer, 2015 pdf . Tendermint Team. Understanding the Basics of a Proof-of-Stake Security Model. link . V. Buterin. On Settlement Finality. link . EOS Team. EOS.IO Technical White Paper v2. https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md . Online available 25/05/2018. link Bitshares Team. Delegated Proof-of-Stake Consensus. https://bitshares.org/technology/delegated-proof-of-stake-consensus/. Online available 25/05/2018. link R. Pass, and E. Shi. (2017). Hybrid consensus: Efficient consensus in the permissionless model. In LIPIcs-Leibniz International Proceedings in Informatics (Vol. 91). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik pdf . V. Buterin, and V. Griffith. (2017). Casper the Friendly Finality Gadget. arXiv preprint arXiv:1710.09437. link H. McCook. Under the Microscope: Economic and Environmental Costs of Bitcoin Mining. link","title":"References"},{"location":"wp-and-research/specs/trc21_standard/","text":"TomoChain Request for Comment: TRC21 Token Standard \u00b6 Standard Name TRC21 Author TomoChain R&D Team Category Token Standard Created 2019-05-17 Simple Summary \u00b6 A standard interface for tokens that allows token holders to pay transaction fees by the token itself. Abstract \u00b6 The following standard allows for the implementation of a standard Application Programmable Interface (API) for tokens within TomoChain smart contracts. Tokens issued on TomoChain following this standard allows token holders to pay fee for transactions to the token contract in terms of the token itself. Motivation \u00b6 A standard token interface that extends TRC-20 standard in order to allow holders of a token issued following this standard to make transactions without the need of holding TOMO in the wallet for paying transaction fees. TRC21 Specification \u00b6 /** * @title TRC21 interface */ interface ITRC21 { function totalSupply() external view returns (uint256); function balanceOf(address who) external view returns (uint256); function estimateFee(uint256 value) external view returns (uint256); function issuer() external view returns (address); function allowance(address owner, address spender) external view returns (uint256); function transfer(address to, uint256 value) external returns (bool); function approve(address spender, uint256 value) external returns (bool); function transferFrom(address from, address to, uint256 value) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Fee(address indexed from, address indexed to, address indexed issuer, uint256 value); } TRC21 API specification \u00b6 totalSupply : Returns the token total supply. function totalSupply () external view returns ( uint256 ); balanceOf : Returns the account balance of another account with address who . function balanceOf ( address who ) external view returns ( uint256 ); estimateFee : Estimate the transaction fee in terms of the token that the transaction makers will have to pay. Transaction fee will be paid to the issuer of the TRC21 token contract following our TomoZ protocol detailed in here . function estimateFee ( uint256 value ) external view returns ( uint256 ); Ideally the function will return the transaction fee based on the value (the number of tokens) that the transaction maker wants to transfer. Transaction fee for allowance function will be estimated if input parameter value = 0 . The way fees are computed is not standardized. Token issuers can fully customize the implementation of the function. This function will also be called by user wallets to evaluate fees the user must be paying. issuer : Returns the address of the token issuer. function issuer () external view returns ( address ); The method returns the address of the token issuer. The is to ensure that only the issuer has the right to apply to the TomoZ protocol for paying fees of token-holder transactions to the token contract in terms of the token itself. The method will be called by the TomoZ protocol source code to verify that no one else is able to apply the token to the TomoZ protocol, except the issuer. transfer : Transfers _value amount of tokens to address _to , and MUST fire the Transfer and Fee event. function transfer ( address _to , uint256 _value ) public returns ( bool success ) The function will call estimateFee function to compute the transaction fee. The function SHOULD throw if the message caller\u2019s account balance does not have enough tokens to spend and to pay transaction fees. Once succeeded, the token balance of the sender should be reduced by _value plus the computed transaction fee, the balance of _to should be increasing _value , while the balance of the token issuer should be increased by the computed transaction fee. approve function approve ( address spender , uint256 value ) external returns ( bool ); Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value . This function also calls estimateFee with input parameter as 0 in order to compute the transaction fee in terms of tokens that the transaction sender must pay to the token issuer. allowance function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the amount which spender is still allowed to withdraw from owner . transferFrom function transferFrom ( address from , address to , uint256 value ) external returns ( bool ); Transfers value amount of tokens from address from to address to . The function must fire the Transfer and Fee event. TRC21 Event specification \u00b6 Transfer event Transfer ( address indexed from , address indexed to , uint256 value ); This event MUST be emitted when tokens are transferred in functions transfer and transferFrom . Approval event Approval ( address indexed owner , address indexed spender , uint256 value ); This event MUST be emitted on any successful call to approve function. Fee event Fee ( address indexed from , address indexed to , address indexed issuer , uint256 value ); This event MUST be emitted when tokens are transferred in functions transfer and transferFrom in order for clients/DApp/third-party wallets to notify its users about the paid transaction fee in terms of token. Implementation \u00b6 The following implements the basis of the standard. For any implementation of the TRC21 standard, the following contract fields must be defined at the beginning of the contract. mapping ( address => uint256 ) private _balances ; uint256 private _minFee ; address private _issuer ; This template allows the TomoZ protocol to consider the implemented token as TRC21 and any fees paid for transactions to the token contract will be based on the token, not TOMO. _balances : record the balance of each token holder _minFee : the minimum fee in terms of tokens that the transaction sender must pay. Ideally minFee will be paid when approve function is called or when transaction fails. _issuer : the address of the token issuer who will receive transaction fees from token holders in terms of token, but will pay transaction fees to masternodes by means of TOMO. This is detailed in our TomoZ protocol specification white paper . The implementation also defines some additional functions as follows: minFee : Returns the minimum fee for any transaction. issuer : Returns the address of the issuer of the token. /** * @title Standard TRC21 token * @dev Implementation of the basic standard token. */ contract TRC21 is ITRC21 { using SafeMath for uint256 ; mapping ( address => uint256 ) private _balances ; uint256 private _minFee ; address private _issuer ; mapping ( address => mapping ( address => uint256 )) private _allowed ; uint256 private _totalSupply ; /** * @dev Total number of tokens in existence */ function totalSupply () public view returns ( uint256 ) { return _totalSupply ; } /** * @dev The amount fee that will be lost when transferring. */ function minFee () public view returns ( uint256 ) { return _minFee ; } /** * @dev token's foundation */ function issuer () public view returns ( address ) { return _issuer ; } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return An uint256 representing the amount owned by the passed address. */ function balanceOf ( address owner ) public view returns ( uint256 ) { return _balances [ owner ]; } /** * @dev Estimate transaction fee. * @param value */ function estimateFee ( uint256 value ) public view returns ( uint256 ) { return value . mul ( 0 ). add ( _minFee ); } /** * @dev Function to check the amount of tokens that an owner allowed to a spender. * @param owner address The address which owns the funds. * @param spender address The address which will spend the funds. * @return A uint256 specifying the amount of tokens still available for the spender. */ function allowance ( address owner , address spender ) public view returns ( uint256 ){ return _allowed [ owner ][ spender ]; } /** * @dev Transfer token for a specified address * @param to The address to transfer to. * @param value The amount to be transferred. */ function transfer ( address to , uint256 value ) public returns ( bool ) { uint256 total = value . add ( _minFee ); require ( to != address ( 0 )); require ( value <= total ); _transfer ( msg.sender , to , value ); _transfer ( msg.sender , _issuer , _minFee ); emit Fee ( msg.sender , to , _issuer , _minFee ); return true ; } /** * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 * @param spender The address which will spend the funds. * @param value The amount of tokens to be spent. */ function approve ( address spender , uint256 value ) public returns ( bool ) { require ( spender != address ( 0 )); require ( _balances [ msg.sender ] >= _minFee ); _allowed [ msg.sender ][ spender ] = value ; _transfer ( msg.sender , _issuer , _minFee ); emit Approval ( msg.sender , spender , value ); return true ; } /** * @dev Transfer tokens from one address to another * @param from address The address which you want to send tokens from * @param to address The address which you want to transfer to * @param value uint256 the amount of tokens to be transferred */ function transferFrom ( address from , address to , uint256 value ) public returns ( bool ) { uint256 total = value . add ( _minFee ); require ( to != address ( 0 )); require ( value <= total ); require ( total <= _allowed [ from ][ msg.sender ]); _allowed [ from ][ msg.sender ] = _allowed [ from ][ msg.sender ]. sub ( total ); _transfer ( from , to , value ); _transfer ( from , _issuer , _minFee ); emit Fee ( msg.sender , to , _issuer , _minFee ); return true ; } /** * @dev Transfer token for a specified addresses * @param from The address to transfer from. * @param to The address to transfer to. * @param value The amount to be transferred. */ function _transfer ( address from , address to , uint256 value ) internal { require ( value <= _balances [ from ]); require ( to != address ( 0 )); _balances [ from ] = _balances [ from ]. sub ( value ); _balances [ to ] = _balances [ to ]. add ( value ); emit Transfer ( from , to , value ); } /** * @dev Internal function that mints an amount of the token and assigns it to * an account. This encapsulates the modification of balances such that the * proper events are emitted. * @param account The account that will receive the created tokens. * @param value The amount that will be created. */ function _mint ( address account , uint256 value ) internal { require ( account != 0 ); _totalSupply = _totalSupply . add ( value ); _balances [ account ] = _balances [ account ]. add ( value ); emit Transfer ( address ( 0 ), account , value ); } /** * @dev Transfers token's foundation to new issuer * @param newIssuer The address to transfer ownership to. */ function _changeIssuer ( address newIssuer ) internal { require ( newIssuer != address ( 0 )); _issuer = newIssuer ; } /** * @dev Change minFee * @param value minFee */ function _changeMinFee ( uint256 value ) internal { _minFee = value ; } } TRC21 Token example \u00b6 The following shows an example of a TRC21 token which inherits from the TRC21 implementation. Token name, symbol, and decimals are also defined. contract MyTRC21 is TRC21 { string private _name ; string private _symbol ; uint8 private _decimals ; constructor ( string memory name , string memory symbol , uint8 decimals , uint256 cap , uint256 minFee ) public { _name = name ; _symbol = symbol ; _decimals = decimals ; _mint ( msg.sender , cap ); _changeIssuer ( msg.sender ); _changeMinFee ( minFee ); } /** * @return the name of the token. */ function name () public view returns ( string memory ) { return _name ; } /** * @return the symbol of the token. */ function symbol () public view returns ( string memory ) { return _symbol ; } /** * @return the number of decimals of the token. */ function decimals () public view returns ( uint8 ) { return _decimals ; } }","title":"TRC21 Specification"},{"location":"wp-and-research/specs/trc21_standard/#tomochain-request-for-comment-trc21-token-standard","text":"Standard Name TRC21 Author TomoChain R&D Team Category Token Standard Created 2019-05-17","title":"TomoChain Request for Comment: TRC21 Token Standard"},{"location":"wp-and-research/specs/trc21_standard/#simple-summary","text":"A standard interface for tokens that allows token holders to pay transaction fees by the token itself.","title":"Simple Summary"},{"location":"wp-and-research/specs/trc21_standard/#abstract","text":"The following standard allows for the implementation of a standard Application Programmable Interface (API) for tokens within TomoChain smart contracts. Tokens issued on TomoChain following this standard allows token holders to pay fee for transactions to the token contract in terms of the token itself.","title":"Abstract"},{"location":"wp-and-research/specs/trc21_standard/#motivation","text":"A standard token interface that extends TRC-20 standard in order to allow holders of a token issued following this standard to make transactions without the need of holding TOMO in the wallet for paying transaction fees.","title":"Motivation"},{"location":"wp-and-research/specs/trc21_standard/#trc21-specification","text":"/** * @title TRC21 interface */ interface ITRC21 { function totalSupply() external view returns (uint256); function balanceOf(address who) external view returns (uint256); function estimateFee(uint256 value) external view returns (uint256); function issuer() external view returns (address); function allowance(address owner, address spender) external view returns (uint256); function transfer(address to, uint256 value) external returns (bool); function approve(address spender, uint256 value) external returns (bool); function transferFrom(address from, address to, uint256 value) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Fee(address indexed from, address indexed to, address indexed issuer, uint256 value); }","title":"TRC21 Specification"},{"location":"wp-and-research/specs/trc21_standard/#trc21-api-specification","text":"totalSupply : Returns the token total supply. function totalSupply () external view returns ( uint256 ); balanceOf : Returns the account balance of another account with address who . function balanceOf ( address who ) external view returns ( uint256 ); estimateFee : Estimate the transaction fee in terms of the token that the transaction makers will have to pay. Transaction fee will be paid to the issuer of the TRC21 token contract following our TomoZ protocol detailed in here . function estimateFee ( uint256 value ) external view returns ( uint256 ); Ideally the function will return the transaction fee based on the value (the number of tokens) that the transaction maker wants to transfer. Transaction fee for allowance function will be estimated if input parameter value = 0 . The way fees are computed is not standardized. Token issuers can fully customize the implementation of the function. This function will also be called by user wallets to evaluate fees the user must be paying. issuer : Returns the address of the token issuer. function issuer () external view returns ( address ); The method returns the address of the token issuer. The is to ensure that only the issuer has the right to apply to the TomoZ protocol for paying fees of token-holder transactions to the token contract in terms of the token itself. The method will be called by the TomoZ protocol source code to verify that no one else is able to apply the token to the TomoZ protocol, except the issuer. transfer : Transfers _value amount of tokens to address _to , and MUST fire the Transfer and Fee event. function transfer ( address _to , uint256 _value ) public returns ( bool success ) The function will call estimateFee function to compute the transaction fee. The function SHOULD throw if the message caller\u2019s account balance does not have enough tokens to spend and to pay transaction fees. Once succeeded, the token balance of the sender should be reduced by _value plus the computed transaction fee, the balance of _to should be increasing _value , while the balance of the token issuer should be increased by the computed transaction fee. approve function approve ( address spender , uint256 value ) external returns ( bool ); Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value . This function also calls estimateFee with input parameter as 0 in order to compute the transaction fee in terms of tokens that the transaction sender must pay to the token issuer. allowance function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the amount which spender is still allowed to withdraw from owner . transferFrom function transferFrom ( address from , address to , uint256 value ) external returns ( bool ); Transfers value amount of tokens from address from to address to . The function must fire the Transfer and Fee event.","title":"TRC21 API specification"},{"location":"wp-and-research/specs/trc21_standard/#trc21-event-specification","text":"Transfer event Transfer ( address indexed from , address indexed to , uint256 value ); This event MUST be emitted when tokens are transferred in functions transfer and transferFrom . Approval event Approval ( address indexed owner , address indexed spender , uint256 value ); This event MUST be emitted on any successful call to approve function. Fee event Fee ( address indexed from , address indexed to , address indexed issuer , uint256 value ); This event MUST be emitted when tokens are transferred in functions transfer and transferFrom in order for clients/DApp/third-party wallets to notify its users about the paid transaction fee in terms of token.","title":"TRC21 Event specification"},{"location":"wp-and-research/specs/trc21_standard/#implementation","text":"The following implements the basis of the standard. For any implementation of the TRC21 standard, the following contract fields must be defined at the beginning of the contract. mapping ( address => uint256 ) private _balances ; uint256 private _minFee ; address private _issuer ; This template allows the TomoZ protocol to consider the implemented token as TRC21 and any fees paid for transactions to the token contract will be based on the token, not TOMO. _balances : record the balance of each token holder _minFee : the minimum fee in terms of tokens that the transaction sender must pay. Ideally minFee will be paid when approve function is called or when transaction fails. _issuer : the address of the token issuer who will receive transaction fees from token holders in terms of token, but will pay transaction fees to masternodes by means of TOMO. This is detailed in our TomoZ protocol specification white paper . The implementation also defines some additional functions as follows: minFee : Returns the minimum fee for any transaction. issuer : Returns the address of the issuer of the token. /** * @title Standard TRC21 token * @dev Implementation of the basic standard token. */ contract TRC21 is ITRC21 { using SafeMath for uint256 ; mapping ( address => uint256 ) private _balances ; uint256 private _minFee ; address private _issuer ; mapping ( address => mapping ( address => uint256 )) private _allowed ; uint256 private _totalSupply ; /** * @dev Total number of tokens in existence */ function totalSupply () public view returns ( uint256 ) { return _totalSupply ; } /** * @dev The amount fee that will be lost when transferring. */ function minFee () public view returns ( uint256 ) { return _minFee ; } /** * @dev token's foundation */ function issuer () public view returns ( address ) { return _issuer ; } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return An uint256 representing the amount owned by the passed address. */ function balanceOf ( address owner ) public view returns ( uint256 ) { return _balances [ owner ]; } /** * @dev Estimate transaction fee. * @param value */ function estimateFee ( uint256 value ) public view returns ( uint256 ) { return value . mul ( 0 ). add ( _minFee ); } /** * @dev Function to check the amount of tokens that an owner allowed to a spender. * @param owner address The address which owns the funds. * @param spender address The address which will spend the funds. * @return A uint256 specifying the amount of tokens still available for the spender. */ function allowance ( address owner , address spender ) public view returns ( uint256 ){ return _allowed [ owner ][ spender ]; } /** * @dev Transfer token for a specified address * @param to The address to transfer to. * @param value The amount to be transferred. */ function transfer ( address to , uint256 value ) public returns ( bool ) { uint256 total = value . add ( _minFee ); require ( to != address ( 0 )); require ( value <= total ); _transfer ( msg.sender , to , value ); _transfer ( msg.sender , _issuer , _minFee ); emit Fee ( msg.sender , to , _issuer , _minFee ); return true ; } /** * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 * @param spender The address which will spend the funds. * @param value The amount of tokens to be spent. */ function approve ( address spender , uint256 value ) public returns ( bool ) { require ( spender != address ( 0 )); require ( _balances [ msg.sender ] >= _minFee ); _allowed [ msg.sender ][ spender ] = value ; _transfer ( msg.sender , _issuer , _minFee ); emit Approval ( msg.sender , spender , value ); return true ; } /** * @dev Transfer tokens from one address to another * @param from address The address which you want to send tokens from * @param to address The address which you want to transfer to * @param value uint256 the amount of tokens to be transferred */ function transferFrom ( address from , address to , uint256 value ) public returns ( bool ) { uint256 total = value . add ( _minFee ); require ( to != address ( 0 )); require ( value <= total ); require ( total <= _allowed [ from ][ msg.sender ]); _allowed [ from ][ msg.sender ] = _allowed [ from ][ msg.sender ]. sub ( total ); _transfer ( from , to , value ); _transfer ( from , _issuer , _minFee ); emit Fee ( msg.sender , to , _issuer , _minFee ); return true ; } /** * @dev Transfer token for a specified addresses * @param from The address to transfer from. * @param to The address to transfer to. * @param value The amount to be transferred. */ function _transfer ( address from , address to , uint256 value ) internal { require ( value <= _balances [ from ]); require ( to != address ( 0 )); _balances [ from ] = _balances [ from ]. sub ( value ); _balances [ to ] = _balances [ to ]. add ( value ); emit Transfer ( from , to , value ); } /** * @dev Internal function that mints an amount of the token and assigns it to * an account. This encapsulates the modification of balances such that the * proper events are emitted. * @param account The account that will receive the created tokens. * @param value The amount that will be created. */ function _mint ( address account , uint256 value ) internal { require ( account != 0 ); _totalSupply = _totalSupply . add ( value ); _balances [ account ] = _balances [ account ]. add ( value ); emit Transfer ( address ( 0 ), account , value ); } /** * @dev Transfers token's foundation to new issuer * @param newIssuer The address to transfer ownership to. */ function _changeIssuer ( address newIssuer ) internal { require ( newIssuer != address ( 0 )); _issuer = newIssuer ; } /** * @dev Change minFee * @param value minFee */ function _changeMinFee ( uint256 value ) internal { _minFee = value ; } }","title":"Implementation"},{"location":"wp-and-research/specs/trc21_standard/#trc21-token-example","text":"The following shows an example of a TRC21 token which inherits from the TRC21 implementation. Token name, symbol, and decimals are also defined. contract MyTRC21 is TRC21 { string private _name ; string private _symbol ; uint8 private _decimals ; constructor ( string memory name , string memory symbol , uint8 decimals , uint256 cap , uint256 minFee ) public { _name = name ; _symbol = symbol ; _decimals = decimals ; _mint ( msg.sender , cap ); _changeIssuer ( msg.sender ); _changeMinFee ( minFee ); } /** * @return the name of the token. */ function name () public view returns ( string memory ) { return _name ; } /** * @return the symbol of the token. */ function symbol () public view returns ( string memory ) { return _symbol ; } /** * @return the number of decimals of the token. */ function decimals () public view returns ( uint8 ) { return _decimals ; } }","title":"TRC21 Token example"}]}